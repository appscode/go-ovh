// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDomainDataSmdSmdID deletes a s m d file

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainDataSmdSmdID(params *DeleteDomainDataSmdSmdIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainDataSmdSmdIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainDataSmdSmdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainDataSmdSmdID",
		Method:             "DELETE",
		PathPattern:        "/domain/data/smd/{smdId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainDataSmdSmdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainDataSmdSmdIDOK), nil

}

/*
DeleteDomainServiceNameGlueRecordHost deletes the glue record

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainServiceNameGlueRecordHost(params *DeleteDomainServiceNameGlueRecordHostParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainServiceNameGlueRecordHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainServiceNameGlueRecordHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainServiceNameGlueRecordHost",
		Method:             "DELETE",
		PathPattern:        "/domain/{serviceName}/glueRecord/{host}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainServiceNameGlueRecordHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainServiceNameGlueRecordHostOK), nil

}

/*
DeleteDomainServiceNameNameServerID deletes a name server

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainServiceNameNameServerID(params *DeleteDomainServiceNameNameServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainServiceNameNameServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainServiceNameNameServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainServiceNameNameServerID",
		Method:             "DELETE",
		PathPattern:        "/domain/{serviceName}/nameServer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainServiceNameNameServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainServiceNameNameServerIDOK), nil

}

/*
DeleteDomainServiceNameOwoField deletes a whois obfuscator

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainServiceNameOwoField(params *DeleteDomainServiceNameOwoFieldParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainServiceNameOwoFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainServiceNameOwoFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainServiceNameOwoField",
		Method:             "DELETE",
		PathPattern:        "/domain/{serviceName}/owo/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainServiceNameOwoFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainServiceNameOwoFieldOK), nil

}

/*
DeleteDomainZoneZoneNameDnssec disables dnssec

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainZoneZoneNameDnssec(params *DeleteDomainZoneZoneNameDnssecParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainZoneZoneNameDnssecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainZoneZoneNameDnssecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainZoneZoneNameDnssec",
		Method:             "DELETE",
		PathPattern:        "/domain/zone/{zoneName}/dnssec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainZoneZoneNameDnssecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainZoneZoneNameDnssecOK), nil

}

/*
DeleteDomainZoneZoneNameDynHostLoginLogin deletes a dyn host login

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainZoneZoneNameDynHostLoginLogin(params *DeleteDomainZoneZoneNameDynHostLoginLoginParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainZoneZoneNameDynHostLoginLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainZoneZoneNameDynHostLoginLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainZoneZoneNameDynHostLoginLogin",
		Method:             "DELETE",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainZoneZoneNameDynHostLoginLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainZoneZoneNameDynHostLoginLoginOK), nil

}

/*
DeleteDomainZoneZoneNameDynHostRecordID deletes a dyn host record don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainZoneZoneNameDynHostRecordID(params *DeleteDomainZoneZoneNameDynHostRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainZoneZoneNameDynHostRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainZoneZoneNameDynHostRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainZoneZoneNameDynHostRecordID",
		Method:             "DELETE",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainZoneZoneNameDynHostRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainZoneZoneNameDynHostRecordIDOK), nil

}

/*
DeleteDomainZoneZoneNameRecordID deletes a DNS record don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainZoneZoneNameRecordID(params *DeleteDomainZoneZoneNameRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainZoneZoneNameRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainZoneZoneNameRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainZoneZoneNameRecordID",
		Method:             "DELETE",
		PathPattern:        "/domain/zone/{zoneName}/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainZoneZoneNameRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainZoneZoneNameRecordIDOK), nil

}

/*
DeleteDomainZoneZoneNameRedirectionID deletes a redirection don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) DeleteDomainZoneZoneNameRedirectionID(params *DeleteDomainZoneZoneNameRedirectionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDomainZoneZoneNameRedirectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDomainZoneZoneNameRedirectionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDomainZoneZoneNameRedirectionID",
		Method:             "DELETE",
		PathPattern:        "/domain/zone/{zoneName}/redirection/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDomainZoneZoneNameRedirectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDomainZoneZoneNameRedirectionIDOK), nil

}

/*
GetDomain lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetDomain(params *GetDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomain",
		Method:             "GET",
		PathPattern:        "/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainOK), nil

}

/*
GetDomainDataAfnicAssociationInformation retrieves all association information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataAfnicAssociationInformation(params *GetDomainDataAfnicAssociationInformationParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataAfnicAssociationInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataAfnicAssociationInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataAfnicAssociationInformation",
		Method:             "GET",
		PathPattern:        "/domain/data/afnicAssociationInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataAfnicAssociationInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataAfnicAssociationInformationOK), nil

}

/*
GetDomainDataAfnicAssociationInformationAssociationInformationID retrieves an association information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataAfnicAssociationInformationAssociationInformationID(params *GetDomainDataAfnicAssociationInformationAssociationInformationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataAfnicAssociationInformationAssociationInformationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataAfnicAssociationInformationAssociationInformationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataAfnicAssociationInformationAssociationInformationID",
		Method:             "GET",
		PathPattern:        "/domain/data/afnicAssociationInformation/{associationInformationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataAfnicAssociationInformationAssociationInformationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataAfnicAssociationInformationAssociationInformationIDOK), nil

}

/*
GetDomainDataAfnicCorporationTrademarkInformation retrieves all corporation trademark information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataAfnicCorporationTrademarkInformation(params *GetDomainDataAfnicCorporationTrademarkInformationParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataAfnicCorporationTrademarkInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataAfnicCorporationTrademarkInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataAfnicCorporationTrademarkInformation",
		Method:             "GET",
		PathPattern:        "/domain/data/afnicCorporationTrademarkInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataAfnicCorporationTrademarkInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataAfnicCorporationTrademarkInformationOK), nil

}

/*
GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkID retrieves a corporation trademark information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkID(params *GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkID",
		Method:             "GET",
		PathPattern:        "/domain/data/afnicCorporationTrademarkInformation/{afnicCorporationTrademarkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataAfnicCorporationTrademarkInformationAfnicCorporationTrademarkIDOK), nil

}

/*
GetDomainDataClaimNotice retrieves claim notices associated to a domain

PRODUCTION
*/
func (a *Client) GetDomainDataClaimNotice(params *GetDomainDataClaimNoticeParams) (*GetDomainDataClaimNoticeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataClaimNoticeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataClaimNotice",
		Method:             "GET",
		PathPattern:        "/domain/data/claimNotice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataClaimNoticeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataClaimNoticeOK), nil

}

/*
GetDomainDataExtension lists all the extensions for a specific country

PRODUCTION
*/
func (a *Client) GetDomainDataExtension(params *GetDomainDataExtensionParams) (*GetDomainDataExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataExtensionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataExtension",
		Method:             "GET",
		PathPattern:        "/domain/data/extension",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataExtensionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataExtensionOK), nil

}

/*
GetDomainDataProContact retrieves all your pro contact

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataProContact(params *GetDomainDataProContactParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataProContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataProContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataProContact",
		Method:             "GET",
		PathPattern:        "/domain/data/proContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataProContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataProContactOK), nil

}

/*
GetDomainDataProContactProContactID retrieves information about a pro contact

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataProContactProContactID(params *GetDomainDataProContactProContactIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataProContactProContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataProContactProContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataProContactProContactID",
		Method:             "GET",
		PathPattern:        "/domain/data/proContact/{proContactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataProContactProContactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataProContactProContactIDOK), nil

}

/*
GetDomainDataSmd lists all your s m d files

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataSmd(params *GetDomainDataSmdParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataSmdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataSmdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataSmd",
		Method:             "GET",
		PathPattern:        "/domain/data/smd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataSmdReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataSmdOK), nil

}

/*
GetDomainDataSmdSmdID retrieves information about a s m d file

PRODUCTION - authentication required
*/
func (a *Client) GetDomainDataSmdSmdID(params *GetDomainDataSmdSmdIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainDataSmdSmdIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainDataSmdSmdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainDataSmdSmdID",
		Method:             "GET",
		PathPattern:        "/domain/data/smd/{smdId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainDataSmdSmdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainDataSmdSmdIDOK), nil

}

/*
GetDomainRules lists all the rules for a specific cart Id item Id

BETA
*/
func (a *Client) GetDomainRules(params *GetDomainRulesParams) (*GetDomainRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainRules",
		Method:             "GET",
		PathPattern:        "/domain/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainRulesOK), nil

}

/*
GetDomainServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceName(params *GetDomainServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceName",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameOK), nil

}

/*
GetDomainServiceNameAuthInfo returns auth info code if the domain is unlocked

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameAuthInfo(params *GetDomainServiceNameAuthInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameAuthInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameAuthInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameAuthInfo",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/authInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameAuthInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameAuthInfoOK), nil

}

/*
GetDomainServiceNameDsRecord lists of domain s d s records

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameDsRecord(params *GetDomainServiceNameDsRecordParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameDsRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameDsRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameDsRecord",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/dsRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameDsRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameDsRecordOK), nil

}

/*
GetDomainServiceNameDsRecordID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameDsRecordID(params *GetDomainServiceNameDsRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameDsRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameDsRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameDsRecordID",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/dsRecord/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameDsRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameDsRecordIDOK), nil

}

/*
GetDomainServiceNameGlueRecord lists of glue record

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameGlueRecord(params *GetDomainServiceNameGlueRecordParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameGlueRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameGlueRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameGlueRecord",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/glueRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameGlueRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameGlueRecordOK), nil

}

/*
GetDomainServiceNameGlueRecordHost gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameGlueRecordHost(params *GetDomainServiceNameGlueRecordHostParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameGlueRecordHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameGlueRecordHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameGlueRecordHost",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/glueRecord/{host}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameGlueRecordHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameGlueRecordHostOK), nil

}

/*
GetDomainServiceNameNameServer lists of current name servers

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameNameServer(params *GetDomainServiceNameNameServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameNameServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameNameServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameNameServer",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/nameServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameNameServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameNameServerOK), nil

}

/*
GetDomainServiceNameNameServerID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameNameServerID(params *GetDomainServiceNameNameServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameNameServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameNameServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameNameServerID",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/nameServer/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameNameServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameNameServerIDOK), nil

}

/*
GetDomainServiceNameOwo lists of whois obfuscators

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameOwo(params *GetDomainServiceNameOwoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameOwoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameOwoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameOwo",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/owo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameOwoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameOwoOK), nil

}

/*
GetDomainServiceNameOwoField gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameOwoField(params *GetDomainServiceNameOwoFieldParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameOwoFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameOwoFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameOwoField",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/owo/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameOwoFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameOwoFieldOK), nil

}

/*
GetDomainServiceNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameServiceInfos(params *GetDomainServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameServiceInfosOK), nil

}

/*
GetDomainServiceNameTask domains pending tasks

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameTask(params *GetDomainServiceNameTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameTask",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameTaskOK), nil

}

/*
GetDomainServiceNameTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainServiceNameTaskID(params *GetDomainServiceNameTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainServiceNameTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainServiceNameTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainServiceNameTaskID",
		Method:             "GET",
		PathPattern:        "/domain/{serviceName}/task/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainServiceNameTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainServiceNameTaskIDOK), nil

}

/*
GetDomainZone lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZone(params *GetDomainZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZone",
		Method:             "GET",
		PathPattern:        "/domain/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneOK), nil

}

/*
GetDomainZoneZoneName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneName(params *GetDomainZoneZoneNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneName",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameOK), nil

}

/*
GetDomainZoneZoneNameDnssec gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameDnssec(params *GetDomainZoneZoneNameDnssecParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameDnssecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameDnssecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameDnssec",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/dnssec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameDnssecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameDnssecOK), nil

}

/*
GetDomainZoneZoneNameDynHostLogin dyns host logins

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameDynHostLogin(params *GetDomainZoneZoneNameDynHostLoginParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameDynHostLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameDynHostLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameDynHostLogin",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameDynHostLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameDynHostLoginOK), nil

}

/*
GetDomainZoneZoneNameDynHostLoginLogin gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameDynHostLoginLogin(params *GetDomainZoneZoneNameDynHostLoginLoginParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameDynHostLoginLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameDynHostLoginLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameDynHostLoginLogin",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameDynHostLoginLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameDynHostLoginLoginOK), nil

}

/*
GetDomainZoneZoneNameDynHostRecord dyns host records

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameDynHostRecord(params *GetDomainZoneZoneNameDynHostRecordParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameDynHostRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameDynHostRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameDynHostRecord",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameDynHostRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameDynHostRecordOK), nil

}

/*
GetDomainZoneZoneNameDynHostRecordID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameDynHostRecordID(params *GetDomainZoneZoneNameDynHostRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameDynHostRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameDynHostRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameDynHostRecordID",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameDynHostRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameDynHostRecordIDOK), nil

}

/*
GetDomainZoneZoneNameExport exports zone

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameExport(params *GetDomainZoneZoneNameExportParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameExport",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameExportOK), nil

}

/*
GetDomainZoneZoneNameHistory zones restore points

BETA - authentication required
*/
func (a *Client) GetDomainZoneZoneNameHistory(params *GetDomainZoneZoneNameHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameHistory",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameHistoryOK), nil

}

/*
GetDomainZoneZoneNameHistoryCreationDate gets this object properties

BETA - authentication required
*/
func (a *Client) GetDomainZoneZoneNameHistoryCreationDate(params *GetDomainZoneZoneNameHistoryCreationDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameHistoryCreationDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameHistoryCreationDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameHistoryCreationDate",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/history/{creationDate}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameHistoryCreationDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameHistoryCreationDateOK), nil

}

/*
GetDomainZoneZoneNameRecord records of the zone

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameRecord(params *GetDomainZoneZoneNameRecordParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameRecord",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameRecordOK), nil

}

/*
GetDomainZoneZoneNameRecordID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameRecordID(params *GetDomainZoneZoneNameRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameRecordID",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameRecordIDOK), nil

}

/*
GetDomainZoneZoneNameRedirection redirections

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameRedirection(params *GetDomainZoneZoneNameRedirectionParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameRedirectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameRedirectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameRedirection",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/redirection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameRedirectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameRedirectionOK), nil

}

/*
GetDomainZoneZoneNameRedirectionID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameRedirectionID(params *GetDomainZoneZoneNameRedirectionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameRedirectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameRedirectionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameRedirectionID",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/redirection/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameRedirectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameRedirectionIDOK), nil

}

/*
GetDomainZoneZoneNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameServiceInfos(params *GetDomainZoneZoneNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameServiceInfosOK), nil

}

/*
GetDomainZoneZoneNameSoa gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameSoa(params *GetDomainZoneZoneNameSoaParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameSoaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameSoaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameSoa",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/soa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameSoaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameSoaOK), nil

}

/*
GetDomainZoneZoneNameStatus zones status

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameStatus(params *GetDomainZoneZoneNameStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameStatus",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameStatusOK), nil

}

/*
GetDomainZoneZoneNameTask domains pending tasks

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameTask(params *GetDomainZoneZoneNameTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameTask",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameTaskOK), nil

}

/*
GetDomainZoneZoneNameTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetDomainZoneZoneNameTaskID(params *GetDomainZoneZoneNameTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDomainZoneZoneNameTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainZoneZoneNameTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDomainZoneZoneNameTaskID",
		Method:             "GET",
		PathPattern:        "/domain/zone/{zoneName}/task/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainZoneZoneNameTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDomainZoneZoneNameTaskIDOK), nil

}

/*
PostDomainDataAfnicAssociationInformation posts a new association information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) PostDomainDataAfnicAssociationInformation(params *PostDomainDataAfnicAssociationInformationParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainDataAfnicAssociationInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainDataAfnicAssociationInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainDataAfnicAssociationInformation",
		Method:             "POST",
		PathPattern:        "/domain/data/afnicAssociationInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainDataAfnicAssociationInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainDataAfnicAssociationInformationOK), nil

}

/*
PostDomainDataAfnicCorporationTrademarkInformation posts a new corporation trademark information according to afnic

PRODUCTION - authentication required
*/
func (a *Client) PostDomainDataAfnicCorporationTrademarkInformation(params *PostDomainDataAfnicCorporationTrademarkInformationParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainDataAfnicCorporationTrademarkInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainDataAfnicCorporationTrademarkInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainDataAfnicCorporationTrademarkInformation",
		Method:             "POST",
		PathPattern:        "/domain/data/afnicCorporationTrademarkInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainDataAfnicCorporationTrademarkInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainDataAfnicCorporationTrademarkInformationOK), nil

}

/*
PostDomainDataProContact posts new information about pro contact information

PRODUCTION - authentication required
*/
func (a *Client) PostDomainDataProContact(params *PostDomainDataProContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainDataProContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainDataProContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainDataProContact",
		Method:             "POST",
		PathPattern:        "/domain/data/proContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainDataProContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainDataProContactOK), nil

}

/*
PostDomainDataSmd posts a new s m d file

PRODUCTION - authentication required
*/
func (a *Client) PostDomainDataSmd(params *PostDomainDataSmdParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainDataSmdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainDataSmdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainDataSmd",
		Method:             "POST",
		PathPattern:        "/domain/data/smd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainDataSmdReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainDataSmdOK), nil

}

/*
PostDomainServiceNameActivateZone activates the DNS zone for this domain

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameActivateZone(params *PostDomainServiceNameActivateZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameActivateZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameActivateZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameActivateZone",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/activateZone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameActivateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameActivateZoneOK), nil

}

/*
PostDomainServiceNameChangeContact launches a contact change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameChangeContact(params *PostDomainServiceNameChangeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameChangeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameChangeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameChangeContact",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/changeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameChangeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameChangeContactOK), nil

}

/*
PostDomainServiceNameDsRecord updates d s records

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameDsRecord(params *PostDomainServiceNameDsRecordParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameDsRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameDsRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameDsRecord",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/dsRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameDsRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameDsRecordOK), nil

}

/*
PostDomainServiceNameGlueRecord creates a glue record

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameGlueRecord(params *PostDomainServiceNameGlueRecordParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameGlueRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameGlueRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameGlueRecord",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/glueRecord",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameGlueRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameGlueRecordOK), nil

}

/*
PostDomainServiceNameGlueRecordHostUpdate updates the glue record

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameGlueRecordHostUpdate(params *PostDomainServiceNameGlueRecordHostUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameGlueRecordHostUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameGlueRecordHostUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameGlueRecordHostUpdate",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/glueRecord/{host}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameGlueRecordHostUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameGlueRecordHostUpdateOK), nil

}

/*
PostDomainServiceNameNameServer adds new name server

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameNameServer(params *PostDomainServiceNameNameServerParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameNameServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameNameServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameNameServer",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/nameServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameNameServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameNameServerOK), nil

}

/*
PostDomainServiceNameNameServerIDStatus gets name server status

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameNameServerIDStatus(params *PostDomainServiceNameNameServerIDStatusParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameNameServerIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameNameServerIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameNameServerIDStatus",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/nameServer/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameNameServerIDStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameNameServerIDStatusOK), nil

}

/*
PostDomainServiceNameNameServersUpdate updates DNS servers

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameNameServersUpdate(params *PostDomainServiceNameNameServersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameNameServersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameNameServersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameNameServersUpdate",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/nameServers/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameNameServersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameNameServersUpdateOK), nil

}

/*
PostDomainServiceNameOwo adds whois obfuscators

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameOwo(params *PostDomainServiceNameOwoParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameOwoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameOwoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameOwo",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/owo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameOwoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameOwoOK), nil

}

/*
PostDomainServiceNameTaskIDAccelerate accelerates the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameTaskIDAccelerate(params *PostDomainServiceNameTaskIDAccelerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameTaskIDAccelerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameTaskIDAccelerateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameTaskIDAccelerate",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/task/{id}/accelerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameTaskIDAccelerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameTaskIDAccelerateOK), nil

}

/*
PostDomainServiceNameTaskIDCancel cancels the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameTaskIDCancel(params *PostDomainServiceNameTaskIDCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameTaskIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameTaskIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameTaskIDCancel",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/task/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameTaskIDCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameTaskIDCancelOK), nil

}

/*
PostDomainServiceNameTaskIDRelaunch relaunches the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameTaskIDRelaunch(params *PostDomainServiceNameTaskIDRelaunchParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameTaskIDRelaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameTaskIDRelaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameTaskIDRelaunch",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/task/{id}/relaunch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameTaskIDRelaunchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameTaskIDRelaunchOK), nil

}

/*
PostDomainServiceNameUkOutgoingTransfer schedules an outgoing transfer task for this domain uk only

PRODUCTION - authentication required
*/
func (a *Client) PostDomainServiceNameUkOutgoingTransfer(params *PostDomainServiceNameUkOutgoingTransferParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainServiceNameUkOutgoingTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainServiceNameUkOutgoingTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainServiceNameUkOutgoingTransfer",
		Method:             "POST",
		PathPattern:        "/domain/{serviceName}/ukOutgoingTransfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainServiceNameUkOutgoingTransferReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainServiceNameUkOutgoingTransferOK), nil

}

/*
PostDomainZoneZoneNameChangeContact launches a contact change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameChangeContact(params *PostDomainZoneZoneNameChangeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameChangeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameChangeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameChangeContact",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/changeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameChangeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameChangeContactOK), nil

}

/*
PostDomainZoneZoneNameConfirmTermination confirms termination of your service

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameConfirmTermination(params *PostDomainZoneZoneNameConfirmTerminationParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameConfirmTerminationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameConfirmTerminationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameConfirmTermination",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/confirmTermination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameConfirmTerminationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameConfirmTerminationOK), nil

}

/*
PostDomainZoneZoneNameDnssec enables dnssec

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameDnssec(params *PostDomainZoneZoneNameDnssecParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameDnssecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameDnssecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameDnssec",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/dnssec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameDnssecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameDnssecOK), nil

}

/*
PostDomainZoneZoneNameDynHostLogin creates a new dyn host login

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameDynHostLogin(params *PostDomainZoneZoneNameDynHostLoginParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameDynHostLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameDynHostLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameDynHostLogin",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameDynHostLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameDynHostLoginOK), nil

}

/*
PostDomainZoneZoneNameDynHostLoginLoginChangePassword changes password of the dyn host login

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameDynHostLoginLoginChangePassword(params *PostDomainZoneZoneNameDynHostLoginLoginChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameDynHostLoginLoginChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameDynHostLoginLoginChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameDynHostLoginLoginChangePassword",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login/{login}/changePassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameDynHostLoginLoginChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameDynHostLoginLoginChangePasswordOK), nil

}

/*
PostDomainZoneZoneNameDynHostRecord creates a new dyn host record don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameDynHostRecord(params *PostDomainZoneZoneNameDynHostRecordParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameDynHostRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameDynHostRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameDynHostRecord",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameDynHostRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameDynHostRecordOK), nil

}

/*
PostDomainZoneZoneNameHistoryCreationDateRestore restores the DNS zone

BETA - authentication required
*/
func (a *Client) PostDomainZoneZoneNameHistoryCreationDateRestore(params *PostDomainZoneZoneNameHistoryCreationDateRestoreParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameHistoryCreationDateRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameHistoryCreationDateRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameHistoryCreationDateRestore",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/history/{creationDate}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameHistoryCreationDateRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameHistoryCreationDateRestoreOK), nil

}

/*
PostDomainZoneZoneNameImport imports zone

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameImport(params *PostDomainZoneZoneNameImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameImport",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameImportOK), nil

}

/*
PostDomainZoneZoneNameRecord creates a new DNS record don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameRecord(params *PostDomainZoneZoneNameRecordParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameRecordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameRecordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameRecord",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameRecordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameRecordOK), nil

}

/*
PostDomainZoneZoneNameRedirection creates a new redirection don t forget to refresh the zone

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameRedirection(params *PostDomainZoneZoneNameRedirectionParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameRedirectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameRedirectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameRedirection",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/redirection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameRedirectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameRedirectionOK), nil

}

/*
PostDomainZoneZoneNameRefresh applies zone modification on DNS servers

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameRefresh(params *PostDomainZoneZoneNameRefreshParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameRefresh",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameRefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameRefreshOK), nil

}

/*
PostDomainZoneZoneNameReset resets the DNS zone

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameReset(params *PostDomainZoneZoneNameResetParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameResetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameReset",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameResetOK), nil

}

/*
PostDomainZoneZoneNameTaskIDAccelerate accelerates the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameTaskIDAccelerate(params *PostDomainZoneZoneNameTaskIDAccelerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameTaskIDAccelerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameTaskIDAccelerateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameTaskIDAccelerate",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/task/{id}/accelerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameTaskIDAccelerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameTaskIDAccelerateOK), nil

}

/*
PostDomainZoneZoneNameTaskIDCancel cancels the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameTaskIDCancel(params *PostDomainZoneZoneNameTaskIDCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameTaskIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameTaskIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameTaskIDCancel",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/task/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameTaskIDCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameTaskIDCancelOK), nil

}

/*
PostDomainZoneZoneNameTaskIDRelaunch relaunches the task

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameTaskIDRelaunch(params *PostDomainZoneZoneNameTaskIDRelaunchParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameTaskIDRelaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameTaskIDRelaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameTaskIDRelaunch",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/task/{id}/relaunch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameTaskIDRelaunchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameTaskIDRelaunchOK), nil

}

/*
PostDomainZoneZoneNameTerminate terminates your service

PRODUCTION - authentication required
*/
func (a *Client) PostDomainZoneZoneNameTerminate(params *PostDomainZoneZoneNameTerminateParams, authInfo runtime.ClientAuthInfoWriter) (*PostDomainZoneZoneNameTerminateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainZoneZoneNameTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDomainZoneZoneNameTerminate",
		Method:             "POST",
		PathPattern:        "/domain/zone/{zoneName}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainZoneZoneNameTerminateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDomainZoneZoneNameTerminateOK), nil

}

/*
PutDomainDataSmdSmdID modifies an existing s m d file

PRODUCTION - authentication required
*/
func (a *Client) PutDomainDataSmdSmdID(params *PutDomainDataSmdSmdIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainDataSmdSmdIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainDataSmdSmdIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainDataSmdSmdID",
		Method:             "PUT",
		PathPattern:        "/domain/data/smd/{smdId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainDataSmdSmdIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainDataSmdSmdIDOK), nil

}

/*
PutDomainServiceName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainServiceName(params *PutDomainServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainServiceName",
		Method:             "PUT",
		PathPattern:        "/domain/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainServiceNameOK), nil

}

/*
PutDomainServiceNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainServiceNameServiceInfos(params *PutDomainServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/domain/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainServiceNameServiceInfosOK), nil

}

/*
PutDomainZoneZoneNameDynHostLoginLogin alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameDynHostLoginLogin(params *PutDomainZoneZoneNameDynHostLoginLoginParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameDynHostLoginLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameDynHostLoginLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameDynHostLoginLogin",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/login/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameDynHostLoginLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameDynHostLoginLoginOK), nil

}

/*
PutDomainZoneZoneNameDynHostRecordID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameDynHostRecordID(params *PutDomainZoneZoneNameDynHostRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameDynHostRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameDynHostRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameDynHostRecordID",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/dynHost/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameDynHostRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameDynHostRecordIDOK), nil

}

/*
PutDomainZoneZoneNameRecordID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameRecordID(params *PutDomainZoneZoneNameRecordIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameRecordIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameRecordIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameRecordID",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/record/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameRecordIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameRecordIDOK), nil

}

/*
PutDomainZoneZoneNameRedirectionID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameRedirectionID(params *PutDomainZoneZoneNameRedirectionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameRedirectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameRedirectionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameRedirectionID",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/redirection/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameRedirectionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameRedirectionIDOK), nil

}

/*
PutDomainZoneZoneNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameServiceInfos(params *PutDomainZoneZoneNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameServiceInfosOK), nil

}

/*
PutDomainZoneZoneNameSoa alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutDomainZoneZoneNameSoa(params *PutDomainZoneZoneNameSoaParams, authInfo runtime.ClientAuthInfoWriter) (*PutDomainZoneZoneNameSoaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDomainZoneZoneNameSoaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDomainZoneZoneNameSoa",
		Method:             "PUT",
		PathPattern:        "/domain/zone/{zoneName}/soa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutDomainZoneZoneNameSoaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDomainZoneZoneNameSoaOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
