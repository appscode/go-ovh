// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDomainZoneZoneNameRecordParamsBody post domain zone zone name record params body
// swagger:model postDomainZoneZoneNameRecordParamsBody
type PostDomainZoneZoneNameRecordParamsBody struct {

	// field type
	// Required: true
	FieldType *string `json:"fieldType"`

	// sub domain
	SubDomain string `json:"subDomain,omitempty"`

	// target
	// Required: true
	Target *string `json:"target"`

	// ttl
	TTL int64 `json:"ttl,omitempty"`
}

// Validate validates this post domain zone zone name record params body
func (m *PostDomainZoneZoneNameRecordParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postDomainZoneZoneNameRecordParamsBodyTypeFieldTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A","AAAA","CNAME","DKIM","LOC","MX","NAPTR","NS","PTR","SPF","SRV","SSHFP","TLSA","TXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postDomainZoneZoneNameRecordParamsBodyTypeFieldTypePropEnum = append(postDomainZoneZoneNameRecordParamsBodyTypeFieldTypePropEnum, v)
	}
}

const (
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeA captures enum value "A"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeA string = "A"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeAAAA captures enum value "AAAA"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeAAAA string = "AAAA"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeCNAME captures enum value "CNAME"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeCNAME string = "CNAME"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeDKIM captures enum value "DKIM"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeDKIM string = "DKIM"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeLOC captures enum value "LOC"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeLOC string = "LOC"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeMX captures enum value "MX"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeMX string = "MX"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeNAPTR captures enum value "NAPTR"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeNAPTR string = "NAPTR"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeNS captures enum value "NS"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeNS string = "NS"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypePTR captures enum value "PTR"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypePTR string = "PTR"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeSPF captures enum value "SPF"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeSPF string = "SPF"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeSRV captures enum value "SRV"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeSRV string = "SRV"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeSSHFP captures enum value "SSHFP"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeSSHFP string = "SSHFP"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeTLSA captures enum value "TLSA"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeTLSA string = "TLSA"
	// PostDomainZoneZoneNameRecordParamsBodyFieldTypeTXT captures enum value "TXT"
	PostDomainZoneZoneNameRecordParamsBodyFieldTypeTXT string = "TXT"
)

// prop value enum
func (m *PostDomainZoneZoneNameRecordParamsBody) validateFieldTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postDomainZoneZoneNameRecordParamsBodyTypeFieldTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostDomainZoneZoneNameRecordParamsBody) validateFieldType(formats strfmt.Registry) error {

	if err := validate.Required("fieldType", "body", m.FieldType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFieldTypeEnum("fieldType", "body", *m.FieldType); err != nil {
		return err
	}

	return nil
}

func (m *PostDomainZoneZoneNameRecordParamsBody) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostDomainZoneZoneNameRecordParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostDomainZoneZoneNameRecordParamsBody) UnmarshalBinary(b []byte) error {
	var res PostDomainZoneZoneNameRecordParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
