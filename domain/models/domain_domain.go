// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDomain Domain name administration
// swagger:model domain.Domain
type DomainDomain struct {

	// Is DNSSEC implemented for this domain name's tld
	// Required: true
	// Read Only: true
	DnssecSupported bool `json:"dnssecSupported"`

	// Domain name
	// Required: true
	// Read Only: true
	Domain string `json:"domain"`

	// Does the registry support ipv6 glue record
	// Required: true
	// Read Only: true
	GlueRecordIPV6Supported bool `json:"glueRecordIpv6Supported"`

	// Does the registry support multi ip glue record
	// Required: true
	// Read Only: true
	GlueRecordMultiIPSupported bool `json:"glueRecordMultiIpSupported"`

	// Last update date
	// Required: true
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate"`

	// Name servers type
	NameServerType string `json:"nameServerType,omitempty"`

	// Domain's offer
	// Required: true
	// Read Only: true
	Offer string `json:"offer"`

	// Is whois obfuscation supported by this domain name's registry
	// Required: true
	// Read Only: true
	OwoSupported bool `json:"owoSupported"`

	// parent service
	ParentService *DomainParentService `json:"parentService,omitempty"`

	// Transfer lock status
	TransferLockStatus string `json:"transferLockStatus,omitempty"`

	// Contact Owner (you can edit it via /me/contact/<ID>)
	// Required: true
	// Read Only: true
	WhoisOwner string `json:"whoisOwner"`
}

// Validate validates this domain domain
func (m *DomainDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDnssecSupported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGlueRecordIPV6Supported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGlueRecordMultiIPSupported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNameServerType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOffer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwoSupported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParentService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransferLockStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWhoisOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainDomain) validateDnssecSupported(formats strfmt.Registry) error {

	if err := validate.Required("dnssecSupported", "body", bool(m.DnssecSupported)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateDomain(formats strfmt.Registry) error {

	if err := validate.RequiredString("domain", "body", string(m.Domain)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateGlueRecordIPV6Supported(formats strfmt.Registry) error {

	if err := validate.Required("glueRecordIpv6Supported", "body", bool(m.GlueRecordIPV6Supported)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateGlueRecordMultiIPSupported(formats strfmt.Registry) error {

	if err := validate.Required("glueRecordMultiIpSupported", "body", bool(m.GlueRecordMultiIPSupported)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

var domainDomainTypeNameServerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["external","hosted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDomainTypeNameServerTypePropEnum = append(domainDomainTypeNameServerTypePropEnum, v)
	}
}

const (
	// DomainDomainNameServerTypeExternal captures enum value "external"
	DomainDomainNameServerTypeExternal string = "external"
	// DomainDomainNameServerTypeHosted captures enum value "hosted"
	DomainDomainNameServerTypeHosted string = "hosted"
)

// prop value enum
func (m *DomainDomain) validateNameServerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainDomainTypeNameServerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDomain) validateNameServerType(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServerType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameServerTypeEnum("nameServerType", "body", m.NameServerType); err != nil {
		return err
	}

	return nil
}

var domainDomainTypeOfferPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["diamond","gold","platinum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDomainTypeOfferPropEnum = append(domainDomainTypeOfferPropEnum, v)
	}
}

const (
	// DomainDomainOfferDiamond captures enum value "diamond"
	DomainDomainOfferDiamond string = "diamond"
	// DomainDomainOfferGold captures enum value "gold"
	DomainDomainOfferGold string = "gold"
	// DomainDomainOfferPlatinum captures enum value "platinum"
	DomainDomainOfferPlatinum string = "platinum"
)

// prop value enum
func (m *DomainDomain) validateOfferEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainDomainTypeOfferPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDomain) validateOffer(formats strfmt.Registry) error {

	if err := validate.RequiredString("offer", "body", string(m.Offer)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOfferEnum("offer", "body", m.Offer); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateOwoSupported(formats strfmt.Registry) error {

	if err := validate.Required("owoSupported", "body", bool(m.OwoSupported)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateParentService(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentService) { // not required
		return nil
	}

	if m.ParentService != nil {

		if err := m.ParentService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentService")
			}
			return err
		}
	}

	return nil
}

var domainDomainTypeTransferLockStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["locked","locking","unavailable","unlocked","unlocking"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDomainTypeTransferLockStatusPropEnum = append(domainDomainTypeTransferLockStatusPropEnum, v)
	}
}

const (
	// DomainDomainTransferLockStatusLocked captures enum value "locked"
	DomainDomainTransferLockStatusLocked string = "locked"
	// DomainDomainTransferLockStatusLocking captures enum value "locking"
	DomainDomainTransferLockStatusLocking string = "locking"
	// DomainDomainTransferLockStatusUnavailable captures enum value "unavailable"
	DomainDomainTransferLockStatusUnavailable string = "unavailable"
	// DomainDomainTransferLockStatusUnlocked captures enum value "unlocked"
	DomainDomainTransferLockStatusUnlocked string = "unlocked"
	// DomainDomainTransferLockStatusUnlocking captures enum value "unlocking"
	DomainDomainTransferLockStatusUnlocking string = "unlocking"
)

// prop value enum
func (m *DomainDomain) validateTransferLockStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainDomainTypeTransferLockStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDomain) validateTransferLockStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.TransferLockStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransferLockStatusEnum("transferLockStatus", "body", m.TransferLockStatus); err != nil {
		return err
	}

	return nil
}

func (m *DomainDomain) validateWhoisOwner(formats strfmt.Registry) error {

	if err := validate.RequiredString("whoisOwner", "body", string(m.WhoisOwner)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDomain) UnmarshalBinary(b []byte) error {
	var res DomainDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
