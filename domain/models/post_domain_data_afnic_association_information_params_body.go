// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostDomainDataAfnicAssociationInformationParamsBody post domain data afnic association information params body
// swagger:model postDomainDataAfnicAssociationInformationParamsBody
type PostDomainDataAfnicAssociationInformationParamsBody struct {

	// contact Id
	// Required: true
	ContactID *int64 `json:"contactId"`

	// declaration date
	// Required: true
	DeclarationDate *strfmt.Date `json:"declarationDate"`

	// publication date
	// Required: true
	PublicationDate *strfmt.Date `json:"publicationDate"`

	// publication number
	// Required: true
	PublicationNumber *string `json:"publicationNumber"`

	// publication page number
	// Required: true
	PublicationPageNumber *string `json:"publicationPageNumber"`
}

// Validate validates this post domain data afnic association information params body
func (m *PostDomainDataAfnicAssociationInformationParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeclarationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicationNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicationPageNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostDomainDataAfnicAssociationInformationParamsBody) validateContactID(formats strfmt.Registry) error {

	if err := validate.Required("contactId", "body", m.ContactID); err != nil {
		return err
	}

	return nil
}

func (m *PostDomainDataAfnicAssociationInformationParamsBody) validateDeclarationDate(formats strfmt.Registry) error {

	if err := validate.Required("declarationDate", "body", m.DeclarationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("declarationDate", "body", "date", m.DeclarationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostDomainDataAfnicAssociationInformationParamsBody) validatePublicationDate(formats strfmt.Registry) error {

	if err := validate.Required("publicationDate", "body", m.PublicationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("publicationDate", "body", "date", m.PublicationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PostDomainDataAfnicAssociationInformationParamsBody) validatePublicationNumber(formats strfmt.Registry) error {

	if err := validate.Required("publicationNumber", "body", m.PublicationNumber); err != nil {
		return err
	}

	return nil
}

func (m *PostDomainDataAfnicAssociationInformationParamsBody) validatePublicationPageNumber(formats strfmt.Registry) error {

	if err := validate.Required("publicationPageNumber", "body", m.PublicationPageNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostDomainDataAfnicAssociationInformationParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostDomainDataAfnicAssociationInformationParamsBody) UnmarshalBinary(b []byte) error {
	var res PostDomainDataAfnicAssociationInformationParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
