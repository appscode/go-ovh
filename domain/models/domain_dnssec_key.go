// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDnssecKey Domain's DNSSEC Key
// swagger:model domain.DnssecKey
type DomainDnssecKey struct {

	// Algorithm number of the DNSSEC key
	// Required: true
	// Read Only: true
	Algorithm int64 `json:"algorithm"`

	// Flag of the DNSSEC key
	// Required: true
	// Read Only: true
	Flags int64 `json:"flags"`

	// Id of the DNSSEC key
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// Public key
	// Required: true
	// Read Only: true
	PublicKey string `json:"publicKey"`

	// Key status of the DNSSEC key
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Tag of the DNSSEC key
	// Required: true
	// Read Only: true
	Tag int64 `json:"tag"`
}

// Validate validates this domain dnssec key
func (m *DomainDnssecKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainDnssecKeyTypeAlgorithmPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[10,13,14,3,5,6,7,8]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDnssecKeyTypeAlgorithmPropEnum = append(domainDnssecKeyTypeAlgorithmPropEnum, v)
	}
}

// prop value enum
func (m *DomainDnssecKey) validateAlgorithmEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, domainDnssecKeyTypeAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDnssecKey) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("algorithm", "body", int64(m.Algorithm)); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithmEnum("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

var domainDnssecKeyTypeFlagsPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[256,257]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDnssecKeyTypeFlagsPropEnum = append(domainDnssecKeyTypeFlagsPropEnum, v)
	}
}

// prop value enum
func (m *DomainDnssecKey) validateFlagsEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, domainDnssecKeyTypeFlagsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDnssecKey) validateFlags(formats strfmt.Registry) error {

	if err := validate.Required("flags", "body", int64(m.Flags)); err != nil {
		return err
	}

	// value enum
	if err := m.validateFlagsEnum("flags", "body", m.Flags); err != nil {
		return err
	}

	return nil
}

func (m *DomainDnssecKey) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDnssecKey) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.RequiredString("publicKey", "body", string(m.PublicKey)); err != nil {
		return err
	}

	return nil
}

var domainDnssecKeyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","generated","published","removed","retired","revoked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDnssecKeyTypeStatusPropEnum = append(domainDnssecKeyTypeStatusPropEnum, v)
	}
}

const (
	// DomainDnssecKeyStatusActive captures enum value "active"
	DomainDnssecKeyStatusActive string = "active"
	// DomainDnssecKeyStatusGenerated captures enum value "generated"
	DomainDnssecKeyStatusGenerated string = "generated"
	// DomainDnssecKeyStatusPublished captures enum value "published"
	DomainDnssecKeyStatusPublished string = "published"
	// DomainDnssecKeyStatusRemoved captures enum value "removed"
	DomainDnssecKeyStatusRemoved string = "removed"
	// DomainDnssecKeyStatusRetired captures enum value "retired"
	DomainDnssecKeyStatusRetired string = "retired"
	// DomainDnssecKeyStatusRevoked captures enum value "revoked"
	DomainDnssecKeyStatusRevoked string = "revoked"
)

// prop value enum
func (m *DomainDnssecKey) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainDnssecKeyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDnssecKey) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DomainDnssecKey) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", int64(m.Tag)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDnssecKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDnssecKey) UnmarshalBinary(b []byte) error {
	var res DomainDnssecKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
