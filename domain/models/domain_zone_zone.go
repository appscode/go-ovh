// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainZoneZone Zone dns Management
// swagger:model domain.Zone.Zone
type DomainZoneZone struct {

	// Is DNSSEC supported by this zone
	// Required: true
	// Read Only: true
	DnssecSupported bool `json:"dnssecSupported"`

	// hasDnsAnycast flag of the DNS zone
	// Required: true
	// Read Only: true
	HasDNSAnycast bool `json:"hasDnsAnycast"`

	// Last update date of the DNS zone
	// Required: true
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate"`

	// Name servers that host the DNS zone
	// Required: true
	// Read Only: true
	NameServers []string `json:"nameServers"`
}

// Validate validates this domain zone zone
func (m *DomainZoneZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDnssecSupported(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHasDNSAnycast(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainZoneZone) validateDnssecSupported(formats strfmt.Registry) error {

	if err := validate.Required("dnssecSupported", "body", bool(m.DnssecSupported)); err != nil {
		return err
	}

	return nil
}

func (m *DomainZoneZone) validateHasDNSAnycast(formats strfmt.Registry) error {

	if err := validate.Required("hasDnsAnycast", "body", bool(m.HasDNSAnycast)); err != nil {
		return err
	}

	return nil
}

func (m *DomainZoneZone) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainZoneZone) validateNameServers(formats strfmt.Registry) error {

	if err := validate.Required("nameServers", "body", m.NameServers); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainZoneZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainZoneZone) UnmarshalBinary(b []byte) error {
	var res DomainZoneZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
