// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDataClaimNoticeClaimNoticeDecision Definition of a single claim notice
// swagger:model domain.Data.ClaimNotice.ClaimNoticeDecision
type DomainDataClaimNoticeClaimNoticeDecision struct {

	// classifications
	// Required: true
	Classifications DomainDataClaimNoticeClaimNoticeDecisionClassifications `json:"classifications"`

	// court decisions
	// Required: true
	CourtDecisions DomainDataClaimNoticeClaimNoticeDecisionCourtDecisions `json:"courtDecisions"`

	// Goods and services on which apply claim notice
	// Required: true
	// Read Only: true
	GoodsAndServices string `json:"goodsAndServices"`

	// Name of jurisdiction
	// Required: true
	// Read Only: true
	Jurisdiction string `json:"jurisdiction"`

	// Jurisdiction country code
	// Required: true
	// Read Only: true
	JurisdictionCountryCode string `json:"jurisdictionCountryCode"`

	// Mark name implicated in claim notice
	// Required: true
	// Read Only: true
	MarkName string `json:"markName"`

	// trademark contacts
	// Required: true
	TrademarkContacts DomainDataClaimNoticeClaimNoticeDecisionTrademarkContacts `json:"trademarkContacts"`

	// trademark holders
	// Required: true
	TrademarkHolders DomainDataClaimNoticeClaimNoticeDecisionTrademarkHolders `json:"trademarkHolders"`

	// trademark u d r p
	// Required: true
	TrademarkUDRP DomainDataClaimNoticeClaimNoticeDecisionTrademarkUDRP `json:"trademarkUDRP"`
}

// Validate validates this domain data claim notice claim notice decision
func (m *DomainDataClaimNoticeClaimNoticeDecision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassifications(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCourtDecisions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGoodsAndServices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJurisdiction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJurisdictionCountryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMarkName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrademarkContacts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrademarkHolders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrademarkUDRP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateClassifications(formats strfmt.Registry) error {

	if err := validate.Required("classifications", "body", m.Classifications); err != nil {
		return err
	}

	if err := m.Classifications.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("classifications")
		}
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateCourtDecisions(formats strfmt.Registry) error {

	if err := validate.Required("courtDecisions", "body", m.CourtDecisions); err != nil {
		return err
	}

	if err := m.CourtDecisions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("courtDecisions")
		}
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateGoodsAndServices(formats strfmt.Registry) error {

	if err := validate.RequiredString("goodsAndServices", "body", string(m.GoodsAndServices)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateJurisdiction(formats strfmt.Registry) error {

	if err := validate.RequiredString("jurisdiction", "body", string(m.Jurisdiction)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateJurisdictionCountryCode(formats strfmt.Registry) error {

	if err := validate.RequiredString("jurisdictionCountryCode", "body", string(m.JurisdictionCountryCode)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateMarkName(formats strfmt.Registry) error {

	if err := validate.RequiredString("markName", "body", string(m.MarkName)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateTrademarkContacts(formats strfmt.Registry) error {

	if err := validate.Required("trademarkContacts", "body", m.TrademarkContacts); err != nil {
		return err
	}

	if err := m.TrademarkContacts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trademarkContacts")
		}
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateTrademarkHolders(formats strfmt.Registry) error {

	if err := validate.Required("trademarkHolders", "body", m.TrademarkHolders); err != nil {
		return err
	}

	if err := m.TrademarkHolders.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trademarkHolders")
		}
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNoticeDecision) validateTrademarkUDRP(formats strfmt.Registry) error {

	if err := validate.Required("trademarkUDRP", "body", m.TrademarkUDRP); err != nil {
		return err
	}

	if err := m.TrademarkUDRP.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trademarkUDRP")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDataClaimNoticeClaimNoticeDecision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDataClaimNoticeClaimNoticeDecision) UnmarshalBinary(b []byte) error {
	var res DomainDataClaimNoticeClaimNoticeDecision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
