// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDataClaimNoticeClaimNotice Definition of claim notices applying to a domain name
// swagger:model domain.Data.ClaimNotice.ClaimNotice
type DomainDataClaimNoticeClaimNotice struct {

	// claims
	Claims DomainDataClaimNoticeClaimNoticeClaims `json:"claims"`

	// Ending date of claim notice
	// Required: true
	// Read Only: true
	EndingDate string `json:"endingDate"`

	// Claim notice ID
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Label referring to claim notice
	// Required: true
	// Read Only: true
	Label string `json:"label"`

	// Beginning date of claim notice
	// Read Only: true
	StartingDate string `json:"startingDate,omitempty"`

	// Type of claim notice
	Type string `json:"type,omitempty"`
}

// Validate validates this domain data claim notice claim notice
func (m *DomainDataClaimNoticeClaimNotice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndingDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainDataClaimNoticeClaimNotice) validateEndingDate(formats strfmt.Registry) error {

	if err := validate.RequiredString("endingDate", "body", string(m.EndingDate)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNotice) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClaimNotice) validateLabel(formats strfmt.Registry) error {

	if err := validate.RequiredString("label", "body", string(m.Label)); err != nil {
		return err
	}

	return nil
}

var domainDataClaimNoticeClaimNoticeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UK","TRADEMARK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainDataClaimNoticeClaimNoticeTypeTypePropEnum = append(domainDataClaimNoticeClaimNoticeTypeTypePropEnum, v)
	}
}

const (
	// DomainDataClaimNoticeClaimNoticeTypeUK captures enum value "UK"
	DomainDataClaimNoticeClaimNoticeTypeUK string = "UK"
	// DomainDataClaimNoticeClaimNoticeTypeTRADEMARK captures enum value "TRADEMARK"
	DomainDataClaimNoticeClaimNoticeTypeTRADEMARK string = "TRADEMARK"
)

// prop value enum
func (m *DomainDataClaimNoticeClaimNotice) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainDataClaimNoticeClaimNoticeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainDataClaimNoticeClaimNotice) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDataClaimNoticeClaimNotice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDataClaimNoticeClaimNotice) UnmarshalBinary(b []byte) error {
	var res DomainDataClaimNoticeClaimNotice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
