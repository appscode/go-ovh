// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DedicatedInstallationTemplateTemplatePartitions  Partitions defined in this partitioning scheme
// swagger:model dedicated.InstallationTemplate.TemplatePartitions
type DedicatedInstallationTemplateTemplatePartitions struct {

	// Partition filesytem
	Filesystem string `json:"filesystem,omitempty"`

	// partition mount point
	Mountpoint string `json:"mountpoint,omitempty"`

	// specifies the creation order of the partition on the disk
	Order int64 `json:"order,omitempty"`

	// raid partition type
	Raid string `json:"raid,omitempty"`

	// size
	Size *DedicatedInstallationTemplateTemplatePartitionsSize `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// The volume name needed for proxmox distribution
	VolumeName string `json:"volumeName,omitempty"`
}

// Validate validates this dedicated installation template template partitions
func (m *DedicatedInstallationTemplateTemplatePartitions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRaid(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dedicatedInstallationTemplateTemplatePartitionsTypeFilesystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["btrfs","ext3","ext4","ntfs","reiserfs","swap","ufs","xfs","zfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedInstallationTemplateTemplatePartitionsTypeFilesystemPropEnum = append(dedicatedInstallationTemplateTemplatePartitionsTypeFilesystemPropEnum, v)
	}
}

const (
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemBtrfs captures enum value "btrfs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemBtrfs string = "btrfs"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemExt3 captures enum value "ext3"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemExt3 string = "ext3"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemExt4 captures enum value "ext4"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemExt4 string = "ext4"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemNtfs captures enum value "ntfs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemNtfs string = "ntfs"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemReiserfs captures enum value "reiserfs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemReiserfs string = "reiserfs"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemSwap captures enum value "swap"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemSwap string = "swap"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemUfs captures enum value "ufs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemUfs string = "ufs"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemXfs captures enum value "xfs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemXfs string = "xfs"
	// DedicatedInstallationTemplateTemplatePartitionsFilesystemZfs captures enum value "zfs"
	DedicatedInstallationTemplateTemplatePartitionsFilesystemZfs string = "zfs"
)

// prop value enum
func (m *DedicatedInstallationTemplateTemplatePartitions) validateFilesystemEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedInstallationTemplateTemplatePartitionsTypeFilesystemPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedInstallationTemplateTemplatePartitions) validateFilesystem(formats strfmt.Registry) error {

	if swag.IsZero(m.Filesystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateFilesystemEnum("filesystem", "body", m.Filesystem); err != nil {
		return err
	}

	return nil
}

var dedicatedInstallationTemplateTemplatePartitionsTypeRaidPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0","1","10","5","6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedInstallationTemplateTemplatePartitionsTypeRaidPropEnum = append(dedicatedInstallationTemplateTemplatePartitionsTypeRaidPropEnum, v)
	}
}

const (
	// DedicatedInstallationTemplateTemplatePartitionsRaidNr0 captures enum value "0"
	DedicatedInstallationTemplateTemplatePartitionsRaidNr0 string = "0"
	// DedicatedInstallationTemplateTemplatePartitionsRaidNr1 captures enum value "1"
	DedicatedInstallationTemplateTemplatePartitionsRaidNr1 string = "1"
	// DedicatedInstallationTemplateTemplatePartitionsRaidNr10 captures enum value "10"
	DedicatedInstallationTemplateTemplatePartitionsRaidNr10 string = "10"
	// DedicatedInstallationTemplateTemplatePartitionsRaidNr5 captures enum value "5"
	DedicatedInstallationTemplateTemplatePartitionsRaidNr5 string = "5"
	// DedicatedInstallationTemplateTemplatePartitionsRaidNr6 captures enum value "6"
	DedicatedInstallationTemplateTemplatePartitionsRaidNr6 string = "6"
)

// prop value enum
func (m *DedicatedInstallationTemplateTemplatePartitions) validateRaidEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedInstallationTemplateTemplatePartitionsTypeRaidPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedInstallationTemplateTemplatePartitions) validateRaid(formats strfmt.Registry) error {

	if swag.IsZero(m.Raid) { // not required
		return nil
	}

	// value enum
	if err := m.validateRaidEnum("raid", "body", m.Raid); err != nil {
		return err
	}

	return nil
}

func (m *DedicatedInstallationTemplateTemplatePartitions) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if m.Size != nil {

		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

var dedicatedInstallationTemplateTemplatePartitionsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["logical","lv","primary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedInstallationTemplateTemplatePartitionsTypeTypePropEnum = append(dedicatedInstallationTemplateTemplatePartitionsTypeTypePropEnum, v)
	}
}

const (
	// DedicatedInstallationTemplateTemplatePartitionsTypeLogical captures enum value "logical"
	DedicatedInstallationTemplateTemplatePartitionsTypeLogical string = "logical"
	// DedicatedInstallationTemplateTemplatePartitionsTypeLv captures enum value "lv"
	DedicatedInstallationTemplateTemplatePartitionsTypeLv string = "lv"
	// DedicatedInstallationTemplateTemplatePartitionsTypePrimary captures enum value "primary"
	DedicatedInstallationTemplateTemplatePartitionsTypePrimary string = "primary"
)

// prop value enum
func (m *DedicatedInstallationTemplateTemplatePartitions) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedInstallationTemplateTemplatePartitionsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedInstallationTemplateTemplatePartitions) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DedicatedInstallationTemplateTemplatePartitions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DedicatedInstallationTemplateTemplatePartitions) UnmarshalBinary(b []byte) error {
	var res DedicatedInstallationTemplateTemplatePartitions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
