// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody post me installation template template name partition scheme scheme name partition params body
// swagger:model postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody
type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody struct {

	// filesystem
	// Required: true
	Filesystem *string `json:"filesystem"`

	// mountpoint
	// Required: true
	Mountpoint *string `json:"mountpoint"`

	// raid
	Raid int64 `json:"raid,omitempty"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// step
	// Required: true
	Step *int64 `json:"step"`

	// type
	// Required: true
	Type *string `json:"type"`

	// volume name
	VolumeName string `json:"volumeName,omitempty"`
}

// Validate validates this post me installation template template name partition scheme scheme name partition params body
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMountpoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeFilesystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["btrfs","ext3","ext4","ntfs","reiserfs","swap","ufs","xfs","zfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeFilesystemPropEnum = append(postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeFilesystemPropEnum, v)
	}
}

const (
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemBtrfs captures enum value "btrfs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemBtrfs string = "btrfs"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemExt3 captures enum value "ext3"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemExt3 string = "ext3"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemExt4 captures enum value "ext4"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemExt4 string = "ext4"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemNtfs captures enum value "ntfs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemNtfs string = "ntfs"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemReiserfs captures enum value "reiserfs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemReiserfs string = "reiserfs"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemSwap captures enum value "swap"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemSwap string = "swap"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemUfs captures enum value "ufs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemUfs string = "ufs"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemXfs captures enum value "xfs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemXfs string = "xfs"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemZfs captures enum value "zfs"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyFilesystemZfs string = "zfs"
)

// prop value enum
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateFilesystemEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeFilesystemPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateFilesystem(formats strfmt.Registry) error {

	if err := validate.Required("filesystem", "body", m.Filesystem); err != nil {
		return err
	}

	// value enum
	if err := m.validateFilesystemEnum("filesystem", "body", *m.Filesystem); err != nil {
		return err
	}

	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateMountpoint(formats strfmt.Registry) error {

	if err := validate.Required("mountpoint", "body", m.Mountpoint); err != nil {
		return err
	}

	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateStep(formats strfmt.Registry) error {

	if err := validate.Required("step", "body", m.Step); err != nil {
		return err
	}

	return nil
}

var postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["logical","lv","primary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeTypePropEnum = append(postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeTypePropEnum, v)
	}
}

const (
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeLogical captures enum value "logical"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeLogical string = "logical"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeLv captures enum value "lv"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeLv string = "lv"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypePrimary captures enum value "primary"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypePrimary string = "primary"
)

// prop value enum
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody) UnmarshalBinary(b []byte) error {
	var res PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
