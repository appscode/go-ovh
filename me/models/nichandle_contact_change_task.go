// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NichandleContactChangeTask Task running a contact change on a service
// swagger:model nichandle.ContactChange.Task
type NichandleContactChangeTask struct {

	// Account who asked the contact change
	// Read Only: true
	AskingAccount string `json:"askingAccount,omitempty"`

	// Contacts to be changed
	// Required: true
	// Read Only: true
	ContactTypes []string `json:"contactTypes"`

	// Date at which the contact change has been finished
	// Read Only: true
	DateDone strfmt.DateTime `json:"dateDone,omitempty"`

	// Date at which the request has been made
	// Required: true
	// Read Only: true
	DateRequest strfmt.DateTime `json:"dateRequest"`

	// Account to change contact from
	// Required: true
	// Read Only: true
	FromAccount string `json:"fromAccount"`

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// The service on which the task runs
	// Read Only: true
	ServiceDomain string `json:"serviceDomain,omitempty"`

	// Current state of the request
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// Account to change contact to
	// Required: true
	// Read Only: true
	ToAccount string `json:"toAccount"`
}

// Validate validates this nichandle contact change task
func (m *NichandleContactChangeTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDateRequest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFromAccount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToAccount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nichandleContactChangeTaskContactTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["contactAdmin","contactBilling","contactTech"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleContactChangeTaskContactTypesItemsEnum = append(nichandleContactChangeTaskContactTypesItemsEnum, v)
	}
}

func (m *NichandleContactChangeTask) validateContactTypesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleContactChangeTaskContactTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleContactChangeTask) validateContactTypes(formats strfmt.Registry) error {

	if err := validate.Required("contactTypes", "body", m.ContactTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.ContactTypes); i++ {

		// value enum
		if err := m.validateContactTypesItemsEnum("contactTypes"+"."+strconv.Itoa(i), "body", m.ContactTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NichandleContactChangeTask) validateDateRequest(formats strfmt.Registry) error {

	if err := validate.Required("dateRequest", "body", strfmt.DateTime(m.DateRequest)); err != nil {
		return err
	}

	if err := validate.FormatOf("dateRequest", "body", "date-time", m.DateRequest.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NichandleContactChangeTask) validateFromAccount(formats strfmt.Registry) error {

	if err := validate.RequiredString("fromAccount", "body", string(m.FromAccount)); err != nil {
		return err
	}

	return nil
}

func (m *NichandleContactChangeTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

var nichandleContactChangeTaskTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aborted","checkValidity","doing","done","error","expired","refused","todo","validatingByCustomers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleContactChangeTaskTypeStatePropEnum = append(nichandleContactChangeTaskTypeStatePropEnum, v)
	}
}

const (
	// NichandleContactChangeTaskStateAborted captures enum value "aborted"
	NichandleContactChangeTaskStateAborted string = "aborted"
	// NichandleContactChangeTaskStateCheckValidity captures enum value "checkValidity"
	NichandleContactChangeTaskStateCheckValidity string = "checkValidity"
	// NichandleContactChangeTaskStateDoing captures enum value "doing"
	NichandleContactChangeTaskStateDoing string = "doing"
	// NichandleContactChangeTaskStateDone captures enum value "done"
	NichandleContactChangeTaskStateDone string = "done"
	// NichandleContactChangeTaskStateError captures enum value "error"
	NichandleContactChangeTaskStateError string = "error"
	// NichandleContactChangeTaskStateExpired captures enum value "expired"
	NichandleContactChangeTaskStateExpired string = "expired"
	// NichandleContactChangeTaskStateRefused captures enum value "refused"
	NichandleContactChangeTaskStateRefused string = "refused"
	// NichandleContactChangeTaskStateTodo captures enum value "todo"
	NichandleContactChangeTaskStateTodo string = "todo"
	// NichandleContactChangeTaskStateValidatingByCustomers captures enum value "validatingByCustomers"
	NichandleContactChangeTaskStateValidatingByCustomers string = "validatingByCustomers"
)

// prop value enum
func (m *NichandleContactChangeTask) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleContactChangeTaskTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleContactChangeTask) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *NichandleContactChangeTask) validateToAccount(formats strfmt.Registry) error {

	if err := validate.RequiredString("toAccount", "body", string(m.ToAccount)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NichandleContactChangeTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NichandleContactChangeTask) UnmarshalBinary(b []byte) error {
	var res NichandleContactChangeTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
