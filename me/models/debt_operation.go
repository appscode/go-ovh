// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebtOperation Operation that happend on a debt
// swagger:model debt.Operation
type DebtOperation struct {

	// amount
	// Required: true
	Amount *OrderPrice `json:"amount"`

	// Date the operation took place on
	// Required: true
	// Read Only: true
	Date strfmt.DateTime `json:"date"`

	// Order id associated to the deposit
	// Required: true
	// Read Only: true
	DepositOrderID int64 `json:"depositOrderId"`

	// operation Id
	// Required: true
	// Read Only: true
	OperationID int64 `json:"operationId"`

	// Status of the operation
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Type of movement this operation represents
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this debt operation
func (m *DebtOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDepositOrderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtOperation) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {

		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtOperation) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DebtOperation) validateDepositOrderID(formats strfmt.Registry) error {

	if err := validate.Required("depositOrderId", "body", int64(m.DepositOrderID)); err != nil {
		return err
	}

	return nil
}

func (m *DebtOperation) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operationId", "body", int64(m.OperationID)); err != nil {
		return err
	}

	return nil
}

var debtOperationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CANCELLED","DONE","FAILED","PAID","PENDING","TODO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		debtOperationTypeStatusPropEnum = append(debtOperationTypeStatusPropEnum, v)
	}
}

const (
	// DebtOperationStatusCANCELLED captures enum value "CANCELLED"
	DebtOperationStatusCANCELLED string = "CANCELLED"
	// DebtOperationStatusDONE captures enum value "DONE"
	DebtOperationStatusDONE string = "DONE"
	// DebtOperationStatusFAILED captures enum value "FAILED"
	DebtOperationStatusFAILED string = "FAILED"
	// DebtOperationStatusPAID captures enum value "PAID"
	DebtOperationStatusPAID string = "PAID"
	// DebtOperationStatusPENDING captures enum value "PENDING"
	DebtOperationStatusPENDING string = "PENDING"
	// DebtOperationStatusTODO captures enum value "TODO"
	DebtOperationStatusTODO string = "TODO"
)

// prop value enum
func (m *DebtOperation) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, debtOperationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DebtOperation) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var debtOperationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CANCEL","CHECK_MANUAL","CREDITCARD","CREDITCARD_AUTOMATIC","CREDITCARD_MANUAL","CREDIT_ACCOUNT_AUTOMATIC","ORDER","PAYPAL_AUTOMATIC","PAYPAL_MANUAL","REFUND","REFUND_CHECK","REFUND_CREDITCARD","REFUND_CREDIT_ACCOUNT","REFUND_PAYPAL","REFUND_SEPA","REFUND_UNKNOWN","SEPA_AUTOMATIC","TRANSFER_MANUAL","UNPAID_CHECK","UNPAID_CREDITCARD","UNPAID_CREDIT_ACCOUNT","UNPAID_PAYPAL","UNPAID_SEPA","WARRANT_MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		debtOperationTypeTypePropEnum = append(debtOperationTypeTypePropEnum, v)
	}
}

const (
	// DebtOperationTypeCANCEL captures enum value "CANCEL"
	DebtOperationTypeCANCEL string = "CANCEL"
	// DebtOperationTypeCHECKMANUAL captures enum value "CHECK_MANUAL"
	DebtOperationTypeCHECKMANUAL string = "CHECK_MANUAL"
	// DebtOperationTypeCREDITCARD captures enum value "CREDITCARD"
	DebtOperationTypeCREDITCARD string = "CREDITCARD"
	// DebtOperationTypeCREDITCARDAUTOMATIC captures enum value "CREDITCARD_AUTOMATIC"
	DebtOperationTypeCREDITCARDAUTOMATIC string = "CREDITCARD_AUTOMATIC"
	// DebtOperationTypeCREDITCARDMANUAL captures enum value "CREDITCARD_MANUAL"
	DebtOperationTypeCREDITCARDMANUAL string = "CREDITCARD_MANUAL"
	// DebtOperationTypeCREDITACCOUNTAUTOMATIC captures enum value "CREDIT_ACCOUNT_AUTOMATIC"
	DebtOperationTypeCREDITACCOUNTAUTOMATIC string = "CREDIT_ACCOUNT_AUTOMATIC"
	// DebtOperationTypeORDER captures enum value "ORDER"
	DebtOperationTypeORDER string = "ORDER"
	// DebtOperationTypePAYPALAUTOMATIC captures enum value "PAYPAL_AUTOMATIC"
	DebtOperationTypePAYPALAUTOMATIC string = "PAYPAL_AUTOMATIC"
	// DebtOperationTypePAYPALMANUAL captures enum value "PAYPAL_MANUAL"
	DebtOperationTypePAYPALMANUAL string = "PAYPAL_MANUAL"
	// DebtOperationTypeREFUND captures enum value "REFUND"
	DebtOperationTypeREFUND string = "REFUND"
	// DebtOperationTypeREFUNDCHECK captures enum value "REFUND_CHECK"
	DebtOperationTypeREFUNDCHECK string = "REFUND_CHECK"
	// DebtOperationTypeREFUNDCREDITCARD captures enum value "REFUND_CREDITCARD"
	DebtOperationTypeREFUNDCREDITCARD string = "REFUND_CREDITCARD"
	// DebtOperationTypeREFUNDCREDITACCOUNT captures enum value "REFUND_CREDIT_ACCOUNT"
	DebtOperationTypeREFUNDCREDITACCOUNT string = "REFUND_CREDIT_ACCOUNT"
	// DebtOperationTypeREFUNDPAYPAL captures enum value "REFUND_PAYPAL"
	DebtOperationTypeREFUNDPAYPAL string = "REFUND_PAYPAL"
	// DebtOperationTypeREFUNDSEPA captures enum value "REFUND_SEPA"
	DebtOperationTypeREFUNDSEPA string = "REFUND_SEPA"
	// DebtOperationTypeREFUNDUNKNOWN captures enum value "REFUND_UNKNOWN"
	DebtOperationTypeREFUNDUNKNOWN string = "REFUND_UNKNOWN"
	// DebtOperationTypeSEPAAUTOMATIC captures enum value "SEPA_AUTOMATIC"
	DebtOperationTypeSEPAAUTOMATIC string = "SEPA_AUTOMATIC"
	// DebtOperationTypeTRANSFERMANUAL captures enum value "TRANSFER_MANUAL"
	DebtOperationTypeTRANSFERMANUAL string = "TRANSFER_MANUAL"
	// DebtOperationTypeUNPAIDCHECK captures enum value "UNPAID_CHECK"
	DebtOperationTypeUNPAIDCHECK string = "UNPAID_CHECK"
	// DebtOperationTypeUNPAIDCREDITCARD captures enum value "UNPAID_CREDITCARD"
	DebtOperationTypeUNPAIDCREDITCARD string = "UNPAID_CREDITCARD"
	// DebtOperationTypeUNPAIDCREDITACCOUNT captures enum value "UNPAID_CREDIT_ACCOUNT"
	DebtOperationTypeUNPAIDCREDITACCOUNT string = "UNPAID_CREDIT_ACCOUNT"
	// DebtOperationTypeUNPAIDPAYPAL captures enum value "UNPAID_PAYPAL"
	DebtOperationTypeUNPAIDPAYPAL string = "UNPAID_PAYPAL"
	// DebtOperationTypeUNPAIDSEPA captures enum value "UNPAID_SEPA"
	DebtOperationTypeUNPAIDSEPA string = "UNPAID_SEPA"
	// DebtOperationTypeWARRANTMANUAL captures enum value "WARRANT_MANUAL"
	DebtOperationTypeWARRANTMANUAL string = "WARRANT_MANUAL"
)

// prop value enum
func (m *DebtOperation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, debtOperationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DebtOperation) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebtOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebtOperation) UnmarshalBinary(b []byte) error {
	var res DebtOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
