// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody post me installation template template name partition scheme scheme name hardware raid params body
// swagger:model postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody
type PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody struct {

	// disks
	// Required: true
	Disks []string `json:"disks"`

	// mode
	// Required: true
	Mode *string `json:"mode"`

	// name
	// Required: true
	Name *string `json:"name"`

	// step
	// Required: true
	Step *int64 `json:"step"`
}

// Validate validates this post me installation template template name partition scheme scheme name hardware raid params body
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) validateDisks(formats strfmt.Registry) error {

	if err := validate.Required("disks", "body", m.Disks); err != nil {
		return err
	}

	return nil
}

var postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raid0","raid1","raid10","raid5","raid50","raid6","raid60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyTypeModePropEnum = append(postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyTypeModePropEnum, v)
	}
}

const (
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid0 captures enum value "raid0"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid0 string = "raid0"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid1 captures enum value "raid1"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid1 string = "raid1"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid10 captures enum value "raid10"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid10 string = "raid10"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid5 captures enum value "raid5"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid5 string = "raid5"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid50 captures enum value "raid50"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid50 string = "raid50"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid6 captures enum value "raid6"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid6 string = "raid6"
	// PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid60 captures enum value "raid60"
	PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyModeRaid60 string = "raid60"
)

// prop value enum
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBodyTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) validateStep(formats strfmt.Registry) error {

	if err := validate.Required("step", "body", m.Step); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody) UnmarshalBinary(b []byte) error {
	var res PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
