// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NichandleIPV4Org Details about an IP block organisation
// swagger:model nichandle.Ipv4Org
type NichandleIPV4Org struct {

	// abuse mailbox
	AbuseMailbox string `json:"abuse_mailbox,omitempty"`

	// address
	Address string `json:"address,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// lastname
	Lastname string `json:"lastname,omitempty"`

	// organisation Id
	// Required: true
	// Read Only: true
	OrganisationID string `json:"organisationId"`

	// phone
	Phone string `json:"phone,omitempty"`

	// registry
	// Required: true
	// Read Only: true
	Registry string `json:"registry"`

	// state
	State string `json:"state,omitempty"`

	// zip
	Zip string `json:"zip,omitempty"`
}

// Validate validates this nichandle ipv4 org
func (m *NichandleIPV4Org) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nichandleIpv4OrgTypeCountryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DG","DJ","DK","DM","DO","DZ","EA","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HN","HR","HT","HU","IC","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","UNKNOWN","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleIpv4OrgTypeCountryPropEnum = append(nichandleIpv4OrgTypeCountryPropEnum, v)
	}
}

const (
	// NichandleIPV4OrgCountryAC captures enum value "AC"
	NichandleIPV4OrgCountryAC string = "AC"
	// NichandleIPV4OrgCountryAD captures enum value "AD"
	NichandleIPV4OrgCountryAD string = "AD"
	// NichandleIPV4OrgCountryAE captures enum value "AE"
	NichandleIPV4OrgCountryAE string = "AE"
	// NichandleIPV4OrgCountryAF captures enum value "AF"
	NichandleIPV4OrgCountryAF string = "AF"
	// NichandleIPV4OrgCountryAG captures enum value "AG"
	NichandleIPV4OrgCountryAG string = "AG"
	// NichandleIPV4OrgCountryAI captures enum value "AI"
	NichandleIPV4OrgCountryAI string = "AI"
	// NichandleIPV4OrgCountryAL captures enum value "AL"
	NichandleIPV4OrgCountryAL string = "AL"
	// NichandleIPV4OrgCountryAM captures enum value "AM"
	NichandleIPV4OrgCountryAM string = "AM"
	// NichandleIPV4OrgCountryAO captures enum value "AO"
	NichandleIPV4OrgCountryAO string = "AO"
	// NichandleIPV4OrgCountryAQ captures enum value "AQ"
	NichandleIPV4OrgCountryAQ string = "AQ"
	// NichandleIPV4OrgCountryAR captures enum value "AR"
	NichandleIPV4OrgCountryAR string = "AR"
	// NichandleIPV4OrgCountryAS captures enum value "AS"
	NichandleIPV4OrgCountryAS string = "AS"
	// NichandleIPV4OrgCountryAT captures enum value "AT"
	NichandleIPV4OrgCountryAT string = "AT"
	// NichandleIPV4OrgCountryAU captures enum value "AU"
	NichandleIPV4OrgCountryAU string = "AU"
	// NichandleIPV4OrgCountryAW captures enum value "AW"
	NichandleIPV4OrgCountryAW string = "AW"
	// NichandleIPV4OrgCountryAX captures enum value "AX"
	NichandleIPV4OrgCountryAX string = "AX"
	// NichandleIPV4OrgCountryAZ captures enum value "AZ"
	NichandleIPV4OrgCountryAZ string = "AZ"
	// NichandleIPV4OrgCountryBA captures enum value "BA"
	NichandleIPV4OrgCountryBA string = "BA"
	// NichandleIPV4OrgCountryBB captures enum value "BB"
	NichandleIPV4OrgCountryBB string = "BB"
	// NichandleIPV4OrgCountryBD captures enum value "BD"
	NichandleIPV4OrgCountryBD string = "BD"
	// NichandleIPV4OrgCountryBE captures enum value "BE"
	NichandleIPV4OrgCountryBE string = "BE"
	// NichandleIPV4OrgCountryBF captures enum value "BF"
	NichandleIPV4OrgCountryBF string = "BF"
	// NichandleIPV4OrgCountryBG captures enum value "BG"
	NichandleIPV4OrgCountryBG string = "BG"
	// NichandleIPV4OrgCountryBH captures enum value "BH"
	NichandleIPV4OrgCountryBH string = "BH"
	// NichandleIPV4OrgCountryBI captures enum value "BI"
	NichandleIPV4OrgCountryBI string = "BI"
	// NichandleIPV4OrgCountryBJ captures enum value "BJ"
	NichandleIPV4OrgCountryBJ string = "BJ"
	// NichandleIPV4OrgCountryBL captures enum value "BL"
	NichandleIPV4OrgCountryBL string = "BL"
	// NichandleIPV4OrgCountryBM captures enum value "BM"
	NichandleIPV4OrgCountryBM string = "BM"
	// NichandleIPV4OrgCountryBN captures enum value "BN"
	NichandleIPV4OrgCountryBN string = "BN"
	// NichandleIPV4OrgCountryBO captures enum value "BO"
	NichandleIPV4OrgCountryBO string = "BO"
	// NichandleIPV4OrgCountryBQ captures enum value "BQ"
	NichandleIPV4OrgCountryBQ string = "BQ"
	// NichandleIPV4OrgCountryBR captures enum value "BR"
	NichandleIPV4OrgCountryBR string = "BR"
	// NichandleIPV4OrgCountryBS captures enum value "BS"
	NichandleIPV4OrgCountryBS string = "BS"
	// NichandleIPV4OrgCountryBT captures enum value "BT"
	NichandleIPV4OrgCountryBT string = "BT"
	// NichandleIPV4OrgCountryBW captures enum value "BW"
	NichandleIPV4OrgCountryBW string = "BW"
	// NichandleIPV4OrgCountryBY captures enum value "BY"
	NichandleIPV4OrgCountryBY string = "BY"
	// NichandleIPV4OrgCountryBZ captures enum value "BZ"
	NichandleIPV4OrgCountryBZ string = "BZ"
	// NichandleIPV4OrgCountryCA captures enum value "CA"
	NichandleIPV4OrgCountryCA string = "CA"
	// NichandleIPV4OrgCountryCC captures enum value "CC"
	NichandleIPV4OrgCountryCC string = "CC"
	// NichandleIPV4OrgCountryCD captures enum value "CD"
	NichandleIPV4OrgCountryCD string = "CD"
	// NichandleIPV4OrgCountryCF captures enum value "CF"
	NichandleIPV4OrgCountryCF string = "CF"
	// NichandleIPV4OrgCountryCG captures enum value "CG"
	NichandleIPV4OrgCountryCG string = "CG"
	// NichandleIPV4OrgCountryCH captures enum value "CH"
	NichandleIPV4OrgCountryCH string = "CH"
	// NichandleIPV4OrgCountryCI captures enum value "CI"
	NichandleIPV4OrgCountryCI string = "CI"
	// NichandleIPV4OrgCountryCK captures enum value "CK"
	NichandleIPV4OrgCountryCK string = "CK"
	// NichandleIPV4OrgCountryCL captures enum value "CL"
	NichandleIPV4OrgCountryCL string = "CL"
	// NichandleIPV4OrgCountryCM captures enum value "CM"
	NichandleIPV4OrgCountryCM string = "CM"
	// NichandleIPV4OrgCountryCN captures enum value "CN"
	NichandleIPV4OrgCountryCN string = "CN"
	// NichandleIPV4OrgCountryCO captures enum value "CO"
	NichandleIPV4OrgCountryCO string = "CO"
	// NichandleIPV4OrgCountryCR captures enum value "CR"
	NichandleIPV4OrgCountryCR string = "CR"
	// NichandleIPV4OrgCountryCU captures enum value "CU"
	NichandleIPV4OrgCountryCU string = "CU"
	// NichandleIPV4OrgCountryCV captures enum value "CV"
	NichandleIPV4OrgCountryCV string = "CV"
	// NichandleIPV4OrgCountryCW captures enum value "CW"
	NichandleIPV4OrgCountryCW string = "CW"
	// NichandleIPV4OrgCountryCX captures enum value "CX"
	NichandleIPV4OrgCountryCX string = "CX"
	// NichandleIPV4OrgCountryCY captures enum value "CY"
	NichandleIPV4OrgCountryCY string = "CY"
	// NichandleIPV4OrgCountryCZ captures enum value "CZ"
	NichandleIPV4OrgCountryCZ string = "CZ"
	// NichandleIPV4OrgCountryDE captures enum value "DE"
	NichandleIPV4OrgCountryDE string = "DE"
	// NichandleIPV4OrgCountryDG captures enum value "DG"
	NichandleIPV4OrgCountryDG string = "DG"
	// NichandleIPV4OrgCountryDJ captures enum value "DJ"
	NichandleIPV4OrgCountryDJ string = "DJ"
	// NichandleIPV4OrgCountryDK captures enum value "DK"
	NichandleIPV4OrgCountryDK string = "DK"
	// NichandleIPV4OrgCountryDM captures enum value "DM"
	NichandleIPV4OrgCountryDM string = "DM"
	// NichandleIPV4OrgCountryDO captures enum value "DO"
	NichandleIPV4OrgCountryDO string = "DO"
	// NichandleIPV4OrgCountryDZ captures enum value "DZ"
	NichandleIPV4OrgCountryDZ string = "DZ"
	// NichandleIPV4OrgCountryEA captures enum value "EA"
	NichandleIPV4OrgCountryEA string = "EA"
	// NichandleIPV4OrgCountryEC captures enum value "EC"
	NichandleIPV4OrgCountryEC string = "EC"
	// NichandleIPV4OrgCountryEE captures enum value "EE"
	NichandleIPV4OrgCountryEE string = "EE"
	// NichandleIPV4OrgCountryEG captures enum value "EG"
	NichandleIPV4OrgCountryEG string = "EG"
	// NichandleIPV4OrgCountryEH captures enum value "EH"
	NichandleIPV4OrgCountryEH string = "EH"
	// NichandleIPV4OrgCountryER captures enum value "ER"
	NichandleIPV4OrgCountryER string = "ER"
	// NichandleIPV4OrgCountryES captures enum value "ES"
	NichandleIPV4OrgCountryES string = "ES"
	// NichandleIPV4OrgCountryET captures enum value "ET"
	NichandleIPV4OrgCountryET string = "ET"
	// NichandleIPV4OrgCountryFI captures enum value "FI"
	NichandleIPV4OrgCountryFI string = "FI"
	// NichandleIPV4OrgCountryFJ captures enum value "FJ"
	NichandleIPV4OrgCountryFJ string = "FJ"
	// NichandleIPV4OrgCountryFK captures enum value "FK"
	NichandleIPV4OrgCountryFK string = "FK"
	// NichandleIPV4OrgCountryFM captures enum value "FM"
	NichandleIPV4OrgCountryFM string = "FM"
	// NichandleIPV4OrgCountryFO captures enum value "FO"
	NichandleIPV4OrgCountryFO string = "FO"
	// NichandleIPV4OrgCountryFR captures enum value "FR"
	NichandleIPV4OrgCountryFR string = "FR"
	// NichandleIPV4OrgCountryGA captures enum value "GA"
	NichandleIPV4OrgCountryGA string = "GA"
	// NichandleIPV4OrgCountryGB captures enum value "GB"
	NichandleIPV4OrgCountryGB string = "GB"
	// NichandleIPV4OrgCountryGD captures enum value "GD"
	NichandleIPV4OrgCountryGD string = "GD"
	// NichandleIPV4OrgCountryGE captures enum value "GE"
	NichandleIPV4OrgCountryGE string = "GE"
	// NichandleIPV4OrgCountryGF captures enum value "GF"
	NichandleIPV4OrgCountryGF string = "GF"
	// NichandleIPV4OrgCountryGG captures enum value "GG"
	NichandleIPV4OrgCountryGG string = "GG"
	// NichandleIPV4OrgCountryGH captures enum value "GH"
	NichandleIPV4OrgCountryGH string = "GH"
	// NichandleIPV4OrgCountryGI captures enum value "GI"
	NichandleIPV4OrgCountryGI string = "GI"
	// NichandleIPV4OrgCountryGL captures enum value "GL"
	NichandleIPV4OrgCountryGL string = "GL"
	// NichandleIPV4OrgCountryGM captures enum value "GM"
	NichandleIPV4OrgCountryGM string = "GM"
	// NichandleIPV4OrgCountryGN captures enum value "GN"
	NichandleIPV4OrgCountryGN string = "GN"
	// NichandleIPV4OrgCountryGP captures enum value "GP"
	NichandleIPV4OrgCountryGP string = "GP"
	// NichandleIPV4OrgCountryGQ captures enum value "GQ"
	NichandleIPV4OrgCountryGQ string = "GQ"
	// NichandleIPV4OrgCountryGR captures enum value "GR"
	NichandleIPV4OrgCountryGR string = "GR"
	// NichandleIPV4OrgCountryGS captures enum value "GS"
	NichandleIPV4OrgCountryGS string = "GS"
	// NichandleIPV4OrgCountryGT captures enum value "GT"
	NichandleIPV4OrgCountryGT string = "GT"
	// NichandleIPV4OrgCountryGU captures enum value "GU"
	NichandleIPV4OrgCountryGU string = "GU"
	// NichandleIPV4OrgCountryGW captures enum value "GW"
	NichandleIPV4OrgCountryGW string = "GW"
	// NichandleIPV4OrgCountryGY captures enum value "GY"
	NichandleIPV4OrgCountryGY string = "GY"
	// NichandleIPV4OrgCountryHK captures enum value "HK"
	NichandleIPV4OrgCountryHK string = "HK"
	// NichandleIPV4OrgCountryHN captures enum value "HN"
	NichandleIPV4OrgCountryHN string = "HN"
	// NichandleIPV4OrgCountryHR captures enum value "HR"
	NichandleIPV4OrgCountryHR string = "HR"
	// NichandleIPV4OrgCountryHT captures enum value "HT"
	NichandleIPV4OrgCountryHT string = "HT"
	// NichandleIPV4OrgCountryHU captures enum value "HU"
	NichandleIPV4OrgCountryHU string = "HU"
	// NichandleIPV4OrgCountryIC captures enum value "IC"
	NichandleIPV4OrgCountryIC string = "IC"
	// NichandleIPV4OrgCountryID captures enum value "ID"
	NichandleIPV4OrgCountryID string = "ID"
	// NichandleIPV4OrgCountryIE captures enum value "IE"
	NichandleIPV4OrgCountryIE string = "IE"
	// NichandleIPV4OrgCountryIL captures enum value "IL"
	NichandleIPV4OrgCountryIL string = "IL"
	// NichandleIPV4OrgCountryIM captures enum value "IM"
	NichandleIPV4OrgCountryIM string = "IM"
	// NichandleIPV4OrgCountryIN captures enum value "IN"
	NichandleIPV4OrgCountryIN string = "IN"
	// NichandleIPV4OrgCountryIO captures enum value "IO"
	NichandleIPV4OrgCountryIO string = "IO"
	// NichandleIPV4OrgCountryIQ captures enum value "IQ"
	NichandleIPV4OrgCountryIQ string = "IQ"
	// NichandleIPV4OrgCountryIR captures enum value "IR"
	NichandleIPV4OrgCountryIR string = "IR"
	// NichandleIPV4OrgCountryIS captures enum value "IS"
	NichandleIPV4OrgCountryIS string = "IS"
	// NichandleIPV4OrgCountryIT captures enum value "IT"
	NichandleIPV4OrgCountryIT string = "IT"
	// NichandleIPV4OrgCountryJE captures enum value "JE"
	NichandleIPV4OrgCountryJE string = "JE"
	// NichandleIPV4OrgCountryJM captures enum value "JM"
	NichandleIPV4OrgCountryJM string = "JM"
	// NichandleIPV4OrgCountryJO captures enum value "JO"
	NichandleIPV4OrgCountryJO string = "JO"
	// NichandleIPV4OrgCountryJP captures enum value "JP"
	NichandleIPV4OrgCountryJP string = "JP"
	// NichandleIPV4OrgCountryKE captures enum value "KE"
	NichandleIPV4OrgCountryKE string = "KE"
	// NichandleIPV4OrgCountryKG captures enum value "KG"
	NichandleIPV4OrgCountryKG string = "KG"
	// NichandleIPV4OrgCountryKH captures enum value "KH"
	NichandleIPV4OrgCountryKH string = "KH"
	// NichandleIPV4OrgCountryKI captures enum value "KI"
	NichandleIPV4OrgCountryKI string = "KI"
	// NichandleIPV4OrgCountryKM captures enum value "KM"
	NichandleIPV4OrgCountryKM string = "KM"
	// NichandleIPV4OrgCountryKN captures enum value "KN"
	NichandleIPV4OrgCountryKN string = "KN"
	// NichandleIPV4OrgCountryKP captures enum value "KP"
	NichandleIPV4OrgCountryKP string = "KP"
	// NichandleIPV4OrgCountryKR captures enum value "KR"
	NichandleIPV4OrgCountryKR string = "KR"
	// NichandleIPV4OrgCountryKW captures enum value "KW"
	NichandleIPV4OrgCountryKW string = "KW"
	// NichandleIPV4OrgCountryKY captures enum value "KY"
	NichandleIPV4OrgCountryKY string = "KY"
	// NichandleIPV4OrgCountryKZ captures enum value "KZ"
	NichandleIPV4OrgCountryKZ string = "KZ"
	// NichandleIPV4OrgCountryLA captures enum value "LA"
	NichandleIPV4OrgCountryLA string = "LA"
	// NichandleIPV4OrgCountryLB captures enum value "LB"
	NichandleIPV4OrgCountryLB string = "LB"
	// NichandleIPV4OrgCountryLC captures enum value "LC"
	NichandleIPV4OrgCountryLC string = "LC"
	// NichandleIPV4OrgCountryLI captures enum value "LI"
	NichandleIPV4OrgCountryLI string = "LI"
	// NichandleIPV4OrgCountryLK captures enum value "LK"
	NichandleIPV4OrgCountryLK string = "LK"
	// NichandleIPV4OrgCountryLR captures enum value "LR"
	NichandleIPV4OrgCountryLR string = "LR"
	// NichandleIPV4OrgCountryLS captures enum value "LS"
	NichandleIPV4OrgCountryLS string = "LS"
	// NichandleIPV4OrgCountryLT captures enum value "LT"
	NichandleIPV4OrgCountryLT string = "LT"
	// NichandleIPV4OrgCountryLU captures enum value "LU"
	NichandleIPV4OrgCountryLU string = "LU"
	// NichandleIPV4OrgCountryLV captures enum value "LV"
	NichandleIPV4OrgCountryLV string = "LV"
	// NichandleIPV4OrgCountryLY captures enum value "LY"
	NichandleIPV4OrgCountryLY string = "LY"
	// NichandleIPV4OrgCountryMA captures enum value "MA"
	NichandleIPV4OrgCountryMA string = "MA"
	// NichandleIPV4OrgCountryMC captures enum value "MC"
	NichandleIPV4OrgCountryMC string = "MC"
	// NichandleIPV4OrgCountryMD captures enum value "MD"
	NichandleIPV4OrgCountryMD string = "MD"
	// NichandleIPV4OrgCountryME captures enum value "ME"
	NichandleIPV4OrgCountryME string = "ME"
	// NichandleIPV4OrgCountryMF captures enum value "MF"
	NichandleIPV4OrgCountryMF string = "MF"
	// NichandleIPV4OrgCountryMG captures enum value "MG"
	NichandleIPV4OrgCountryMG string = "MG"
	// NichandleIPV4OrgCountryMH captures enum value "MH"
	NichandleIPV4OrgCountryMH string = "MH"
	// NichandleIPV4OrgCountryMK captures enum value "MK"
	NichandleIPV4OrgCountryMK string = "MK"
	// NichandleIPV4OrgCountryML captures enum value "ML"
	NichandleIPV4OrgCountryML string = "ML"
	// NichandleIPV4OrgCountryMM captures enum value "MM"
	NichandleIPV4OrgCountryMM string = "MM"
	// NichandleIPV4OrgCountryMN captures enum value "MN"
	NichandleIPV4OrgCountryMN string = "MN"
	// NichandleIPV4OrgCountryMO captures enum value "MO"
	NichandleIPV4OrgCountryMO string = "MO"
	// NichandleIPV4OrgCountryMP captures enum value "MP"
	NichandleIPV4OrgCountryMP string = "MP"
	// NichandleIPV4OrgCountryMQ captures enum value "MQ"
	NichandleIPV4OrgCountryMQ string = "MQ"
	// NichandleIPV4OrgCountryMR captures enum value "MR"
	NichandleIPV4OrgCountryMR string = "MR"
	// NichandleIPV4OrgCountryMS captures enum value "MS"
	NichandleIPV4OrgCountryMS string = "MS"
	// NichandleIPV4OrgCountryMT captures enum value "MT"
	NichandleIPV4OrgCountryMT string = "MT"
	// NichandleIPV4OrgCountryMU captures enum value "MU"
	NichandleIPV4OrgCountryMU string = "MU"
	// NichandleIPV4OrgCountryMV captures enum value "MV"
	NichandleIPV4OrgCountryMV string = "MV"
	// NichandleIPV4OrgCountryMW captures enum value "MW"
	NichandleIPV4OrgCountryMW string = "MW"
	// NichandleIPV4OrgCountryMX captures enum value "MX"
	NichandleIPV4OrgCountryMX string = "MX"
	// NichandleIPV4OrgCountryMY captures enum value "MY"
	NichandleIPV4OrgCountryMY string = "MY"
	// NichandleIPV4OrgCountryMZ captures enum value "MZ"
	NichandleIPV4OrgCountryMZ string = "MZ"
	// NichandleIPV4OrgCountryNA captures enum value "NA"
	NichandleIPV4OrgCountryNA string = "NA"
	// NichandleIPV4OrgCountryNC captures enum value "NC"
	NichandleIPV4OrgCountryNC string = "NC"
	// NichandleIPV4OrgCountryNE captures enum value "NE"
	NichandleIPV4OrgCountryNE string = "NE"
	// NichandleIPV4OrgCountryNF captures enum value "NF"
	NichandleIPV4OrgCountryNF string = "NF"
	// NichandleIPV4OrgCountryNG captures enum value "NG"
	NichandleIPV4OrgCountryNG string = "NG"
	// NichandleIPV4OrgCountryNI captures enum value "NI"
	NichandleIPV4OrgCountryNI string = "NI"
	// NichandleIPV4OrgCountryNL captures enum value "NL"
	NichandleIPV4OrgCountryNL string = "NL"
	// NichandleIPV4OrgCountryNO captures enum value "NO"
	NichandleIPV4OrgCountryNO string = "NO"
	// NichandleIPV4OrgCountryNP captures enum value "NP"
	NichandleIPV4OrgCountryNP string = "NP"
	// NichandleIPV4OrgCountryNR captures enum value "NR"
	NichandleIPV4OrgCountryNR string = "NR"
	// NichandleIPV4OrgCountryNU captures enum value "NU"
	NichandleIPV4OrgCountryNU string = "NU"
	// NichandleIPV4OrgCountryNZ captures enum value "NZ"
	NichandleIPV4OrgCountryNZ string = "NZ"
	// NichandleIPV4OrgCountryOM captures enum value "OM"
	NichandleIPV4OrgCountryOM string = "OM"
	// NichandleIPV4OrgCountryPA captures enum value "PA"
	NichandleIPV4OrgCountryPA string = "PA"
	// NichandleIPV4OrgCountryPE captures enum value "PE"
	NichandleIPV4OrgCountryPE string = "PE"
	// NichandleIPV4OrgCountryPF captures enum value "PF"
	NichandleIPV4OrgCountryPF string = "PF"
	// NichandleIPV4OrgCountryPG captures enum value "PG"
	NichandleIPV4OrgCountryPG string = "PG"
	// NichandleIPV4OrgCountryPH captures enum value "PH"
	NichandleIPV4OrgCountryPH string = "PH"
	// NichandleIPV4OrgCountryPK captures enum value "PK"
	NichandleIPV4OrgCountryPK string = "PK"
	// NichandleIPV4OrgCountryPL captures enum value "PL"
	NichandleIPV4OrgCountryPL string = "PL"
	// NichandleIPV4OrgCountryPM captures enum value "PM"
	NichandleIPV4OrgCountryPM string = "PM"
	// NichandleIPV4OrgCountryPN captures enum value "PN"
	NichandleIPV4OrgCountryPN string = "PN"
	// NichandleIPV4OrgCountryPR captures enum value "PR"
	NichandleIPV4OrgCountryPR string = "PR"
	// NichandleIPV4OrgCountryPS captures enum value "PS"
	NichandleIPV4OrgCountryPS string = "PS"
	// NichandleIPV4OrgCountryPT captures enum value "PT"
	NichandleIPV4OrgCountryPT string = "PT"
	// NichandleIPV4OrgCountryPW captures enum value "PW"
	NichandleIPV4OrgCountryPW string = "PW"
	// NichandleIPV4OrgCountryPY captures enum value "PY"
	NichandleIPV4OrgCountryPY string = "PY"
	// NichandleIPV4OrgCountryQA captures enum value "QA"
	NichandleIPV4OrgCountryQA string = "QA"
	// NichandleIPV4OrgCountryRE captures enum value "RE"
	NichandleIPV4OrgCountryRE string = "RE"
	// NichandleIPV4OrgCountryRO captures enum value "RO"
	NichandleIPV4OrgCountryRO string = "RO"
	// NichandleIPV4OrgCountryRS captures enum value "RS"
	NichandleIPV4OrgCountryRS string = "RS"
	// NichandleIPV4OrgCountryRU captures enum value "RU"
	NichandleIPV4OrgCountryRU string = "RU"
	// NichandleIPV4OrgCountryRW captures enum value "RW"
	NichandleIPV4OrgCountryRW string = "RW"
	// NichandleIPV4OrgCountrySA captures enum value "SA"
	NichandleIPV4OrgCountrySA string = "SA"
	// NichandleIPV4OrgCountrySB captures enum value "SB"
	NichandleIPV4OrgCountrySB string = "SB"
	// NichandleIPV4OrgCountrySC captures enum value "SC"
	NichandleIPV4OrgCountrySC string = "SC"
	// NichandleIPV4OrgCountrySD captures enum value "SD"
	NichandleIPV4OrgCountrySD string = "SD"
	// NichandleIPV4OrgCountrySE captures enum value "SE"
	NichandleIPV4OrgCountrySE string = "SE"
	// NichandleIPV4OrgCountrySG captures enum value "SG"
	NichandleIPV4OrgCountrySG string = "SG"
	// NichandleIPV4OrgCountrySH captures enum value "SH"
	NichandleIPV4OrgCountrySH string = "SH"
	// NichandleIPV4OrgCountrySI captures enum value "SI"
	NichandleIPV4OrgCountrySI string = "SI"
	// NichandleIPV4OrgCountrySJ captures enum value "SJ"
	NichandleIPV4OrgCountrySJ string = "SJ"
	// NichandleIPV4OrgCountrySK captures enum value "SK"
	NichandleIPV4OrgCountrySK string = "SK"
	// NichandleIPV4OrgCountrySL captures enum value "SL"
	NichandleIPV4OrgCountrySL string = "SL"
	// NichandleIPV4OrgCountrySM captures enum value "SM"
	NichandleIPV4OrgCountrySM string = "SM"
	// NichandleIPV4OrgCountrySN captures enum value "SN"
	NichandleIPV4OrgCountrySN string = "SN"
	// NichandleIPV4OrgCountrySO captures enum value "SO"
	NichandleIPV4OrgCountrySO string = "SO"
	// NichandleIPV4OrgCountrySR captures enum value "SR"
	NichandleIPV4OrgCountrySR string = "SR"
	// NichandleIPV4OrgCountrySS captures enum value "SS"
	NichandleIPV4OrgCountrySS string = "SS"
	// NichandleIPV4OrgCountryST captures enum value "ST"
	NichandleIPV4OrgCountryST string = "ST"
	// NichandleIPV4OrgCountrySV captures enum value "SV"
	NichandleIPV4OrgCountrySV string = "SV"
	// NichandleIPV4OrgCountrySX captures enum value "SX"
	NichandleIPV4OrgCountrySX string = "SX"
	// NichandleIPV4OrgCountrySY captures enum value "SY"
	NichandleIPV4OrgCountrySY string = "SY"
	// NichandleIPV4OrgCountrySZ captures enum value "SZ"
	NichandleIPV4OrgCountrySZ string = "SZ"
	// NichandleIPV4OrgCountryTA captures enum value "TA"
	NichandleIPV4OrgCountryTA string = "TA"
	// NichandleIPV4OrgCountryTC captures enum value "TC"
	NichandleIPV4OrgCountryTC string = "TC"
	// NichandleIPV4OrgCountryTD captures enum value "TD"
	NichandleIPV4OrgCountryTD string = "TD"
	// NichandleIPV4OrgCountryTF captures enum value "TF"
	NichandleIPV4OrgCountryTF string = "TF"
	// NichandleIPV4OrgCountryTG captures enum value "TG"
	NichandleIPV4OrgCountryTG string = "TG"
	// NichandleIPV4OrgCountryTH captures enum value "TH"
	NichandleIPV4OrgCountryTH string = "TH"
	// NichandleIPV4OrgCountryTJ captures enum value "TJ"
	NichandleIPV4OrgCountryTJ string = "TJ"
	// NichandleIPV4OrgCountryTK captures enum value "TK"
	NichandleIPV4OrgCountryTK string = "TK"
	// NichandleIPV4OrgCountryTL captures enum value "TL"
	NichandleIPV4OrgCountryTL string = "TL"
	// NichandleIPV4OrgCountryTM captures enum value "TM"
	NichandleIPV4OrgCountryTM string = "TM"
	// NichandleIPV4OrgCountryTN captures enum value "TN"
	NichandleIPV4OrgCountryTN string = "TN"
	// NichandleIPV4OrgCountryTO captures enum value "TO"
	NichandleIPV4OrgCountryTO string = "TO"
	// NichandleIPV4OrgCountryTR captures enum value "TR"
	NichandleIPV4OrgCountryTR string = "TR"
	// NichandleIPV4OrgCountryTT captures enum value "TT"
	NichandleIPV4OrgCountryTT string = "TT"
	// NichandleIPV4OrgCountryTV captures enum value "TV"
	NichandleIPV4OrgCountryTV string = "TV"
	// NichandleIPV4OrgCountryTW captures enum value "TW"
	NichandleIPV4OrgCountryTW string = "TW"
	// NichandleIPV4OrgCountryTZ captures enum value "TZ"
	NichandleIPV4OrgCountryTZ string = "TZ"
	// NichandleIPV4OrgCountryUA captures enum value "UA"
	NichandleIPV4OrgCountryUA string = "UA"
	// NichandleIPV4OrgCountryUG captures enum value "UG"
	NichandleIPV4OrgCountryUG string = "UG"
	// NichandleIPV4OrgCountryUM captures enum value "UM"
	NichandleIPV4OrgCountryUM string = "UM"
	// NichandleIPV4OrgCountryUNKNOWN captures enum value "UNKNOWN"
	NichandleIPV4OrgCountryUNKNOWN string = "UNKNOWN"
	// NichandleIPV4OrgCountryUS captures enum value "US"
	NichandleIPV4OrgCountryUS string = "US"
	// NichandleIPV4OrgCountryUY captures enum value "UY"
	NichandleIPV4OrgCountryUY string = "UY"
	// NichandleIPV4OrgCountryUZ captures enum value "UZ"
	NichandleIPV4OrgCountryUZ string = "UZ"
	// NichandleIPV4OrgCountryVA captures enum value "VA"
	NichandleIPV4OrgCountryVA string = "VA"
	// NichandleIPV4OrgCountryVC captures enum value "VC"
	NichandleIPV4OrgCountryVC string = "VC"
	// NichandleIPV4OrgCountryVE captures enum value "VE"
	NichandleIPV4OrgCountryVE string = "VE"
	// NichandleIPV4OrgCountryVG captures enum value "VG"
	NichandleIPV4OrgCountryVG string = "VG"
	// NichandleIPV4OrgCountryVI captures enum value "VI"
	NichandleIPV4OrgCountryVI string = "VI"
	// NichandleIPV4OrgCountryVN captures enum value "VN"
	NichandleIPV4OrgCountryVN string = "VN"
	// NichandleIPV4OrgCountryVU captures enum value "VU"
	NichandleIPV4OrgCountryVU string = "VU"
	// NichandleIPV4OrgCountryWF captures enum value "WF"
	NichandleIPV4OrgCountryWF string = "WF"
	// NichandleIPV4OrgCountryWS captures enum value "WS"
	NichandleIPV4OrgCountryWS string = "WS"
	// NichandleIPV4OrgCountryXK captures enum value "XK"
	NichandleIPV4OrgCountryXK string = "XK"
	// NichandleIPV4OrgCountryYE captures enum value "YE"
	NichandleIPV4OrgCountryYE string = "YE"
	// NichandleIPV4OrgCountryYT captures enum value "YT"
	NichandleIPV4OrgCountryYT string = "YT"
	// NichandleIPV4OrgCountryZA captures enum value "ZA"
	NichandleIPV4OrgCountryZA string = "ZA"
	// NichandleIPV4OrgCountryZM captures enum value "ZM"
	NichandleIPV4OrgCountryZM string = "ZM"
	// NichandleIPV4OrgCountryZW captures enum value "ZW"
	NichandleIPV4OrgCountryZW string = "ZW"
)

// prop value enum
func (m *NichandleIPV4Org) validateCountryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleIpv4OrgTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleIPV4Org) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *NichandleIPV4Org) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.RequiredString("organisationId", "body", string(m.OrganisationID)); err != nil {
		return err
	}

	return nil
}

var nichandleIpv4OrgTypeRegistryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ARIN","RIPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleIpv4OrgTypeRegistryPropEnum = append(nichandleIpv4OrgTypeRegistryPropEnum, v)
	}
}

const (
	// NichandleIPV4OrgRegistryARIN captures enum value "ARIN"
	NichandleIPV4OrgRegistryARIN string = "ARIN"
	// NichandleIPV4OrgRegistryRIPE captures enum value "RIPE"
	NichandleIPV4OrgRegistryRIPE string = "RIPE"
)

// prop value enum
func (m *NichandleIPV4Org) validateRegistryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleIpv4OrgTypeRegistryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleIPV4Org) validateRegistry(formats strfmt.Registry) error {

	if err := validate.RequiredString("registry", "body", string(m.Registry)); err != nil {
		return err
	}

	// value enum
	if err := m.validateRegistryEnum("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NichandleIPV4Org) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NichandleIPV4Org) UnmarshalBinary(b []byte) error {
	var res NichandleIPV4Org
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
