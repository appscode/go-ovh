// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NichandleEmailChangeTask Task running an email change on an account
// swagger:model nichandle.EmailChange.Task
type NichandleEmailChangeTask struct {

	// End date of that request
	// Read Only: true
	DateDone strfmt.DateTime `json:"dateDone,omitempty"`

	// Creation date of that request
	// Required: true
	// Read Only: true
	DateRequest strfmt.DateTime `json:"dateRequest"`

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// The email address to change for
	// Required: true
	// Read Only: true
	NewEmail string `json:"newEmail"`

	// Current state of the request
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this nichandle email change task
func (m *NichandleEmailChangeTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRequest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNewEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NichandleEmailChangeTask) validateDateRequest(formats strfmt.Registry) error {

	if err := validate.Required("dateRequest", "body", strfmt.DateTime(m.DateRequest)); err != nil {
		return err
	}

	if err := validate.FormatOf("dateRequest", "body", "date-time", m.DateRequest.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NichandleEmailChangeTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *NichandleEmailChangeTask) validateNewEmail(formats strfmt.Registry) error {

	if err := validate.RequiredString("newEmail", "body", string(m.NewEmail)); err != nil {
		return err
	}

	return nil
}

var nichandleEmailChangeTaskTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aborted","done","refused","todo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleEmailChangeTaskTypeStatePropEnum = append(nichandleEmailChangeTaskTypeStatePropEnum, v)
	}
}

const (
	// NichandleEmailChangeTaskStateAborted captures enum value "aborted"
	NichandleEmailChangeTaskStateAborted string = "aborted"
	// NichandleEmailChangeTaskStateDone captures enum value "done"
	NichandleEmailChangeTaskStateDone string = "done"
	// NichandleEmailChangeTaskStateRefused captures enum value "refused"
	NichandleEmailChangeTaskStateRefused string = "refused"
	// NichandleEmailChangeTaskStateTodo captures enum value "todo"
	NichandleEmailChangeTaskStateTodo string = "todo"
)

// prop value enum
func (m *NichandleEmailChangeTask) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleEmailChangeTaskTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleEmailChangeTask) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NichandleEmailChangeTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NichandleEmailChangeTask) UnmarshalBinary(b []byte) error {
	var res NichandleEmailChangeTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
