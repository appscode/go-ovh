// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APICredential API Credential
// swagger:model api.Credential
type APICredential struct {

	// application Id
	// Required: true
	// Read Only: true
	ApplicationID int64 `json:"applicationId"`

	// creation
	// Required: true
	// Read Only: true
	Creation strfmt.DateTime `json:"creation"`

	// credential Id
	// Required: true
	// Read Only: true
	CredentialID int64 `json:"credentialId"`

	// expiration
	// Read Only: true
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// last use
	// Read Only: true
	LastUse strfmt.DateTime `json:"lastUse,omitempty"`

	// States whether this credential has been created by yourself or by the OVH support team
	// Required: true
	// Read Only: true
	OvhSupport bool `json:"ovhSupport"`

	// rules
	// Required: true
	Rules APICredentialRules `json:"rules"`

	// status
	// Required: true
	// Read Only: true
	Status string `json:"status"`
}

// Validate validates this api credential
func (m *APICredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvhSupport(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APICredential) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("applicationId", "body", int64(m.ApplicationID)); err != nil {
		return err
	}

	return nil
}

func (m *APICredential) validateCreation(formats strfmt.Registry) error {

	if err := validate.Required("creation", "body", strfmt.DateTime(m.Creation)); err != nil {
		return err
	}

	if err := validate.FormatOf("creation", "body", "date-time", m.Creation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *APICredential) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credentialId", "body", int64(m.CredentialID)); err != nil {
		return err
	}

	return nil
}

func (m *APICredential) validateOvhSupport(formats strfmt.Registry) error {

	if err := validate.Required("ovhSupport", "body", bool(m.OvhSupport)); err != nil {
		return err
	}

	return nil
}

func (m *APICredential) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	if err := m.Rules.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rules")
		}
		return err
	}

	return nil
}

var apiCredentialTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["expired","pendingValidation","refused","validated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiCredentialTypeStatusPropEnum = append(apiCredentialTypeStatusPropEnum, v)
	}
}

const (
	// APICredentialStatusExpired captures enum value "expired"
	APICredentialStatusExpired string = "expired"
	// APICredentialStatusPendingValidation captures enum value "pendingValidation"
	APICredentialStatusPendingValidation string = "pendingValidation"
	// APICredentialStatusRefused captures enum value "refused"
	APICredentialStatusRefused string = "refused"
	// APICredentialStatusValidated captures enum value "validated"
	APICredentialStatusValidated string = "validated"
)

// prop value enum
func (m *APICredential) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, apiCredentialTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *APICredential) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APICredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APICredential) UnmarshalBinary(b []byte) error {
	var res APICredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
