// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingRefund Details about a Refund
// swagger:model billing.Refund
type BillingRefund struct {

	// date
	// Required: true
	// Read Only: true
	Date strfmt.DateTime `json:"date"`

	// order Id
	// Required: true
	// Read Only: true
	OrderID int64 `json:"orderId"`

	// original bill Id
	// Read Only: true
	OriginalBillID string `json:"originalBillId,omitempty"`

	// password
	// Required: true
	// Read Only: true
	Password string `json:"password"`

	// pdf Url
	// Required: true
	// Read Only: true
	PdfURL string `json:"pdfUrl"`

	// price with tax
	// Required: true
	PriceWithTax *OrderPrice `json:"priceWithTax"`

	// price without tax
	// Required: true
	PriceWithoutTax *OrderPrice `json:"priceWithoutTax"`

	// refund Id
	// Required: true
	// Read Only: true
	RefundID string `json:"refundId"`

	// tax
	// Required: true
	Tax *OrderPrice `json:"tax"`

	// url
	// Required: true
	// Read Only: true
	URL string `json:"url"`
}

// Validate validates this billing refund
func (m *BillingRefund) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePdfURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePriceWithTax(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePriceWithoutTax(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefundID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTax(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingRefund) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingRefund) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("orderId", "body", int64(m.OrderID)); err != nil {
		return err
	}

	return nil
}

func (m *BillingRefund) validatePassword(formats strfmt.Registry) error {

	if err := validate.RequiredString("password", "body", string(m.Password)); err != nil {
		return err
	}

	return nil
}

func (m *BillingRefund) validatePdfURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("pdfUrl", "body", string(m.PdfURL)); err != nil {
		return err
	}

	return nil
}

func (m *BillingRefund) validatePriceWithTax(formats strfmt.Registry) error {

	if err := validate.Required("priceWithTax", "body", m.PriceWithTax); err != nil {
		return err
	}

	if m.PriceWithTax != nil {

		if err := m.PriceWithTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceWithTax")
			}
			return err
		}
	}

	return nil
}

func (m *BillingRefund) validatePriceWithoutTax(formats strfmt.Registry) error {

	if err := validate.Required("priceWithoutTax", "body", m.PriceWithoutTax); err != nil {
		return err
	}

	if m.PriceWithoutTax != nil {

		if err := m.PriceWithoutTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priceWithoutTax")
			}
			return err
		}
	}

	return nil
}

func (m *BillingRefund) validateRefundID(formats strfmt.Registry) error {

	if err := validate.RequiredString("refundId", "body", string(m.RefundID)); err != nil {
		return err
	}

	return nil
}

func (m *BillingRefund) validateTax(formats strfmt.Registry) error {

	if err := validate.Required("tax", "body", m.Tax); err != nil {
		return err
	}

	if m.Tax != nil {

		if err := m.Tax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tax")
			}
			return err
		}
	}

	return nil
}

func (m *BillingRefund) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", string(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingRefund) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingRefund) UnmarshalBinary(b []byte) error {
	var res BillingRefund
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
