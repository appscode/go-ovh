// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingCreditBalanceMouvement Credit balance
// swagger:model billing.Credit.Balance.Mouvement
type BillingCreditBalanceMouvement struct {

	// amount
	// Required: true
	Amount *OrderPrice `json:"amount"`

	// Balance name
	// Required: true
	// Read Only: true
	BalanceName string `json:"balanceName"`

	// consumer object
	// Required: true
	ConsumerObject *BillingCreditBalanceMouvementSubObject `json:"consumerObject"`

	// Date of the mouvement creation
	// Required: true
	// Read Only: true
	CreationDate strfmt.DateTime `json:"creationDate"`

	// Expiration date of the mouvement
	// Read Only: true
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// Date of the mouvement last update
	// Required: true
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate"`

	// Mouvement ID
	// Required: true
	// Read Only: true
	MouvementID int64 `json:"mouvementId"`

	// source object
	// Required: true
	SourceObject *BillingCreditBalanceMouvementSubObject `json:"sourceObject"`

	// Mouvement type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this billing credit balance mouvement
func (m *BillingCreditBalanceMouvement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBalanceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConsumerObject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMouvementID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSourceObject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingCreditBalanceMouvement) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {

		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateBalanceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("balanceName", "body", string(m.BalanceName)); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateConsumerObject(formats strfmt.Registry) error {

	if err := validate.Required("consumerObject", "body", m.ConsumerObject); err != nil {
		return err
	}

	if m.ConsumerObject != nil {

		if err := m.ConsumerObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerObject")
			}
			return err
		}
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateMouvementID(formats strfmt.Registry) error {

	if err := validate.Required("mouvementId", "body", int64(m.MouvementID)); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateSourceObject(formats strfmt.Registry) error {

	if err := validate.Required("sourceObject", "body", m.SourceObject); err != nil {
		return err
	}

	if m.SourceObject != nil {

		if err := m.SourceObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceObject")
			}
			return err
		}
	}

	return nil
}

func (m *BillingCreditBalanceMouvement) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingCreditBalanceMouvement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingCreditBalanceMouvement) UnmarshalBinary(b []byte) error {
	var res BillingCreditBalanceMouvement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
