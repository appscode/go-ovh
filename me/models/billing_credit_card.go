// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingCreditCard Credit card informations
// swagger:model billing.CreditCard
type BillingCreditCard struct {

	// default payment mean
	// Required: true
	// Read Only: true
	DefaultPaymentMean bool `json:"defaultPaymentMean"`

	// Custom description of this account
	Description string `json:"description,omitempty"`

	// expiration date
	// Required: true
	// Read Only: true
	ExpirationDate strfmt.Date `json:"expirationDate"`

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// number
	// Required: true
	// Read Only: true
	Number string `json:"number"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// True if this credit card has been registered with a successful 3DSecure challenge
	// Required: true
	// Read Only: true
	ThreeDsValidated bool `json:"threeDsValidated"`

	// type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this billing credit card
func (m *BillingCreditCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultPaymentMean(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThreeDsValidated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingCreditCard) validateDefaultPaymentMean(formats strfmt.Registry) error {

	if err := validate.Required("defaultPaymentMean", "body", bool(m.DefaultPaymentMean)); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditCard) validateExpirationDate(formats strfmt.Registry) error {

	if err := validate.Required("expirationDate", "body", strfmt.Date(m.ExpirationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("expirationDate", "body", "date", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditCard) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditCard) validateNumber(formats strfmt.Registry) error {

	if err := validate.RequiredString("number", "body", string(m.Number)); err != nil {
		return err
	}

	return nil
}

var billingCreditCardTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["expired","tooManyFailures","valid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		billingCreditCardTypeStatePropEnum = append(billingCreditCardTypeStatePropEnum, v)
	}
}

const (
	// BillingCreditCardStateExpired captures enum value "expired"
	BillingCreditCardStateExpired string = "expired"
	// BillingCreditCardStateTooManyFailures captures enum value "tooManyFailures"
	BillingCreditCardStateTooManyFailures string = "tooManyFailures"
	// BillingCreditCardStateValid captures enum value "valid"
	BillingCreditCardStateValid string = "valid"
)

// prop value enum
func (m *BillingCreditCard) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, billingCreditCardTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BillingCreditCard) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditCard) validateThreeDsValidated(formats strfmt.Registry) error {

	if err := validate.Required("threeDsValidated", "body", bool(m.ThreeDsValidated)); err != nil {
		return err
	}

	return nil
}

func (m *BillingCreditCard) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingCreditCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingCreditCard) UnmarshalBinary(b []byte) error {
	var res BillingCreditCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
