// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NichandleNichandle Details about your OVH identifier
// swagger:model nichandle.Nichandle
type NichandleNichandle struct {

	// address
	Address string `json:"address,omitempty"`

	// area
	Area string `json:"area,omitempty"`

	// birth city
	BirthCity string `json:"birthCity,omitempty"`

	// birth day
	BirthDay string `json:"birthDay,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// company national identification number
	CompanyNationalIdentificationNumber string `json:"companyNationalIdentificationNumber,omitempty"`

	// corporation type
	CorporationType string `json:"corporationType,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// currency
	// Required: true
	Currency *NichandleCurrency `json:"currency"`

	// Your customer code (a numerical value used for identification when contacting support via phone call)
	// Read Only: true
	CustomerCode string `json:"customerCode,omitempty"`

	// email
	// Required: true
	// Read Only: true
	Email string `json:"email"`

	// fax
	Fax string `json:"fax,omitempty"`

	// firstname
	Firstname string `json:"firstname,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// legalform
	Legalform string `json:"legalform,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// national identification number
	NationalIdentificationNumber string `json:"nationalIdentificationNumber,omitempty"`

	// nichandle
	// Required: true
	// Read Only: true
	Nichandle string `json:"nichandle"`

	// organisation
	Organisation string `json:"organisation,omitempty"`

	// ovh company
	// Required: true
	// Read Only: true
	OvhCompany string `json:"ovhCompany"`

	// ovh subsidiary
	// Required: true
	// Read Only: true
	OvhSubsidiary string `json:"ovhSubsidiary"`

	// phone
	Phone string `json:"phone,omitempty"`

	// phone country
	PhoneCountry string `json:"phoneCountry,omitempty"`

	// sex
	Sex string `json:"sex,omitempty"`

	// spare email
	SpareEmail string `json:"spareEmail,omitempty"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// vat
	Vat string `json:"vat,omitempty"`

	// zip
	Zip string `json:"zip,omitempty"`
}

// Validate validates this nichandle nichandle
func (m *NichandleNichandle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLegalform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNichandle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvhCompany(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvhSubsidiary(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePhoneCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSex(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nichandleNichandleTypeCountryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DG","DJ","DK","DM","DO","DZ","EA","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HN","HR","HT","HU","IC","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","UNKNOWN","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeCountryPropEnum = append(nichandleNichandleTypeCountryPropEnum, v)
	}
}

const (
	// NichandleNichandleCountryAC captures enum value "AC"
	NichandleNichandleCountryAC string = "AC"
	// NichandleNichandleCountryAD captures enum value "AD"
	NichandleNichandleCountryAD string = "AD"
	// NichandleNichandleCountryAE captures enum value "AE"
	NichandleNichandleCountryAE string = "AE"
	// NichandleNichandleCountryAF captures enum value "AF"
	NichandleNichandleCountryAF string = "AF"
	// NichandleNichandleCountryAG captures enum value "AG"
	NichandleNichandleCountryAG string = "AG"
	// NichandleNichandleCountryAI captures enum value "AI"
	NichandleNichandleCountryAI string = "AI"
	// NichandleNichandleCountryAL captures enum value "AL"
	NichandleNichandleCountryAL string = "AL"
	// NichandleNichandleCountryAM captures enum value "AM"
	NichandleNichandleCountryAM string = "AM"
	// NichandleNichandleCountryAO captures enum value "AO"
	NichandleNichandleCountryAO string = "AO"
	// NichandleNichandleCountryAQ captures enum value "AQ"
	NichandleNichandleCountryAQ string = "AQ"
	// NichandleNichandleCountryAR captures enum value "AR"
	NichandleNichandleCountryAR string = "AR"
	// NichandleNichandleCountryAS captures enum value "AS"
	NichandleNichandleCountryAS string = "AS"
	// NichandleNichandleCountryAT captures enum value "AT"
	NichandleNichandleCountryAT string = "AT"
	// NichandleNichandleCountryAU captures enum value "AU"
	NichandleNichandleCountryAU string = "AU"
	// NichandleNichandleCountryAW captures enum value "AW"
	NichandleNichandleCountryAW string = "AW"
	// NichandleNichandleCountryAX captures enum value "AX"
	NichandleNichandleCountryAX string = "AX"
	// NichandleNichandleCountryAZ captures enum value "AZ"
	NichandleNichandleCountryAZ string = "AZ"
	// NichandleNichandleCountryBA captures enum value "BA"
	NichandleNichandleCountryBA string = "BA"
	// NichandleNichandleCountryBB captures enum value "BB"
	NichandleNichandleCountryBB string = "BB"
	// NichandleNichandleCountryBD captures enum value "BD"
	NichandleNichandleCountryBD string = "BD"
	// NichandleNichandleCountryBE captures enum value "BE"
	NichandleNichandleCountryBE string = "BE"
	// NichandleNichandleCountryBF captures enum value "BF"
	NichandleNichandleCountryBF string = "BF"
	// NichandleNichandleCountryBG captures enum value "BG"
	NichandleNichandleCountryBG string = "BG"
	// NichandleNichandleCountryBH captures enum value "BH"
	NichandleNichandleCountryBH string = "BH"
	// NichandleNichandleCountryBI captures enum value "BI"
	NichandleNichandleCountryBI string = "BI"
	// NichandleNichandleCountryBJ captures enum value "BJ"
	NichandleNichandleCountryBJ string = "BJ"
	// NichandleNichandleCountryBL captures enum value "BL"
	NichandleNichandleCountryBL string = "BL"
	// NichandleNichandleCountryBM captures enum value "BM"
	NichandleNichandleCountryBM string = "BM"
	// NichandleNichandleCountryBN captures enum value "BN"
	NichandleNichandleCountryBN string = "BN"
	// NichandleNichandleCountryBO captures enum value "BO"
	NichandleNichandleCountryBO string = "BO"
	// NichandleNichandleCountryBQ captures enum value "BQ"
	NichandleNichandleCountryBQ string = "BQ"
	// NichandleNichandleCountryBR captures enum value "BR"
	NichandleNichandleCountryBR string = "BR"
	// NichandleNichandleCountryBS captures enum value "BS"
	NichandleNichandleCountryBS string = "BS"
	// NichandleNichandleCountryBT captures enum value "BT"
	NichandleNichandleCountryBT string = "BT"
	// NichandleNichandleCountryBW captures enum value "BW"
	NichandleNichandleCountryBW string = "BW"
	// NichandleNichandleCountryBY captures enum value "BY"
	NichandleNichandleCountryBY string = "BY"
	// NichandleNichandleCountryBZ captures enum value "BZ"
	NichandleNichandleCountryBZ string = "BZ"
	// NichandleNichandleCountryCA captures enum value "CA"
	NichandleNichandleCountryCA string = "CA"
	// NichandleNichandleCountryCC captures enum value "CC"
	NichandleNichandleCountryCC string = "CC"
	// NichandleNichandleCountryCD captures enum value "CD"
	NichandleNichandleCountryCD string = "CD"
	// NichandleNichandleCountryCF captures enum value "CF"
	NichandleNichandleCountryCF string = "CF"
	// NichandleNichandleCountryCG captures enum value "CG"
	NichandleNichandleCountryCG string = "CG"
	// NichandleNichandleCountryCH captures enum value "CH"
	NichandleNichandleCountryCH string = "CH"
	// NichandleNichandleCountryCI captures enum value "CI"
	NichandleNichandleCountryCI string = "CI"
	// NichandleNichandleCountryCK captures enum value "CK"
	NichandleNichandleCountryCK string = "CK"
	// NichandleNichandleCountryCL captures enum value "CL"
	NichandleNichandleCountryCL string = "CL"
	// NichandleNichandleCountryCM captures enum value "CM"
	NichandleNichandleCountryCM string = "CM"
	// NichandleNichandleCountryCN captures enum value "CN"
	NichandleNichandleCountryCN string = "CN"
	// NichandleNichandleCountryCO captures enum value "CO"
	NichandleNichandleCountryCO string = "CO"
	// NichandleNichandleCountryCR captures enum value "CR"
	NichandleNichandleCountryCR string = "CR"
	// NichandleNichandleCountryCU captures enum value "CU"
	NichandleNichandleCountryCU string = "CU"
	// NichandleNichandleCountryCV captures enum value "CV"
	NichandleNichandleCountryCV string = "CV"
	// NichandleNichandleCountryCW captures enum value "CW"
	NichandleNichandleCountryCW string = "CW"
	// NichandleNichandleCountryCX captures enum value "CX"
	NichandleNichandleCountryCX string = "CX"
	// NichandleNichandleCountryCY captures enum value "CY"
	NichandleNichandleCountryCY string = "CY"
	// NichandleNichandleCountryCZ captures enum value "CZ"
	NichandleNichandleCountryCZ string = "CZ"
	// NichandleNichandleCountryDE captures enum value "DE"
	NichandleNichandleCountryDE string = "DE"
	// NichandleNichandleCountryDG captures enum value "DG"
	NichandleNichandleCountryDG string = "DG"
	// NichandleNichandleCountryDJ captures enum value "DJ"
	NichandleNichandleCountryDJ string = "DJ"
	// NichandleNichandleCountryDK captures enum value "DK"
	NichandleNichandleCountryDK string = "DK"
	// NichandleNichandleCountryDM captures enum value "DM"
	NichandleNichandleCountryDM string = "DM"
	// NichandleNichandleCountryDO captures enum value "DO"
	NichandleNichandleCountryDO string = "DO"
	// NichandleNichandleCountryDZ captures enum value "DZ"
	NichandleNichandleCountryDZ string = "DZ"
	// NichandleNichandleCountryEA captures enum value "EA"
	NichandleNichandleCountryEA string = "EA"
	// NichandleNichandleCountryEC captures enum value "EC"
	NichandleNichandleCountryEC string = "EC"
	// NichandleNichandleCountryEE captures enum value "EE"
	NichandleNichandleCountryEE string = "EE"
	// NichandleNichandleCountryEG captures enum value "EG"
	NichandleNichandleCountryEG string = "EG"
	// NichandleNichandleCountryEH captures enum value "EH"
	NichandleNichandleCountryEH string = "EH"
	// NichandleNichandleCountryER captures enum value "ER"
	NichandleNichandleCountryER string = "ER"
	// NichandleNichandleCountryES captures enum value "ES"
	NichandleNichandleCountryES string = "ES"
	// NichandleNichandleCountryET captures enum value "ET"
	NichandleNichandleCountryET string = "ET"
	// NichandleNichandleCountryFI captures enum value "FI"
	NichandleNichandleCountryFI string = "FI"
	// NichandleNichandleCountryFJ captures enum value "FJ"
	NichandleNichandleCountryFJ string = "FJ"
	// NichandleNichandleCountryFK captures enum value "FK"
	NichandleNichandleCountryFK string = "FK"
	// NichandleNichandleCountryFM captures enum value "FM"
	NichandleNichandleCountryFM string = "FM"
	// NichandleNichandleCountryFO captures enum value "FO"
	NichandleNichandleCountryFO string = "FO"
	// NichandleNichandleCountryFR captures enum value "FR"
	NichandleNichandleCountryFR string = "FR"
	// NichandleNichandleCountryGA captures enum value "GA"
	NichandleNichandleCountryGA string = "GA"
	// NichandleNichandleCountryGB captures enum value "GB"
	NichandleNichandleCountryGB string = "GB"
	// NichandleNichandleCountryGD captures enum value "GD"
	NichandleNichandleCountryGD string = "GD"
	// NichandleNichandleCountryGE captures enum value "GE"
	NichandleNichandleCountryGE string = "GE"
	// NichandleNichandleCountryGF captures enum value "GF"
	NichandleNichandleCountryGF string = "GF"
	// NichandleNichandleCountryGG captures enum value "GG"
	NichandleNichandleCountryGG string = "GG"
	// NichandleNichandleCountryGH captures enum value "GH"
	NichandleNichandleCountryGH string = "GH"
	// NichandleNichandleCountryGI captures enum value "GI"
	NichandleNichandleCountryGI string = "GI"
	// NichandleNichandleCountryGL captures enum value "GL"
	NichandleNichandleCountryGL string = "GL"
	// NichandleNichandleCountryGM captures enum value "GM"
	NichandleNichandleCountryGM string = "GM"
	// NichandleNichandleCountryGN captures enum value "GN"
	NichandleNichandleCountryGN string = "GN"
	// NichandleNichandleCountryGP captures enum value "GP"
	NichandleNichandleCountryGP string = "GP"
	// NichandleNichandleCountryGQ captures enum value "GQ"
	NichandleNichandleCountryGQ string = "GQ"
	// NichandleNichandleCountryGR captures enum value "GR"
	NichandleNichandleCountryGR string = "GR"
	// NichandleNichandleCountryGS captures enum value "GS"
	NichandleNichandleCountryGS string = "GS"
	// NichandleNichandleCountryGT captures enum value "GT"
	NichandleNichandleCountryGT string = "GT"
	// NichandleNichandleCountryGU captures enum value "GU"
	NichandleNichandleCountryGU string = "GU"
	// NichandleNichandleCountryGW captures enum value "GW"
	NichandleNichandleCountryGW string = "GW"
	// NichandleNichandleCountryGY captures enum value "GY"
	NichandleNichandleCountryGY string = "GY"
	// NichandleNichandleCountryHK captures enum value "HK"
	NichandleNichandleCountryHK string = "HK"
	// NichandleNichandleCountryHN captures enum value "HN"
	NichandleNichandleCountryHN string = "HN"
	// NichandleNichandleCountryHR captures enum value "HR"
	NichandleNichandleCountryHR string = "HR"
	// NichandleNichandleCountryHT captures enum value "HT"
	NichandleNichandleCountryHT string = "HT"
	// NichandleNichandleCountryHU captures enum value "HU"
	NichandleNichandleCountryHU string = "HU"
	// NichandleNichandleCountryIC captures enum value "IC"
	NichandleNichandleCountryIC string = "IC"
	// NichandleNichandleCountryID captures enum value "ID"
	NichandleNichandleCountryID string = "ID"
	// NichandleNichandleCountryIE captures enum value "IE"
	NichandleNichandleCountryIE string = "IE"
	// NichandleNichandleCountryIL captures enum value "IL"
	NichandleNichandleCountryIL string = "IL"
	// NichandleNichandleCountryIM captures enum value "IM"
	NichandleNichandleCountryIM string = "IM"
	// NichandleNichandleCountryIN captures enum value "IN"
	NichandleNichandleCountryIN string = "IN"
	// NichandleNichandleCountryIO captures enum value "IO"
	NichandleNichandleCountryIO string = "IO"
	// NichandleNichandleCountryIQ captures enum value "IQ"
	NichandleNichandleCountryIQ string = "IQ"
	// NichandleNichandleCountryIR captures enum value "IR"
	NichandleNichandleCountryIR string = "IR"
	// NichandleNichandleCountryIS captures enum value "IS"
	NichandleNichandleCountryIS string = "IS"
	// NichandleNichandleCountryIT captures enum value "IT"
	NichandleNichandleCountryIT string = "IT"
	// NichandleNichandleCountryJE captures enum value "JE"
	NichandleNichandleCountryJE string = "JE"
	// NichandleNichandleCountryJM captures enum value "JM"
	NichandleNichandleCountryJM string = "JM"
	// NichandleNichandleCountryJO captures enum value "JO"
	NichandleNichandleCountryJO string = "JO"
	// NichandleNichandleCountryJP captures enum value "JP"
	NichandleNichandleCountryJP string = "JP"
	// NichandleNichandleCountryKE captures enum value "KE"
	NichandleNichandleCountryKE string = "KE"
	// NichandleNichandleCountryKG captures enum value "KG"
	NichandleNichandleCountryKG string = "KG"
	// NichandleNichandleCountryKH captures enum value "KH"
	NichandleNichandleCountryKH string = "KH"
	// NichandleNichandleCountryKI captures enum value "KI"
	NichandleNichandleCountryKI string = "KI"
	// NichandleNichandleCountryKM captures enum value "KM"
	NichandleNichandleCountryKM string = "KM"
	// NichandleNichandleCountryKN captures enum value "KN"
	NichandleNichandleCountryKN string = "KN"
	// NichandleNichandleCountryKP captures enum value "KP"
	NichandleNichandleCountryKP string = "KP"
	// NichandleNichandleCountryKR captures enum value "KR"
	NichandleNichandleCountryKR string = "KR"
	// NichandleNichandleCountryKW captures enum value "KW"
	NichandleNichandleCountryKW string = "KW"
	// NichandleNichandleCountryKY captures enum value "KY"
	NichandleNichandleCountryKY string = "KY"
	// NichandleNichandleCountryKZ captures enum value "KZ"
	NichandleNichandleCountryKZ string = "KZ"
	// NichandleNichandleCountryLA captures enum value "LA"
	NichandleNichandleCountryLA string = "LA"
	// NichandleNichandleCountryLB captures enum value "LB"
	NichandleNichandleCountryLB string = "LB"
	// NichandleNichandleCountryLC captures enum value "LC"
	NichandleNichandleCountryLC string = "LC"
	// NichandleNichandleCountryLI captures enum value "LI"
	NichandleNichandleCountryLI string = "LI"
	// NichandleNichandleCountryLK captures enum value "LK"
	NichandleNichandleCountryLK string = "LK"
	// NichandleNichandleCountryLR captures enum value "LR"
	NichandleNichandleCountryLR string = "LR"
	// NichandleNichandleCountryLS captures enum value "LS"
	NichandleNichandleCountryLS string = "LS"
	// NichandleNichandleCountryLT captures enum value "LT"
	NichandleNichandleCountryLT string = "LT"
	// NichandleNichandleCountryLU captures enum value "LU"
	NichandleNichandleCountryLU string = "LU"
	// NichandleNichandleCountryLV captures enum value "LV"
	NichandleNichandleCountryLV string = "LV"
	// NichandleNichandleCountryLY captures enum value "LY"
	NichandleNichandleCountryLY string = "LY"
	// NichandleNichandleCountryMA captures enum value "MA"
	NichandleNichandleCountryMA string = "MA"
	// NichandleNichandleCountryMC captures enum value "MC"
	NichandleNichandleCountryMC string = "MC"
	// NichandleNichandleCountryMD captures enum value "MD"
	NichandleNichandleCountryMD string = "MD"
	// NichandleNichandleCountryME captures enum value "ME"
	NichandleNichandleCountryME string = "ME"
	// NichandleNichandleCountryMF captures enum value "MF"
	NichandleNichandleCountryMF string = "MF"
	// NichandleNichandleCountryMG captures enum value "MG"
	NichandleNichandleCountryMG string = "MG"
	// NichandleNichandleCountryMH captures enum value "MH"
	NichandleNichandleCountryMH string = "MH"
	// NichandleNichandleCountryMK captures enum value "MK"
	NichandleNichandleCountryMK string = "MK"
	// NichandleNichandleCountryML captures enum value "ML"
	NichandleNichandleCountryML string = "ML"
	// NichandleNichandleCountryMM captures enum value "MM"
	NichandleNichandleCountryMM string = "MM"
	// NichandleNichandleCountryMN captures enum value "MN"
	NichandleNichandleCountryMN string = "MN"
	// NichandleNichandleCountryMO captures enum value "MO"
	NichandleNichandleCountryMO string = "MO"
	// NichandleNichandleCountryMP captures enum value "MP"
	NichandleNichandleCountryMP string = "MP"
	// NichandleNichandleCountryMQ captures enum value "MQ"
	NichandleNichandleCountryMQ string = "MQ"
	// NichandleNichandleCountryMR captures enum value "MR"
	NichandleNichandleCountryMR string = "MR"
	// NichandleNichandleCountryMS captures enum value "MS"
	NichandleNichandleCountryMS string = "MS"
	// NichandleNichandleCountryMT captures enum value "MT"
	NichandleNichandleCountryMT string = "MT"
	// NichandleNichandleCountryMU captures enum value "MU"
	NichandleNichandleCountryMU string = "MU"
	// NichandleNichandleCountryMV captures enum value "MV"
	NichandleNichandleCountryMV string = "MV"
	// NichandleNichandleCountryMW captures enum value "MW"
	NichandleNichandleCountryMW string = "MW"
	// NichandleNichandleCountryMX captures enum value "MX"
	NichandleNichandleCountryMX string = "MX"
	// NichandleNichandleCountryMY captures enum value "MY"
	NichandleNichandleCountryMY string = "MY"
	// NichandleNichandleCountryMZ captures enum value "MZ"
	NichandleNichandleCountryMZ string = "MZ"
	// NichandleNichandleCountryNA captures enum value "NA"
	NichandleNichandleCountryNA string = "NA"
	// NichandleNichandleCountryNC captures enum value "NC"
	NichandleNichandleCountryNC string = "NC"
	// NichandleNichandleCountryNE captures enum value "NE"
	NichandleNichandleCountryNE string = "NE"
	// NichandleNichandleCountryNF captures enum value "NF"
	NichandleNichandleCountryNF string = "NF"
	// NichandleNichandleCountryNG captures enum value "NG"
	NichandleNichandleCountryNG string = "NG"
	// NichandleNichandleCountryNI captures enum value "NI"
	NichandleNichandleCountryNI string = "NI"
	// NichandleNichandleCountryNL captures enum value "NL"
	NichandleNichandleCountryNL string = "NL"
	// NichandleNichandleCountryNO captures enum value "NO"
	NichandleNichandleCountryNO string = "NO"
	// NichandleNichandleCountryNP captures enum value "NP"
	NichandleNichandleCountryNP string = "NP"
	// NichandleNichandleCountryNR captures enum value "NR"
	NichandleNichandleCountryNR string = "NR"
	// NichandleNichandleCountryNU captures enum value "NU"
	NichandleNichandleCountryNU string = "NU"
	// NichandleNichandleCountryNZ captures enum value "NZ"
	NichandleNichandleCountryNZ string = "NZ"
	// NichandleNichandleCountryOM captures enum value "OM"
	NichandleNichandleCountryOM string = "OM"
	// NichandleNichandleCountryPA captures enum value "PA"
	NichandleNichandleCountryPA string = "PA"
	// NichandleNichandleCountryPE captures enum value "PE"
	NichandleNichandleCountryPE string = "PE"
	// NichandleNichandleCountryPF captures enum value "PF"
	NichandleNichandleCountryPF string = "PF"
	// NichandleNichandleCountryPG captures enum value "PG"
	NichandleNichandleCountryPG string = "PG"
	// NichandleNichandleCountryPH captures enum value "PH"
	NichandleNichandleCountryPH string = "PH"
	// NichandleNichandleCountryPK captures enum value "PK"
	NichandleNichandleCountryPK string = "PK"
	// NichandleNichandleCountryPL captures enum value "PL"
	NichandleNichandleCountryPL string = "PL"
	// NichandleNichandleCountryPM captures enum value "PM"
	NichandleNichandleCountryPM string = "PM"
	// NichandleNichandleCountryPN captures enum value "PN"
	NichandleNichandleCountryPN string = "PN"
	// NichandleNichandleCountryPR captures enum value "PR"
	NichandleNichandleCountryPR string = "PR"
	// NichandleNichandleCountryPS captures enum value "PS"
	NichandleNichandleCountryPS string = "PS"
	// NichandleNichandleCountryPT captures enum value "PT"
	NichandleNichandleCountryPT string = "PT"
	// NichandleNichandleCountryPW captures enum value "PW"
	NichandleNichandleCountryPW string = "PW"
	// NichandleNichandleCountryPY captures enum value "PY"
	NichandleNichandleCountryPY string = "PY"
	// NichandleNichandleCountryQA captures enum value "QA"
	NichandleNichandleCountryQA string = "QA"
	// NichandleNichandleCountryRE captures enum value "RE"
	NichandleNichandleCountryRE string = "RE"
	// NichandleNichandleCountryRO captures enum value "RO"
	NichandleNichandleCountryRO string = "RO"
	// NichandleNichandleCountryRS captures enum value "RS"
	NichandleNichandleCountryRS string = "RS"
	// NichandleNichandleCountryRU captures enum value "RU"
	NichandleNichandleCountryRU string = "RU"
	// NichandleNichandleCountryRW captures enum value "RW"
	NichandleNichandleCountryRW string = "RW"
	// NichandleNichandleCountrySA captures enum value "SA"
	NichandleNichandleCountrySA string = "SA"
	// NichandleNichandleCountrySB captures enum value "SB"
	NichandleNichandleCountrySB string = "SB"
	// NichandleNichandleCountrySC captures enum value "SC"
	NichandleNichandleCountrySC string = "SC"
	// NichandleNichandleCountrySD captures enum value "SD"
	NichandleNichandleCountrySD string = "SD"
	// NichandleNichandleCountrySE captures enum value "SE"
	NichandleNichandleCountrySE string = "SE"
	// NichandleNichandleCountrySG captures enum value "SG"
	NichandleNichandleCountrySG string = "SG"
	// NichandleNichandleCountrySH captures enum value "SH"
	NichandleNichandleCountrySH string = "SH"
	// NichandleNichandleCountrySI captures enum value "SI"
	NichandleNichandleCountrySI string = "SI"
	// NichandleNichandleCountrySJ captures enum value "SJ"
	NichandleNichandleCountrySJ string = "SJ"
	// NichandleNichandleCountrySK captures enum value "SK"
	NichandleNichandleCountrySK string = "SK"
	// NichandleNichandleCountrySL captures enum value "SL"
	NichandleNichandleCountrySL string = "SL"
	// NichandleNichandleCountrySM captures enum value "SM"
	NichandleNichandleCountrySM string = "SM"
	// NichandleNichandleCountrySN captures enum value "SN"
	NichandleNichandleCountrySN string = "SN"
	// NichandleNichandleCountrySO captures enum value "SO"
	NichandleNichandleCountrySO string = "SO"
	// NichandleNichandleCountrySR captures enum value "SR"
	NichandleNichandleCountrySR string = "SR"
	// NichandleNichandleCountrySS captures enum value "SS"
	NichandleNichandleCountrySS string = "SS"
	// NichandleNichandleCountryST captures enum value "ST"
	NichandleNichandleCountryST string = "ST"
	// NichandleNichandleCountrySV captures enum value "SV"
	NichandleNichandleCountrySV string = "SV"
	// NichandleNichandleCountrySX captures enum value "SX"
	NichandleNichandleCountrySX string = "SX"
	// NichandleNichandleCountrySY captures enum value "SY"
	NichandleNichandleCountrySY string = "SY"
	// NichandleNichandleCountrySZ captures enum value "SZ"
	NichandleNichandleCountrySZ string = "SZ"
	// NichandleNichandleCountryTA captures enum value "TA"
	NichandleNichandleCountryTA string = "TA"
	// NichandleNichandleCountryTC captures enum value "TC"
	NichandleNichandleCountryTC string = "TC"
	// NichandleNichandleCountryTD captures enum value "TD"
	NichandleNichandleCountryTD string = "TD"
	// NichandleNichandleCountryTF captures enum value "TF"
	NichandleNichandleCountryTF string = "TF"
	// NichandleNichandleCountryTG captures enum value "TG"
	NichandleNichandleCountryTG string = "TG"
	// NichandleNichandleCountryTH captures enum value "TH"
	NichandleNichandleCountryTH string = "TH"
	// NichandleNichandleCountryTJ captures enum value "TJ"
	NichandleNichandleCountryTJ string = "TJ"
	// NichandleNichandleCountryTK captures enum value "TK"
	NichandleNichandleCountryTK string = "TK"
	// NichandleNichandleCountryTL captures enum value "TL"
	NichandleNichandleCountryTL string = "TL"
	// NichandleNichandleCountryTM captures enum value "TM"
	NichandleNichandleCountryTM string = "TM"
	// NichandleNichandleCountryTN captures enum value "TN"
	NichandleNichandleCountryTN string = "TN"
	// NichandleNichandleCountryTO captures enum value "TO"
	NichandleNichandleCountryTO string = "TO"
	// NichandleNichandleCountryTR captures enum value "TR"
	NichandleNichandleCountryTR string = "TR"
	// NichandleNichandleCountryTT captures enum value "TT"
	NichandleNichandleCountryTT string = "TT"
	// NichandleNichandleCountryTV captures enum value "TV"
	NichandleNichandleCountryTV string = "TV"
	// NichandleNichandleCountryTW captures enum value "TW"
	NichandleNichandleCountryTW string = "TW"
	// NichandleNichandleCountryTZ captures enum value "TZ"
	NichandleNichandleCountryTZ string = "TZ"
	// NichandleNichandleCountryUA captures enum value "UA"
	NichandleNichandleCountryUA string = "UA"
	// NichandleNichandleCountryUG captures enum value "UG"
	NichandleNichandleCountryUG string = "UG"
	// NichandleNichandleCountryUM captures enum value "UM"
	NichandleNichandleCountryUM string = "UM"
	// NichandleNichandleCountryUNKNOWN captures enum value "UNKNOWN"
	NichandleNichandleCountryUNKNOWN string = "UNKNOWN"
	// NichandleNichandleCountryUS captures enum value "US"
	NichandleNichandleCountryUS string = "US"
	// NichandleNichandleCountryUY captures enum value "UY"
	NichandleNichandleCountryUY string = "UY"
	// NichandleNichandleCountryUZ captures enum value "UZ"
	NichandleNichandleCountryUZ string = "UZ"
	// NichandleNichandleCountryVA captures enum value "VA"
	NichandleNichandleCountryVA string = "VA"
	// NichandleNichandleCountryVC captures enum value "VC"
	NichandleNichandleCountryVC string = "VC"
	// NichandleNichandleCountryVE captures enum value "VE"
	NichandleNichandleCountryVE string = "VE"
	// NichandleNichandleCountryVG captures enum value "VG"
	NichandleNichandleCountryVG string = "VG"
	// NichandleNichandleCountryVI captures enum value "VI"
	NichandleNichandleCountryVI string = "VI"
	// NichandleNichandleCountryVN captures enum value "VN"
	NichandleNichandleCountryVN string = "VN"
	// NichandleNichandleCountryVU captures enum value "VU"
	NichandleNichandleCountryVU string = "VU"
	// NichandleNichandleCountryWF captures enum value "WF"
	NichandleNichandleCountryWF string = "WF"
	// NichandleNichandleCountryWS captures enum value "WS"
	NichandleNichandleCountryWS string = "WS"
	// NichandleNichandleCountryXK captures enum value "XK"
	NichandleNichandleCountryXK string = "XK"
	// NichandleNichandleCountryYE captures enum value "YE"
	NichandleNichandleCountryYE string = "YE"
	// NichandleNichandleCountryYT captures enum value "YT"
	NichandleNichandleCountryYT string = "YT"
	// NichandleNichandleCountryZA captures enum value "ZA"
	NichandleNichandleCountryZA string = "ZA"
	// NichandleNichandleCountryZM captures enum value "ZM"
	NichandleNichandleCountryZM string = "ZM"
	// NichandleNichandleCountryZW captures enum value "ZW"
	NichandleNichandleCountryZW string = "ZW"
)

// prop value enum
func (m *NichandleNichandle) validateCountryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *NichandleNichandle) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {

		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *NichandleNichandle) validateEmail(formats strfmt.Registry) error {

	if err := validate.RequiredString("email", "body", string(m.Email)); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cs_CZ","de_DE","en_AU","en_CA","en_GB","en_IE","en_US","es_ES","fi_FI","fr_CA","fr_FR","fr_MA","fr_SN","fr_TN","it_IT","lt_LT","nl_NL","pl_PL","pt_PT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeLanguagePropEnum = append(nichandleNichandleTypeLanguagePropEnum, v)
	}
}

const (
	// NichandleNichandleLanguageCsCZ captures enum value "cs_CZ"
	NichandleNichandleLanguageCsCZ string = "cs_CZ"
	// NichandleNichandleLanguageDeDE captures enum value "de_DE"
	NichandleNichandleLanguageDeDE string = "de_DE"
	// NichandleNichandleLanguageEnAU captures enum value "en_AU"
	NichandleNichandleLanguageEnAU string = "en_AU"
	// NichandleNichandleLanguageEnCA captures enum value "en_CA"
	NichandleNichandleLanguageEnCA string = "en_CA"
	// NichandleNichandleLanguageEnGB captures enum value "en_GB"
	NichandleNichandleLanguageEnGB string = "en_GB"
	// NichandleNichandleLanguageEnIE captures enum value "en_IE"
	NichandleNichandleLanguageEnIE string = "en_IE"
	// NichandleNichandleLanguageEnUS captures enum value "en_US"
	NichandleNichandleLanguageEnUS string = "en_US"
	// NichandleNichandleLanguageEsES captures enum value "es_ES"
	NichandleNichandleLanguageEsES string = "es_ES"
	// NichandleNichandleLanguageFiFI captures enum value "fi_FI"
	NichandleNichandleLanguageFiFI string = "fi_FI"
	// NichandleNichandleLanguageFrCA captures enum value "fr_CA"
	NichandleNichandleLanguageFrCA string = "fr_CA"
	// NichandleNichandleLanguageFrFR captures enum value "fr_FR"
	NichandleNichandleLanguageFrFR string = "fr_FR"
	// NichandleNichandleLanguageFrMA captures enum value "fr_MA"
	NichandleNichandleLanguageFrMA string = "fr_MA"
	// NichandleNichandleLanguageFrSN captures enum value "fr_SN"
	NichandleNichandleLanguageFrSN string = "fr_SN"
	// NichandleNichandleLanguageFrTN captures enum value "fr_TN"
	NichandleNichandleLanguageFrTN string = "fr_TN"
	// NichandleNichandleLanguageItIT captures enum value "it_IT"
	NichandleNichandleLanguageItIT string = "it_IT"
	// NichandleNichandleLanguageLtLT captures enum value "lt_LT"
	NichandleNichandleLanguageLtLT string = "lt_LT"
	// NichandleNichandleLanguageNlNL captures enum value "nl_NL"
	NichandleNichandleLanguageNlNL string = "nl_NL"
	// NichandleNichandleLanguagePlPL captures enum value "pl_PL"
	NichandleNichandleLanguagePlPL string = "pl_PL"
	// NichandleNichandleLanguagePtPT captures enum value "pt_PT"
	NichandleNichandleLanguagePtPT string = "pt_PT"
)

// prop value enum
func (m *NichandleNichandle) validateLanguageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeLanguagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeLegalformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administration","association","corporation","individual","other","personalcorporation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeLegalformPropEnum = append(nichandleNichandleTypeLegalformPropEnum, v)
	}
}

const (
	// NichandleNichandleLegalformAdministration captures enum value "administration"
	NichandleNichandleLegalformAdministration string = "administration"
	// NichandleNichandleLegalformAssociation captures enum value "association"
	NichandleNichandleLegalformAssociation string = "association"
	// NichandleNichandleLegalformCorporation captures enum value "corporation"
	NichandleNichandleLegalformCorporation string = "corporation"
	// NichandleNichandleLegalformIndividual captures enum value "individual"
	NichandleNichandleLegalformIndividual string = "individual"
	// NichandleNichandleLegalformOther captures enum value "other"
	NichandleNichandleLegalformOther string = "other"
	// NichandleNichandleLegalformPersonalcorporation captures enum value "personalcorporation"
	NichandleNichandleLegalformPersonalcorporation string = "personalcorporation"
)

// prop value enum
func (m *NichandleNichandle) validateLegalformEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeLegalformPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateLegalform(formats strfmt.Registry) error {

	if swag.IsZero(m.Legalform) { // not required
		return nil
	}

	// value enum
	if err := m.validateLegalformEnum("legalform", "body", m.Legalform); err != nil {
		return err
	}

	return nil
}

func (m *NichandleNichandle) validateNichandle(formats strfmt.Registry) error {

	if err := validate.RequiredString("nichandle", "body", string(m.Nichandle)); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeOvhCompanyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kimsufi","ovh","soyoustart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeOvhCompanyPropEnum = append(nichandleNichandleTypeOvhCompanyPropEnum, v)
	}
}

const (
	// NichandleNichandleOvhCompanyKimsufi captures enum value "kimsufi"
	NichandleNichandleOvhCompanyKimsufi string = "kimsufi"
	// NichandleNichandleOvhCompanyOvh captures enum value "ovh"
	NichandleNichandleOvhCompanyOvh string = "ovh"
	// NichandleNichandleOvhCompanySoyoustart captures enum value "soyoustart"
	NichandleNichandleOvhCompanySoyoustart string = "soyoustart"
)

// prop value enum
func (m *NichandleNichandle) validateOvhCompanyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeOvhCompanyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateOvhCompany(formats strfmt.Registry) error {

	if err := validate.RequiredString("ovhCompany", "body", string(m.OvhCompany)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOvhCompanyEnum("ovhCompany", "body", m.OvhCompany); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeOvhSubsidiaryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASIA","AU","CA","CZ","DE","ES","EU","FI","FR","GB","IE","IT","LT","MA","NL","PL","PT","QC","SG","SN","TN","US","WE","WS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeOvhSubsidiaryPropEnum = append(nichandleNichandleTypeOvhSubsidiaryPropEnum, v)
	}
}

const (
	// NichandleNichandleOvhSubsidiaryASIA captures enum value "ASIA"
	NichandleNichandleOvhSubsidiaryASIA string = "ASIA"
	// NichandleNichandleOvhSubsidiaryAU captures enum value "AU"
	NichandleNichandleOvhSubsidiaryAU string = "AU"
	// NichandleNichandleOvhSubsidiaryCA captures enum value "CA"
	NichandleNichandleOvhSubsidiaryCA string = "CA"
	// NichandleNichandleOvhSubsidiaryCZ captures enum value "CZ"
	NichandleNichandleOvhSubsidiaryCZ string = "CZ"
	// NichandleNichandleOvhSubsidiaryDE captures enum value "DE"
	NichandleNichandleOvhSubsidiaryDE string = "DE"
	// NichandleNichandleOvhSubsidiaryES captures enum value "ES"
	NichandleNichandleOvhSubsidiaryES string = "ES"
	// NichandleNichandleOvhSubsidiaryEU captures enum value "EU"
	NichandleNichandleOvhSubsidiaryEU string = "EU"
	// NichandleNichandleOvhSubsidiaryFI captures enum value "FI"
	NichandleNichandleOvhSubsidiaryFI string = "FI"
	// NichandleNichandleOvhSubsidiaryFR captures enum value "FR"
	NichandleNichandleOvhSubsidiaryFR string = "FR"
	// NichandleNichandleOvhSubsidiaryGB captures enum value "GB"
	NichandleNichandleOvhSubsidiaryGB string = "GB"
	// NichandleNichandleOvhSubsidiaryIE captures enum value "IE"
	NichandleNichandleOvhSubsidiaryIE string = "IE"
	// NichandleNichandleOvhSubsidiaryIT captures enum value "IT"
	NichandleNichandleOvhSubsidiaryIT string = "IT"
	// NichandleNichandleOvhSubsidiaryLT captures enum value "LT"
	NichandleNichandleOvhSubsidiaryLT string = "LT"
	// NichandleNichandleOvhSubsidiaryMA captures enum value "MA"
	NichandleNichandleOvhSubsidiaryMA string = "MA"
	// NichandleNichandleOvhSubsidiaryNL captures enum value "NL"
	NichandleNichandleOvhSubsidiaryNL string = "NL"
	// NichandleNichandleOvhSubsidiaryPL captures enum value "PL"
	NichandleNichandleOvhSubsidiaryPL string = "PL"
	// NichandleNichandleOvhSubsidiaryPT captures enum value "PT"
	NichandleNichandleOvhSubsidiaryPT string = "PT"
	// NichandleNichandleOvhSubsidiaryQC captures enum value "QC"
	NichandleNichandleOvhSubsidiaryQC string = "QC"
	// NichandleNichandleOvhSubsidiarySG captures enum value "SG"
	NichandleNichandleOvhSubsidiarySG string = "SG"
	// NichandleNichandleOvhSubsidiarySN captures enum value "SN"
	NichandleNichandleOvhSubsidiarySN string = "SN"
	// NichandleNichandleOvhSubsidiaryTN captures enum value "TN"
	NichandleNichandleOvhSubsidiaryTN string = "TN"
	// NichandleNichandleOvhSubsidiaryUS captures enum value "US"
	NichandleNichandleOvhSubsidiaryUS string = "US"
	// NichandleNichandleOvhSubsidiaryWE captures enum value "WE"
	NichandleNichandleOvhSubsidiaryWE string = "WE"
	// NichandleNichandleOvhSubsidiaryWS captures enum value "WS"
	NichandleNichandleOvhSubsidiaryWS string = "WS"
)

// prop value enum
func (m *NichandleNichandle) validateOvhSubsidiaryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeOvhSubsidiaryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateOvhSubsidiary(formats strfmt.Registry) error {

	if err := validate.RequiredString("ovhSubsidiary", "body", string(m.OvhSubsidiary)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOvhSubsidiaryEnum("ovhSubsidiary", "body", m.OvhSubsidiary); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypePhoneCountryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AC","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DG","DJ","DK","DM","DO","DZ","EA","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HN","HR","HT","HU","IC","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","UNKNOWN","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypePhoneCountryPropEnum = append(nichandleNichandleTypePhoneCountryPropEnum, v)
	}
}

const (
	// NichandleNichandlePhoneCountryAC captures enum value "AC"
	NichandleNichandlePhoneCountryAC string = "AC"
	// NichandleNichandlePhoneCountryAD captures enum value "AD"
	NichandleNichandlePhoneCountryAD string = "AD"
	// NichandleNichandlePhoneCountryAE captures enum value "AE"
	NichandleNichandlePhoneCountryAE string = "AE"
	// NichandleNichandlePhoneCountryAF captures enum value "AF"
	NichandleNichandlePhoneCountryAF string = "AF"
	// NichandleNichandlePhoneCountryAG captures enum value "AG"
	NichandleNichandlePhoneCountryAG string = "AG"
	// NichandleNichandlePhoneCountryAI captures enum value "AI"
	NichandleNichandlePhoneCountryAI string = "AI"
	// NichandleNichandlePhoneCountryAL captures enum value "AL"
	NichandleNichandlePhoneCountryAL string = "AL"
	// NichandleNichandlePhoneCountryAM captures enum value "AM"
	NichandleNichandlePhoneCountryAM string = "AM"
	// NichandleNichandlePhoneCountryAO captures enum value "AO"
	NichandleNichandlePhoneCountryAO string = "AO"
	// NichandleNichandlePhoneCountryAQ captures enum value "AQ"
	NichandleNichandlePhoneCountryAQ string = "AQ"
	// NichandleNichandlePhoneCountryAR captures enum value "AR"
	NichandleNichandlePhoneCountryAR string = "AR"
	// NichandleNichandlePhoneCountryAS captures enum value "AS"
	NichandleNichandlePhoneCountryAS string = "AS"
	// NichandleNichandlePhoneCountryAT captures enum value "AT"
	NichandleNichandlePhoneCountryAT string = "AT"
	// NichandleNichandlePhoneCountryAU captures enum value "AU"
	NichandleNichandlePhoneCountryAU string = "AU"
	// NichandleNichandlePhoneCountryAW captures enum value "AW"
	NichandleNichandlePhoneCountryAW string = "AW"
	// NichandleNichandlePhoneCountryAX captures enum value "AX"
	NichandleNichandlePhoneCountryAX string = "AX"
	// NichandleNichandlePhoneCountryAZ captures enum value "AZ"
	NichandleNichandlePhoneCountryAZ string = "AZ"
	// NichandleNichandlePhoneCountryBA captures enum value "BA"
	NichandleNichandlePhoneCountryBA string = "BA"
	// NichandleNichandlePhoneCountryBB captures enum value "BB"
	NichandleNichandlePhoneCountryBB string = "BB"
	// NichandleNichandlePhoneCountryBD captures enum value "BD"
	NichandleNichandlePhoneCountryBD string = "BD"
	// NichandleNichandlePhoneCountryBE captures enum value "BE"
	NichandleNichandlePhoneCountryBE string = "BE"
	// NichandleNichandlePhoneCountryBF captures enum value "BF"
	NichandleNichandlePhoneCountryBF string = "BF"
	// NichandleNichandlePhoneCountryBG captures enum value "BG"
	NichandleNichandlePhoneCountryBG string = "BG"
	// NichandleNichandlePhoneCountryBH captures enum value "BH"
	NichandleNichandlePhoneCountryBH string = "BH"
	// NichandleNichandlePhoneCountryBI captures enum value "BI"
	NichandleNichandlePhoneCountryBI string = "BI"
	// NichandleNichandlePhoneCountryBJ captures enum value "BJ"
	NichandleNichandlePhoneCountryBJ string = "BJ"
	// NichandleNichandlePhoneCountryBL captures enum value "BL"
	NichandleNichandlePhoneCountryBL string = "BL"
	// NichandleNichandlePhoneCountryBM captures enum value "BM"
	NichandleNichandlePhoneCountryBM string = "BM"
	// NichandleNichandlePhoneCountryBN captures enum value "BN"
	NichandleNichandlePhoneCountryBN string = "BN"
	// NichandleNichandlePhoneCountryBO captures enum value "BO"
	NichandleNichandlePhoneCountryBO string = "BO"
	// NichandleNichandlePhoneCountryBQ captures enum value "BQ"
	NichandleNichandlePhoneCountryBQ string = "BQ"
	// NichandleNichandlePhoneCountryBR captures enum value "BR"
	NichandleNichandlePhoneCountryBR string = "BR"
	// NichandleNichandlePhoneCountryBS captures enum value "BS"
	NichandleNichandlePhoneCountryBS string = "BS"
	// NichandleNichandlePhoneCountryBT captures enum value "BT"
	NichandleNichandlePhoneCountryBT string = "BT"
	// NichandleNichandlePhoneCountryBW captures enum value "BW"
	NichandleNichandlePhoneCountryBW string = "BW"
	// NichandleNichandlePhoneCountryBY captures enum value "BY"
	NichandleNichandlePhoneCountryBY string = "BY"
	// NichandleNichandlePhoneCountryBZ captures enum value "BZ"
	NichandleNichandlePhoneCountryBZ string = "BZ"
	// NichandleNichandlePhoneCountryCA captures enum value "CA"
	NichandleNichandlePhoneCountryCA string = "CA"
	// NichandleNichandlePhoneCountryCC captures enum value "CC"
	NichandleNichandlePhoneCountryCC string = "CC"
	// NichandleNichandlePhoneCountryCD captures enum value "CD"
	NichandleNichandlePhoneCountryCD string = "CD"
	// NichandleNichandlePhoneCountryCF captures enum value "CF"
	NichandleNichandlePhoneCountryCF string = "CF"
	// NichandleNichandlePhoneCountryCG captures enum value "CG"
	NichandleNichandlePhoneCountryCG string = "CG"
	// NichandleNichandlePhoneCountryCH captures enum value "CH"
	NichandleNichandlePhoneCountryCH string = "CH"
	// NichandleNichandlePhoneCountryCI captures enum value "CI"
	NichandleNichandlePhoneCountryCI string = "CI"
	// NichandleNichandlePhoneCountryCK captures enum value "CK"
	NichandleNichandlePhoneCountryCK string = "CK"
	// NichandleNichandlePhoneCountryCL captures enum value "CL"
	NichandleNichandlePhoneCountryCL string = "CL"
	// NichandleNichandlePhoneCountryCM captures enum value "CM"
	NichandleNichandlePhoneCountryCM string = "CM"
	// NichandleNichandlePhoneCountryCN captures enum value "CN"
	NichandleNichandlePhoneCountryCN string = "CN"
	// NichandleNichandlePhoneCountryCO captures enum value "CO"
	NichandleNichandlePhoneCountryCO string = "CO"
	// NichandleNichandlePhoneCountryCR captures enum value "CR"
	NichandleNichandlePhoneCountryCR string = "CR"
	// NichandleNichandlePhoneCountryCU captures enum value "CU"
	NichandleNichandlePhoneCountryCU string = "CU"
	// NichandleNichandlePhoneCountryCV captures enum value "CV"
	NichandleNichandlePhoneCountryCV string = "CV"
	// NichandleNichandlePhoneCountryCW captures enum value "CW"
	NichandleNichandlePhoneCountryCW string = "CW"
	// NichandleNichandlePhoneCountryCX captures enum value "CX"
	NichandleNichandlePhoneCountryCX string = "CX"
	// NichandleNichandlePhoneCountryCY captures enum value "CY"
	NichandleNichandlePhoneCountryCY string = "CY"
	// NichandleNichandlePhoneCountryCZ captures enum value "CZ"
	NichandleNichandlePhoneCountryCZ string = "CZ"
	// NichandleNichandlePhoneCountryDE captures enum value "DE"
	NichandleNichandlePhoneCountryDE string = "DE"
	// NichandleNichandlePhoneCountryDG captures enum value "DG"
	NichandleNichandlePhoneCountryDG string = "DG"
	// NichandleNichandlePhoneCountryDJ captures enum value "DJ"
	NichandleNichandlePhoneCountryDJ string = "DJ"
	// NichandleNichandlePhoneCountryDK captures enum value "DK"
	NichandleNichandlePhoneCountryDK string = "DK"
	// NichandleNichandlePhoneCountryDM captures enum value "DM"
	NichandleNichandlePhoneCountryDM string = "DM"
	// NichandleNichandlePhoneCountryDO captures enum value "DO"
	NichandleNichandlePhoneCountryDO string = "DO"
	// NichandleNichandlePhoneCountryDZ captures enum value "DZ"
	NichandleNichandlePhoneCountryDZ string = "DZ"
	// NichandleNichandlePhoneCountryEA captures enum value "EA"
	NichandleNichandlePhoneCountryEA string = "EA"
	// NichandleNichandlePhoneCountryEC captures enum value "EC"
	NichandleNichandlePhoneCountryEC string = "EC"
	// NichandleNichandlePhoneCountryEE captures enum value "EE"
	NichandleNichandlePhoneCountryEE string = "EE"
	// NichandleNichandlePhoneCountryEG captures enum value "EG"
	NichandleNichandlePhoneCountryEG string = "EG"
	// NichandleNichandlePhoneCountryEH captures enum value "EH"
	NichandleNichandlePhoneCountryEH string = "EH"
	// NichandleNichandlePhoneCountryER captures enum value "ER"
	NichandleNichandlePhoneCountryER string = "ER"
	// NichandleNichandlePhoneCountryES captures enum value "ES"
	NichandleNichandlePhoneCountryES string = "ES"
	// NichandleNichandlePhoneCountryET captures enum value "ET"
	NichandleNichandlePhoneCountryET string = "ET"
	// NichandleNichandlePhoneCountryFI captures enum value "FI"
	NichandleNichandlePhoneCountryFI string = "FI"
	// NichandleNichandlePhoneCountryFJ captures enum value "FJ"
	NichandleNichandlePhoneCountryFJ string = "FJ"
	// NichandleNichandlePhoneCountryFK captures enum value "FK"
	NichandleNichandlePhoneCountryFK string = "FK"
	// NichandleNichandlePhoneCountryFM captures enum value "FM"
	NichandleNichandlePhoneCountryFM string = "FM"
	// NichandleNichandlePhoneCountryFO captures enum value "FO"
	NichandleNichandlePhoneCountryFO string = "FO"
	// NichandleNichandlePhoneCountryFR captures enum value "FR"
	NichandleNichandlePhoneCountryFR string = "FR"
	// NichandleNichandlePhoneCountryGA captures enum value "GA"
	NichandleNichandlePhoneCountryGA string = "GA"
	// NichandleNichandlePhoneCountryGB captures enum value "GB"
	NichandleNichandlePhoneCountryGB string = "GB"
	// NichandleNichandlePhoneCountryGD captures enum value "GD"
	NichandleNichandlePhoneCountryGD string = "GD"
	// NichandleNichandlePhoneCountryGE captures enum value "GE"
	NichandleNichandlePhoneCountryGE string = "GE"
	// NichandleNichandlePhoneCountryGF captures enum value "GF"
	NichandleNichandlePhoneCountryGF string = "GF"
	// NichandleNichandlePhoneCountryGG captures enum value "GG"
	NichandleNichandlePhoneCountryGG string = "GG"
	// NichandleNichandlePhoneCountryGH captures enum value "GH"
	NichandleNichandlePhoneCountryGH string = "GH"
	// NichandleNichandlePhoneCountryGI captures enum value "GI"
	NichandleNichandlePhoneCountryGI string = "GI"
	// NichandleNichandlePhoneCountryGL captures enum value "GL"
	NichandleNichandlePhoneCountryGL string = "GL"
	// NichandleNichandlePhoneCountryGM captures enum value "GM"
	NichandleNichandlePhoneCountryGM string = "GM"
	// NichandleNichandlePhoneCountryGN captures enum value "GN"
	NichandleNichandlePhoneCountryGN string = "GN"
	// NichandleNichandlePhoneCountryGP captures enum value "GP"
	NichandleNichandlePhoneCountryGP string = "GP"
	// NichandleNichandlePhoneCountryGQ captures enum value "GQ"
	NichandleNichandlePhoneCountryGQ string = "GQ"
	// NichandleNichandlePhoneCountryGR captures enum value "GR"
	NichandleNichandlePhoneCountryGR string = "GR"
	// NichandleNichandlePhoneCountryGS captures enum value "GS"
	NichandleNichandlePhoneCountryGS string = "GS"
	// NichandleNichandlePhoneCountryGT captures enum value "GT"
	NichandleNichandlePhoneCountryGT string = "GT"
	// NichandleNichandlePhoneCountryGU captures enum value "GU"
	NichandleNichandlePhoneCountryGU string = "GU"
	// NichandleNichandlePhoneCountryGW captures enum value "GW"
	NichandleNichandlePhoneCountryGW string = "GW"
	// NichandleNichandlePhoneCountryGY captures enum value "GY"
	NichandleNichandlePhoneCountryGY string = "GY"
	// NichandleNichandlePhoneCountryHK captures enum value "HK"
	NichandleNichandlePhoneCountryHK string = "HK"
	// NichandleNichandlePhoneCountryHN captures enum value "HN"
	NichandleNichandlePhoneCountryHN string = "HN"
	// NichandleNichandlePhoneCountryHR captures enum value "HR"
	NichandleNichandlePhoneCountryHR string = "HR"
	// NichandleNichandlePhoneCountryHT captures enum value "HT"
	NichandleNichandlePhoneCountryHT string = "HT"
	// NichandleNichandlePhoneCountryHU captures enum value "HU"
	NichandleNichandlePhoneCountryHU string = "HU"
	// NichandleNichandlePhoneCountryIC captures enum value "IC"
	NichandleNichandlePhoneCountryIC string = "IC"
	// NichandleNichandlePhoneCountryID captures enum value "ID"
	NichandleNichandlePhoneCountryID string = "ID"
	// NichandleNichandlePhoneCountryIE captures enum value "IE"
	NichandleNichandlePhoneCountryIE string = "IE"
	// NichandleNichandlePhoneCountryIL captures enum value "IL"
	NichandleNichandlePhoneCountryIL string = "IL"
	// NichandleNichandlePhoneCountryIM captures enum value "IM"
	NichandleNichandlePhoneCountryIM string = "IM"
	// NichandleNichandlePhoneCountryIN captures enum value "IN"
	NichandleNichandlePhoneCountryIN string = "IN"
	// NichandleNichandlePhoneCountryIO captures enum value "IO"
	NichandleNichandlePhoneCountryIO string = "IO"
	// NichandleNichandlePhoneCountryIQ captures enum value "IQ"
	NichandleNichandlePhoneCountryIQ string = "IQ"
	// NichandleNichandlePhoneCountryIR captures enum value "IR"
	NichandleNichandlePhoneCountryIR string = "IR"
	// NichandleNichandlePhoneCountryIS captures enum value "IS"
	NichandleNichandlePhoneCountryIS string = "IS"
	// NichandleNichandlePhoneCountryIT captures enum value "IT"
	NichandleNichandlePhoneCountryIT string = "IT"
	// NichandleNichandlePhoneCountryJE captures enum value "JE"
	NichandleNichandlePhoneCountryJE string = "JE"
	// NichandleNichandlePhoneCountryJM captures enum value "JM"
	NichandleNichandlePhoneCountryJM string = "JM"
	// NichandleNichandlePhoneCountryJO captures enum value "JO"
	NichandleNichandlePhoneCountryJO string = "JO"
	// NichandleNichandlePhoneCountryJP captures enum value "JP"
	NichandleNichandlePhoneCountryJP string = "JP"
	// NichandleNichandlePhoneCountryKE captures enum value "KE"
	NichandleNichandlePhoneCountryKE string = "KE"
	// NichandleNichandlePhoneCountryKG captures enum value "KG"
	NichandleNichandlePhoneCountryKG string = "KG"
	// NichandleNichandlePhoneCountryKH captures enum value "KH"
	NichandleNichandlePhoneCountryKH string = "KH"
	// NichandleNichandlePhoneCountryKI captures enum value "KI"
	NichandleNichandlePhoneCountryKI string = "KI"
	// NichandleNichandlePhoneCountryKM captures enum value "KM"
	NichandleNichandlePhoneCountryKM string = "KM"
	// NichandleNichandlePhoneCountryKN captures enum value "KN"
	NichandleNichandlePhoneCountryKN string = "KN"
	// NichandleNichandlePhoneCountryKP captures enum value "KP"
	NichandleNichandlePhoneCountryKP string = "KP"
	// NichandleNichandlePhoneCountryKR captures enum value "KR"
	NichandleNichandlePhoneCountryKR string = "KR"
	// NichandleNichandlePhoneCountryKW captures enum value "KW"
	NichandleNichandlePhoneCountryKW string = "KW"
	// NichandleNichandlePhoneCountryKY captures enum value "KY"
	NichandleNichandlePhoneCountryKY string = "KY"
	// NichandleNichandlePhoneCountryKZ captures enum value "KZ"
	NichandleNichandlePhoneCountryKZ string = "KZ"
	// NichandleNichandlePhoneCountryLA captures enum value "LA"
	NichandleNichandlePhoneCountryLA string = "LA"
	// NichandleNichandlePhoneCountryLB captures enum value "LB"
	NichandleNichandlePhoneCountryLB string = "LB"
	// NichandleNichandlePhoneCountryLC captures enum value "LC"
	NichandleNichandlePhoneCountryLC string = "LC"
	// NichandleNichandlePhoneCountryLI captures enum value "LI"
	NichandleNichandlePhoneCountryLI string = "LI"
	// NichandleNichandlePhoneCountryLK captures enum value "LK"
	NichandleNichandlePhoneCountryLK string = "LK"
	// NichandleNichandlePhoneCountryLR captures enum value "LR"
	NichandleNichandlePhoneCountryLR string = "LR"
	// NichandleNichandlePhoneCountryLS captures enum value "LS"
	NichandleNichandlePhoneCountryLS string = "LS"
	// NichandleNichandlePhoneCountryLT captures enum value "LT"
	NichandleNichandlePhoneCountryLT string = "LT"
	// NichandleNichandlePhoneCountryLU captures enum value "LU"
	NichandleNichandlePhoneCountryLU string = "LU"
	// NichandleNichandlePhoneCountryLV captures enum value "LV"
	NichandleNichandlePhoneCountryLV string = "LV"
	// NichandleNichandlePhoneCountryLY captures enum value "LY"
	NichandleNichandlePhoneCountryLY string = "LY"
	// NichandleNichandlePhoneCountryMA captures enum value "MA"
	NichandleNichandlePhoneCountryMA string = "MA"
	// NichandleNichandlePhoneCountryMC captures enum value "MC"
	NichandleNichandlePhoneCountryMC string = "MC"
	// NichandleNichandlePhoneCountryMD captures enum value "MD"
	NichandleNichandlePhoneCountryMD string = "MD"
	// NichandleNichandlePhoneCountryME captures enum value "ME"
	NichandleNichandlePhoneCountryME string = "ME"
	// NichandleNichandlePhoneCountryMF captures enum value "MF"
	NichandleNichandlePhoneCountryMF string = "MF"
	// NichandleNichandlePhoneCountryMG captures enum value "MG"
	NichandleNichandlePhoneCountryMG string = "MG"
	// NichandleNichandlePhoneCountryMH captures enum value "MH"
	NichandleNichandlePhoneCountryMH string = "MH"
	// NichandleNichandlePhoneCountryMK captures enum value "MK"
	NichandleNichandlePhoneCountryMK string = "MK"
	// NichandleNichandlePhoneCountryML captures enum value "ML"
	NichandleNichandlePhoneCountryML string = "ML"
	// NichandleNichandlePhoneCountryMM captures enum value "MM"
	NichandleNichandlePhoneCountryMM string = "MM"
	// NichandleNichandlePhoneCountryMN captures enum value "MN"
	NichandleNichandlePhoneCountryMN string = "MN"
	// NichandleNichandlePhoneCountryMO captures enum value "MO"
	NichandleNichandlePhoneCountryMO string = "MO"
	// NichandleNichandlePhoneCountryMP captures enum value "MP"
	NichandleNichandlePhoneCountryMP string = "MP"
	// NichandleNichandlePhoneCountryMQ captures enum value "MQ"
	NichandleNichandlePhoneCountryMQ string = "MQ"
	// NichandleNichandlePhoneCountryMR captures enum value "MR"
	NichandleNichandlePhoneCountryMR string = "MR"
	// NichandleNichandlePhoneCountryMS captures enum value "MS"
	NichandleNichandlePhoneCountryMS string = "MS"
	// NichandleNichandlePhoneCountryMT captures enum value "MT"
	NichandleNichandlePhoneCountryMT string = "MT"
	// NichandleNichandlePhoneCountryMU captures enum value "MU"
	NichandleNichandlePhoneCountryMU string = "MU"
	// NichandleNichandlePhoneCountryMV captures enum value "MV"
	NichandleNichandlePhoneCountryMV string = "MV"
	// NichandleNichandlePhoneCountryMW captures enum value "MW"
	NichandleNichandlePhoneCountryMW string = "MW"
	// NichandleNichandlePhoneCountryMX captures enum value "MX"
	NichandleNichandlePhoneCountryMX string = "MX"
	// NichandleNichandlePhoneCountryMY captures enum value "MY"
	NichandleNichandlePhoneCountryMY string = "MY"
	// NichandleNichandlePhoneCountryMZ captures enum value "MZ"
	NichandleNichandlePhoneCountryMZ string = "MZ"
	// NichandleNichandlePhoneCountryNA captures enum value "NA"
	NichandleNichandlePhoneCountryNA string = "NA"
	// NichandleNichandlePhoneCountryNC captures enum value "NC"
	NichandleNichandlePhoneCountryNC string = "NC"
	// NichandleNichandlePhoneCountryNE captures enum value "NE"
	NichandleNichandlePhoneCountryNE string = "NE"
	// NichandleNichandlePhoneCountryNF captures enum value "NF"
	NichandleNichandlePhoneCountryNF string = "NF"
	// NichandleNichandlePhoneCountryNG captures enum value "NG"
	NichandleNichandlePhoneCountryNG string = "NG"
	// NichandleNichandlePhoneCountryNI captures enum value "NI"
	NichandleNichandlePhoneCountryNI string = "NI"
	// NichandleNichandlePhoneCountryNL captures enum value "NL"
	NichandleNichandlePhoneCountryNL string = "NL"
	// NichandleNichandlePhoneCountryNO captures enum value "NO"
	NichandleNichandlePhoneCountryNO string = "NO"
	// NichandleNichandlePhoneCountryNP captures enum value "NP"
	NichandleNichandlePhoneCountryNP string = "NP"
	// NichandleNichandlePhoneCountryNR captures enum value "NR"
	NichandleNichandlePhoneCountryNR string = "NR"
	// NichandleNichandlePhoneCountryNU captures enum value "NU"
	NichandleNichandlePhoneCountryNU string = "NU"
	// NichandleNichandlePhoneCountryNZ captures enum value "NZ"
	NichandleNichandlePhoneCountryNZ string = "NZ"
	// NichandleNichandlePhoneCountryOM captures enum value "OM"
	NichandleNichandlePhoneCountryOM string = "OM"
	// NichandleNichandlePhoneCountryPA captures enum value "PA"
	NichandleNichandlePhoneCountryPA string = "PA"
	// NichandleNichandlePhoneCountryPE captures enum value "PE"
	NichandleNichandlePhoneCountryPE string = "PE"
	// NichandleNichandlePhoneCountryPF captures enum value "PF"
	NichandleNichandlePhoneCountryPF string = "PF"
	// NichandleNichandlePhoneCountryPG captures enum value "PG"
	NichandleNichandlePhoneCountryPG string = "PG"
	// NichandleNichandlePhoneCountryPH captures enum value "PH"
	NichandleNichandlePhoneCountryPH string = "PH"
	// NichandleNichandlePhoneCountryPK captures enum value "PK"
	NichandleNichandlePhoneCountryPK string = "PK"
	// NichandleNichandlePhoneCountryPL captures enum value "PL"
	NichandleNichandlePhoneCountryPL string = "PL"
	// NichandleNichandlePhoneCountryPM captures enum value "PM"
	NichandleNichandlePhoneCountryPM string = "PM"
	// NichandleNichandlePhoneCountryPN captures enum value "PN"
	NichandleNichandlePhoneCountryPN string = "PN"
	// NichandleNichandlePhoneCountryPR captures enum value "PR"
	NichandleNichandlePhoneCountryPR string = "PR"
	// NichandleNichandlePhoneCountryPS captures enum value "PS"
	NichandleNichandlePhoneCountryPS string = "PS"
	// NichandleNichandlePhoneCountryPT captures enum value "PT"
	NichandleNichandlePhoneCountryPT string = "PT"
	// NichandleNichandlePhoneCountryPW captures enum value "PW"
	NichandleNichandlePhoneCountryPW string = "PW"
	// NichandleNichandlePhoneCountryPY captures enum value "PY"
	NichandleNichandlePhoneCountryPY string = "PY"
	// NichandleNichandlePhoneCountryQA captures enum value "QA"
	NichandleNichandlePhoneCountryQA string = "QA"
	// NichandleNichandlePhoneCountryRE captures enum value "RE"
	NichandleNichandlePhoneCountryRE string = "RE"
	// NichandleNichandlePhoneCountryRO captures enum value "RO"
	NichandleNichandlePhoneCountryRO string = "RO"
	// NichandleNichandlePhoneCountryRS captures enum value "RS"
	NichandleNichandlePhoneCountryRS string = "RS"
	// NichandleNichandlePhoneCountryRU captures enum value "RU"
	NichandleNichandlePhoneCountryRU string = "RU"
	// NichandleNichandlePhoneCountryRW captures enum value "RW"
	NichandleNichandlePhoneCountryRW string = "RW"
	// NichandleNichandlePhoneCountrySA captures enum value "SA"
	NichandleNichandlePhoneCountrySA string = "SA"
	// NichandleNichandlePhoneCountrySB captures enum value "SB"
	NichandleNichandlePhoneCountrySB string = "SB"
	// NichandleNichandlePhoneCountrySC captures enum value "SC"
	NichandleNichandlePhoneCountrySC string = "SC"
	// NichandleNichandlePhoneCountrySD captures enum value "SD"
	NichandleNichandlePhoneCountrySD string = "SD"
	// NichandleNichandlePhoneCountrySE captures enum value "SE"
	NichandleNichandlePhoneCountrySE string = "SE"
	// NichandleNichandlePhoneCountrySG captures enum value "SG"
	NichandleNichandlePhoneCountrySG string = "SG"
	// NichandleNichandlePhoneCountrySH captures enum value "SH"
	NichandleNichandlePhoneCountrySH string = "SH"
	// NichandleNichandlePhoneCountrySI captures enum value "SI"
	NichandleNichandlePhoneCountrySI string = "SI"
	// NichandleNichandlePhoneCountrySJ captures enum value "SJ"
	NichandleNichandlePhoneCountrySJ string = "SJ"
	// NichandleNichandlePhoneCountrySK captures enum value "SK"
	NichandleNichandlePhoneCountrySK string = "SK"
	// NichandleNichandlePhoneCountrySL captures enum value "SL"
	NichandleNichandlePhoneCountrySL string = "SL"
	// NichandleNichandlePhoneCountrySM captures enum value "SM"
	NichandleNichandlePhoneCountrySM string = "SM"
	// NichandleNichandlePhoneCountrySN captures enum value "SN"
	NichandleNichandlePhoneCountrySN string = "SN"
	// NichandleNichandlePhoneCountrySO captures enum value "SO"
	NichandleNichandlePhoneCountrySO string = "SO"
	// NichandleNichandlePhoneCountrySR captures enum value "SR"
	NichandleNichandlePhoneCountrySR string = "SR"
	// NichandleNichandlePhoneCountrySS captures enum value "SS"
	NichandleNichandlePhoneCountrySS string = "SS"
	// NichandleNichandlePhoneCountryST captures enum value "ST"
	NichandleNichandlePhoneCountryST string = "ST"
	// NichandleNichandlePhoneCountrySV captures enum value "SV"
	NichandleNichandlePhoneCountrySV string = "SV"
	// NichandleNichandlePhoneCountrySX captures enum value "SX"
	NichandleNichandlePhoneCountrySX string = "SX"
	// NichandleNichandlePhoneCountrySY captures enum value "SY"
	NichandleNichandlePhoneCountrySY string = "SY"
	// NichandleNichandlePhoneCountrySZ captures enum value "SZ"
	NichandleNichandlePhoneCountrySZ string = "SZ"
	// NichandleNichandlePhoneCountryTA captures enum value "TA"
	NichandleNichandlePhoneCountryTA string = "TA"
	// NichandleNichandlePhoneCountryTC captures enum value "TC"
	NichandleNichandlePhoneCountryTC string = "TC"
	// NichandleNichandlePhoneCountryTD captures enum value "TD"
	NichandleNichandlePhoneCountryTD string = "TD"
	// NichandleNichandlePhoneCountryTF captures enum value "TF"
	NichandleNichandlePhoneCountryTF string = "TF"
	// NichandleNichandlePhoneCountryTG captures enum value "TG"
	NichandleNichandlePhoneCountryTG string = "TG"
	// NichandleNichandlePhoneCountryTH captures enum value "TH"
	NichandleNichandlePhoneCountryTH string = "TH"
	// NichandleNichandlePhoneCountryTJ captures enum value "TJ"
	NichandleNichandlePhoneCountryTJ string = "TJ"
	// NichandleNichandlePhoneCountryTK captures enum value "TK"
	NichandleNichandlePhoneCountryTK string = "TK"
	// NichandleNichandlePhoneCountryTL captures enum value "TL"
	NichandleNichandlePhoneCountryTL string = "TL"
	// NichandleNichandlePhoneCountryTM captures enum value "TM"
	NichandleNichandlePhoneCountryTM string = "TM"
	// NichandleNichandlePhoneCountryTN captures enum value "TN"
	NichandleNichandlePhoneCountryTN string = "TN"
	// NichandleNichandlePhoneCountryTO captures enum value "TO"
	NichandleNichandlePhoneCountryTO string = "TO"
	// NichandleNichandlePhoneCountryTR captures enum value "TR"
	NichandleNichandlePhoneCountryTR string = "TR"
	// NichandleNichandlePhoneCountryTT captures enum value "TT"
	NichandleNichandlePhoneCountryTT string = "TT"
	// NichandleNichandlePhoneCountryTV captures enum value "TV"
	NichandleNichandlePhoneCountryTV string = "TV"
	// NichandleNichandlePhoneCountryTW captures enum value "TW"
	NichandleNichandlePhoneCountryTW string = "TW"
	// NichandleNichandlePhoneCountryTZ captures enum value "TZ"
	NichandleNichandlePhoneCountryTZ string = "TZ"
	// NichandleNichandlePhoneCountryUA captures enum value "UA"
	NichandleNichandlePhoneCountryUA string = "UA"
	// NichandleNichandlePhoneCountryUG captures enum value "UG"
	NichandleNichandlePhoneCountryUG string = "UG"
	// NichandleNichandlePhoneCountryUM captures enum value "UM"
	NichandleNichandlePhoneCountryUM string = "UM"
	// NichandleNichandlePhoneCountryUNKNOWN captures enum value "UNKNOWN"
	NichandleNichandlePhoneCountryUNKNOWN string = "UNKNOWN"
	// NichandleNichandlePhoneCountryUS captures enum value "US"
	NichandleNichandlePhoneCountryUS string = "US"
	// NichandleNichandlePhoneCountryUY captures enum value "UY"
	NichandleNichandlePhoneCountryUY string = "UY"
	// NichandleNichandlePhoneCountryUZ captures enum value "UZ"
	NichandleNichandlePhoneCountryUZ string = "UZ"
	// NichandleNichandlePhoneCountryVA captures enum value "VA"
	NichandleNichandlePhoneCountryVA string = "VA"
	// NichandleNichandlePhoneCountryVC captures enum value "VC"
	NichandleNichandlePhoneCountryVC string = "VC"
	// NichandleNichandlePhoneCountryVE captures enum value "VE"
	NichandleNichandlePhoneCountryVE string = "VE"
	// NichandleNichandlePhoneCountryVG captures enum value "VG"
	NichandleNichandlePhoneCountryVG string = "VG"
	// NichandleNichandlePhoneCountryVI captures enum value "VI"
	NichandleNichandlePhoneCountryVI string = "VI"
	// NichandleNichandlePhoneCountryVN captures enum value "VN"
	NichandleNichandlePhoneCountryVN string = "VN"
	// NichandleNichandlePhoneCountryVU captures enum value "VU"
	NichandleNichandlePhoneCountryVU string = "VU"
	// NichandleNichandlePhoneCountryWF captures enum value "WF"
	NichandleNichandlePhoneCountryWF string = "WF"
	// NichandleNichandlePhoneCountryWS captures enum value "WS"
	NichandleNichandlePhoneCountryWS string = "WS"
	// NichandleNichandlePhoneCountryXK captures enum value "XK"
	NichandleNichandlePhoneCountryXK string = "XK"
	// NichandleNichandlePhoneCountryYE captures enum value "YE"
	NichandleNichandlePhoneCountryYE string = "YE"
	// NichandleNichandlePhoneCountryYT captures enum value "YT"
	NichandleNichandlePhoneCountryYT string = "YT"
	// NichandleNichandlePhoneCountryZA captures enum value "ZA"
	NichandleNichandlePhoneCountryZA string = "ZA"
	// NichandleNichandlePhoneCountryZM captures enum value "ZM"
	NichandleNichandlePhoneCountryZM string = "ZM"
	// NichandleNichandlePhoneCountryZW captures enum value "ZW"
	NichandleNichandlePhoneCountryZW string = "ZW"
)

// prop value enum
func (m *NichandleNichandle) validatePhoneCountryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypePhoneCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validatePhoneCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneCountry) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhoneCountryEnum("phoneCountry", "body", m.PhoneCountry); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeSexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["female","male"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeSexPropEnum = append(nichandleNichandleTypeSexPropEnum, v)
	}
}

const (
	// NichandleNichandleSexFemale captures enum value "female"
	NichandleNichandleSexFemale string = "female"
	// NichandleNichandleSexMale captures enum value "male"
	NichandleNichandleSexMale string = "male"
)

// prop value enum
func (m *NichandleNichandle) validateSexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeSexPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateSex(formats strfmt.Registry) error {

	if swag.IsZero(m.Sex) { // not required
		return nil
	}

	// value enum
	if err := m.validateSexEnum("sex", "body", m.Sex); err != nil {
		return err
	}

	return nil
}

var nichandleNichandleTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["complete","incomplete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleNichandleTypeStatePropEnum = append(nichandleNichandleTypeStatePropEnum, v)
	}
}

const (
	// NichandleNichandleStateComplete captures enum value "complete"
	NichandleNichandleStateComplete string = "complete"
	// NichandleNichandleStateIncomplete captures enum value "incomplete"
	NichandleNichandleStateIncomplete string = "incomplete"
)

// prop value enum
func (m *NichandleNichandle) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleNichandleTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleNichandle) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NichandleNichandle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NichandleNichandle) UnmarshalBinary(b []byte) error {
	var res NichandleNichandle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
