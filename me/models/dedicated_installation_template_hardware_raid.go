// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DedicatedInstallationTemplateHardwareRaid Hardware RAID defined in this partitioning scheme
// swagger:model dedicated.InstallationTemplate.HardwareRaid
type DedicatedInstallationTemplateHardwareRaid struct {

	// Disk list
	Disks []string `json:"disks"`

	// RAID mode
	Mode string `json:"mode,omitempty"`

	// Hardware RAID name
	Name string `json:"name,omitempty"`

	// Specifies the creation order of the hardware RAID
	Step int64 `json:"step,omitempty"`
}

// Validate validates this dedicated installation template hardware raid
func (m *DedicatedInstallationTemplateHardwareRaid) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DedicatedInstallationTemplateHardwareRaid) validateDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	return nil
}

var dedicatedInstallationTemplateHardwareRaidTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raid0","raid1","raid10","raid5","raid50","raid6","raid60"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedInstallationTemplateHardwareRaidTypeModePropEnum = append(dedicatedInstallationTemplateHardwareRaidTypeModePropEnum, v)
	}
}

const (
	// DedicatedInstallationTemplateHardwareRaidModeRaid0 captures enum value "raid0"
	DedicatedInstallationTemplateHardwareRaidModeRaid0 string = "raid0"
	// DedicatedInstallationTemplateHardwareRaidModeRaid1 captures enum value "raid1"
	DedicatedInstallationTemplateHardwareRaidModeRaid1 string = "raid1"
	// DedicatedInstallationTemplateHardwareRaidModeRaid10 captures enum value "raid10"
	DedicatedInstallationTemplateHardwareRaidModeRaid10 string = "raid10"
	// DedicatedInstallationTemplateHardwareRaidModeRaid5 captures enum value "raid5"
	DedicatedInstallationTemplateHardwareRaidModeRaid5 string = "raid5"
	// DedicatedInstallationTemplateHardwareRaidModeRaid50 captures enum value "raid50"
	DedicatedInstallationTemplateHardwareRaidModeRaid50 string = "raid50"
	// DedicatedInstallationTemplateHardwareRaidModeRaid6 captures enum value "raid6"
	DedicatedInstallationTemplateHardwareRaidModeRaid6 string = "raid6"
	// DedicatedInstallationTemplateHardwareRaidModeRaid60 captures enum value "raid60"
	DedicatedInstallationTemplateHardwareRaidModeRaid60 string = "raid60"
)

// prop value enum
func (m *DedicatedInstallationTemplateHardwareRaid) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedInstallationTemplateHardwareRaidTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedInstallationTemplateHardwareRaid) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DedicatedInstallationTemplateHardwareRaid) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DedicatedInstallationTemplateHardwareRaid) UnmarshalBinary(b []byte) error {
	var res DedicatedInstallationTemplateHardwareRaid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
