// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebtBalance Debt balance of the account
// swagger:model debt.Balance
type DebtBalance struct {

	// active
	// Required: true
	// Read Only: true
	Active bool `json:"active"`

	// due amount
	// Required: true
	DueAmount *OrderPrice `json:"dueAmount"`

	// pending amount
	// Required: true
	PendingAmount *OrderPrice `json:"pendingAmount"`

	// todo amount
	// Required: true
	TodoAmount *OrderPrice `json:"todoAmount"`

	// unmatured amount
	// Required: true
	UnmaturedAmount *OrderPrice `json:"unmaturedAmount"`
}

// Validate validates this debt balance
func (m *DebtBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDueAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePendingAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTodoAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnmaturedAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtBalance) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", bool(m.Active)); err != nil {
		return err
	}

	return nil
}

func (m *DebtBalance) validateDueAmount(formats strfmt.Registry) error {

	if err := validate.Required("dueAmount", "body", m.DueAmount); err != nil {
		return err
	}

	if m.DueAmount != nil {

		if err := m.DueAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dueAmount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtBalance) validatePendingAmount(formats strfmt.Registry) error {

	if err := validate.Required("pendingAmount", "body", m.PendingAmount); err != nil {
		return err
	}

	if m.PendingAmount != nil {

		if err := m.PendingAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pendingAmount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtBalance) validateTodoAmount(formats strfmt.Registry) error {

	if err := validate.Required("todoAmount", "body", m.TodoAmount); err != nil {
		return err
	}

	if m.TodoAmount != nil {

		if err := m.TodoAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("todoAmount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtBalance) validateUnmaturedAmount(formats strfmt.Registry) error {

	if err := validate.Required("unmaturedAmount", "body", m.UnmaturedAmount); err != nil {
		return err
	}

	if m.UnmaturedAmount != nil {

		if err := m.UnmaturedAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmaturedAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebtBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebtBalance) UnmarshalBinary(b []byte) error {
	var res DebtBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
