// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BillingOvhAccount Details about an OVH account
// swagger:model billing.OvhAccount
type BillingOvhAccount struct {

	// alert threshold
	AlertThreshold int64 `json:"alertThreshold,omitempty"`

	// balance
	// Required: true
	Balance *OrderPrice `json:"balance"`

	// can be credited
	// Required: true
	// Read Only: true
	CanBeCredited bool `json:"canBeCredited"`

	// is active
	// Required: true
	// Read Only: true
	IsActive bool `json:"isActive"`

	// last update
	// Required: true
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate"`

	// open date
	// Required: true
	// Read Only: true
	OpenDate strfmt.DateTime `json:"openDate"`

	// ovh account Id
	// Required: true
	// Read Only: true
	OvhAccountID string `json:"ovhAccountId"`
}

// Validate validates this billing ovh account
func (m *BillingOvhAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCanBeCredited(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOpenDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOvhAccountID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillingOvhAccount) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	if m.Balance != nil {

		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *BillingOvhAccount) validateCanBeCredited(formats strfmt.Registry) error {

	if err := validate.Required("canBeCredited", "body", bool(m.CanBeCredited)); err != nil {
		return err
	}

	return nil
}

func (m *BillingOvhAccount) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("isActive", "body", bool(m.IsActive)); err != nil {
		return err
	}

	return nil
}

func (m *BillingOvhAccount) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingOvhAccount) validateOpenDate(formats strfmt.Registry) error {

	if err := validate.Required("openDate", "body", strfmt.DateTime(m.OpenDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("openDate", "body", "date-time", m.OpenDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BillingOvhAccount) validateOvhAccountID(formats strfmt.Registry) error {

	if err := validate.RequiredString("ovhAccountId", "body", string(m.OvhAccountID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillingOvhAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillingOvhAccount) UnmarshalBinary(b []byte) error {
	var res BillingOvhAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
