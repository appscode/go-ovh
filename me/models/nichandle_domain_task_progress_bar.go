// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NichandleDomainTaskProgressBar Domain operation progress
// swagger:model nichandle.DomainTaskProgressBar
type NichandleDomainTaskProgressBar struct {

	// current step
	// Required: true
	CurrentStep *DomainOperationStep `json:"currentStep"`

	// The estimated end date of the task
	// Read Only: true
	ExpectedDoneDate strfmt.DateTime `json:"expectedDoneDate,omitempty"`

	// follow up steps
	FollowUpSteps NichandleDomainTaskProgressBarFollowUpSteps `json:"followUpSteps"`

	// The last update date of the task
	// Read Only: true
	LastUpdateDate strfmt.DateTime `json:"lastUpdateDate,omitempty"`

	// Progress percentage of the task
	// Required: true
	// Read Only: true
	Progress int64 `json:"progress"`

	// Action possible on task
	// Required: true
	// Read Only: true
	TaskActions []string `json:"taskActions"`

	// The status of the task
	// Required: true
	// Read Only: true
	TaskStatus string `json:"taskStatus"`
}

// Validate validates this nichandle domain task progress bar
func (m *NichandleDomainTaskProgressBar) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentStep(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskActions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NichandleDomainTaskProgressBar) validateCurrentStep(formats strfmt.Registry) error {

	if err := validate.Required("currentStep", "body", m.CurrentStep); err != nil {
		return err
	}

	if m.CurrentStep != nil {

		if err := m.CurrentStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentStep")
			}
			return err
		}
	}

	return nil
}

func (m *NichandleDomainTaskProgressBar) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", int64(m.Progress)); err != nil {
		return err
	}

	return nil
}

var nichandleDomainTaskProgressBarTaskActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["canCancel","canCorrect","canRelaunch","canReset"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleDomainTaskProgressBarTaskActionsItemsEnum = append(nichandleDomainTaskProgressBarTaskActionsItemsEnum, v)
	}
}

func (m *NichandleDomainTaskProgressBar) validateTaskActionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleDomainTaskProgressBarTaskActionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleDomainTaskProgressBar) validateTaskActions(formats strfmt.Registry) error {

	if err := validate.Required("taskActions", "body", m.TaskActions); err != nil {
		return err
	}

	for i := 0; i < len(m.TaskActions); i++ {

		// value enum
		if err := m.validateTaskActionsItemsEnum("taskActions"+"."+strconv.Itoa(i), "body", m.TaskActions[i]); err != nil {
			return err
		}

	}

	return nil
}

var nichandleDomainTaskProgressBarTypeTaskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cancelled","doing","done","error","todo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nichandleDomainTaskProgressBarTypeTaskStatusPropEnum = append(nichandleDomainTaskProgressBarTypeTaskStatusPropEnum, v)
	}
}

const (
	// NichandleDomainTaskProgressBarTaskStatusCancelled captures enum value "cancelled"
	NichandleDomainTaskProgressBarTaskStatusCancelled string = "cancelled"
	// NichandleDomainTaskProgressBarTaskStatusDoing captures enum value "doing"
	NichandleDomainTaskProgressBarTaskStatusDoing string = "doing"
	// NichandleDomainTaskProgressBarTaskStatusDone captures enum value "done"
	NichandleDomainTaskProgressBarTaskStatusDone string = "done"
	// NichandleDomainTaskProgressBarTaskStatusError captures enum value "error"
	NichandleDomainTaskProgressBarTaskStatusError string = "error"
	// NichandleDomainTaskProgressBarTaskStatusTodo captures enum value "todo"
	NichandleDomainTaskProgressBarTaskStatusTodo string = "todo"
)

// prop value enum
func (m *NichandleDomainTaskProgressBar) validateTaskStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nichandleDomainTaskProgressBarTypeTaskStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NichandleDomainTaskProgressBar) validateTaskStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("taskStatus", "body", string(m.TaskStatus)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaskStatusEnum("taskStatus", "body", m.TaskStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NichandleDomainTaskProgressBar) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NichandleDomainTaskProgressBar) UnmarshalBinary(b []byte) error {
	var res NichandleDomainTaskProgressBar
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
