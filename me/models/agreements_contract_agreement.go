// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementsContractAgreement Contract agreement
// swagger:model agreements.ContractAgreement
type AgreementsContractAgreement struct {

	// State of the agreement
	// Required: true
	// Read Only: true
	Agreed string `json:"agreed"`

	// Id of the agreed contract
	// Required: true
	// Read Only: true
	ContractID int64 `json:"contractId"`

	// Date the agreed contract was effective
	// Required: true
	// Read Only: true
	Date strfmt.DateTime `json:"date"`

	// Id of the contract
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`
}

// Validate validates this agreements contract agreement
func (m *AgreementsContractAgreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContractID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agreementsContractAgreementTypeAgreedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ko","obsolete","ok","todo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementsContractAgreementTypeAgreedPropEnum = append(agreementsContractAgreementTypeAgreedPropEnum, v)
	}
}

const (
	// AgreementsContractAgreementAgreedKo captures enum value "ko"
	AgreementsContractAgreementAgreedKo string = "ko"
	// AgreementsContractAgreementAgreedObsolete captures enum value "obsolete"
	AgreementsContractAgreementAgreedObsolete string = "obsolete"
	// AgreementsContractAgreementAgreedOk captures enum value "ok"
	AgreementsContractAgreementAgreedOk string = "ok"
	// AgreementsContractAgreementAgreedTodo captures enum value "todo"
	AgreementsContractAgreementAgreedTodo string = "todo"
)

// prop value enum
func (m *AgreementsContractAgreement) validateAgreedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, agreementsContractAgreementTypeAgreedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AgreementsContractAgreement) validateAgreed(formats strfmt.Registry) error {

	if err := validate.RequiredString("agreed", "body", string(m.Agreed)); err != nil {
		return err
	}

	// value enum
	if err := m.validateAgreedEnum("agreed", "body", m.Agreed); err != nil {
		return err
	}

	return nil
}

func (m *AgreementsContractAgreement) validateContractID(formats strfmt.Registry) error {

	if err := validate.Required("contractId", "body", int64(m.ContractID)); err != nil {
		return err
	}

	return nil
}

func (m *AgreementsContractAgreement) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgreementsContractAgreement) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgreementsContractAgreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementsContractAgreement) UnmarshalBinary(b []byte) error {
	var res AgreementsContractAgreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
