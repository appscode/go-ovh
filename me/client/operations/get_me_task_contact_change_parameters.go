// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMeTaskContactChangeParams creates a new GetMeTaskContactChangeParams object
// with the default values initialized.
func NewGetMeTaskContactChangeParams() *GetMeTaskContactChangeParams {
	var ()
	return &GetMeTaskContactChangeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMeTaskContactChangeParamsWithTimeout creates a new GetMeTaskContactChangeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMeTaskContactChangeParamsWithTimeout(timeout time.Duration) *GetMeTaskContactChangeParams {
	var ()
	return &GetMeTaskContactChangeParams{

		timeout: timeout,
	}
}

// NewGetMeTaskContactChangeParamsWithContext creates a new GetMeTaskContactChangeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMeTaskContactChangeParamsWithContext(ctx context.Context) *GetMeTaskContactChangeParams {
	var ()
	return &GetMeTaskContactChangeParams{

		Context: ctx,
	}
}

// NewGetMeTaskContactChangeParamsWithHTTPClient creates a new GetMeTaskContactChangeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMeTaskContactChangeParamsWithHTTPClient(client *http.Client) *GetMeTaskContactChangeParams {
	var ()
	return &GetMeTaskContactChangeParams{
		HTTPClient: client,
	}
}

/*GetMeTaskContactChangeParams contains all the parameters to send to the API endpoint
for the get me task contact change operation typically these are written to a http.Request
*/
type GetMeTaskContactChangeParams struct {

	/*AskingAccount*/
	AskingAccount *string
	/*State*/
	State *string
	/*ToAccount*/
	ToAccount *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithTimeout(timeout time.Duration) *GetMeTaskContactChangeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithContext(ctx context.Context) *GetMeTaskContactChangeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithHTTPClient(client *http.Client) *GetMeTaskContactChangeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAskingAccount adds the askingAccount to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithAskingAccount(askingAccount *string) *GetMeTaskContactChangeParams {
	o.SetAskingAccount(askingAccount)
	return o
}

// SetAskingAccount adds the askingAccount to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetAskingAccount(askingAccount *string) {
	o.AskingAccount = askingAccount
}

// WithState adds the state to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithState(state *string) *GetMeTaskContactChangeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetState(state *string) {
	o.State = state
}

// WithToAccount adds the toAccount to the get me task contact change params
func (o *GetMeTaskContactChangeParams) WithToAccount(toAccount *string) *GetMeTaskContactChangeParams {
	o.SetToAccount(toAccount)
	return o
}

// SetToAccount adds the toAccount to the get me task contact change params
func (o *GetMeTaskContactChangeParams) SetToAccount(toAccount *string) {
	o.ToAccount = toAccount
}

// WriteToRequest writes these params to a swagger request
func (o *GetMeTaskContactChangeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AskingAccount != nil {

		// query param askingAccount
		var qrAskingAccount string
		if o.AskingAccount != nil {
			qrAskingAccount = *o.AskingAccount
		}
		qAskingAccount := qrAskingAccount
		if qAskingAccount != "" {
			if err := r.SetQueryParam("askingAccount", qAskingAccount); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.ToAccount != nil {

		// query param toAccount
		var qrToAccount string
		if o.ToAccount != nil {
			qrToAccount = *o.ToAccount
		}
		qToAccount := qrToAccount
		if qToAccount != "" {
			if err := r.SetQueryParam("toAccount", qToAccount); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
