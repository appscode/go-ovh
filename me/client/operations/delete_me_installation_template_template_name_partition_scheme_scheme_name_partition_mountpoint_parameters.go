// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams creates a new DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams object
// with the default values initialized.
func NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams() *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	var ()
	return &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithTimeout creates a new DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithTimeout(timeout time.Duration) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	var ()
	return &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams{

		timeout: timeout,
	}
}

// NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithContext creates a new DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithContext(ctx context.Context) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	var ()
	return &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams{

		Context: ctx,
	}
}

// NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithHTTPClient creates a new DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParamsWithHTTPClient(client *http.Client) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	var ()
	return &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams{
		HTTPClient: client,
	}
}

/*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams contains all the parameters to send to the API endpoint
for the delete me installation template template name partition scheme scheme name partition mountpoint operation typically these are written to a http.Request
*/
type DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams struct {

	/*Mountpoint*/
	Mountpoint string
	/*SchemeName*/
	SchemeName string
	/*TemplateName*/
	TemplateName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithTimeout(timeout time.Duration) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithContext(ctx context.Context) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithHTTPClient(client *http.Client) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMountpoint adds the mountpoint to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithMountpoint(mountpoint string) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetMountpoint(mountpoint)
	return o
}

// SetMountpoint adds the mountpoint to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetMountpoint(mountpoint string) {
	o.Mountpoint = mountpoint
}

// WithSchemeName adds the schemeName to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithSchemeName(schemeName string) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetSchemeName(schemeName)
	return o
}

// SetSchemeName adds the schemeName to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetSchemeName(schemeName string) {
	o.SchemeName = schemeName
}

// WithTemplateName adds the templateName to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WithTemplateName(templateName string) *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams {
	o.SetTemplateName(templateName)
	return o
}

// SetTemplateName adds the templateName to the delete me installation template template name partition scheme scheme name partition mountpoint params
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) SetTemplateName(templateName string) {
	o.TemplateName = templateName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param mountpoint
	if err := r.SetPathParam("mountpoint", o.Mountpoint); err != nil {
		return err
	}

	// path param schemeName
	if err := r.SetPathParam("schemeName", o.SchemeName); err != nil {
		return err
	}

	// path param templateName
	if err := r.SetPathParam("templateName", o.TemplateName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
