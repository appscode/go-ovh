// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMeAPIApplicationApplicationID removes this application it will revoke all credential belonging to this application

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAPIApplicationApplicationID(params *DeleteMeAPIApplicationApplicationIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAPIApplicationApplicationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAPIApplicationApplicationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAPIApplicationApplicationID",
		Method:             "DELETE",
		PathPattern:        "/me/api/application/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAPIApplicationApplicationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAPIApplicationApplicationIDOK), nil

}

/*
DeleteMeAPICredentialCredentialID removes this credential

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAPICredentialCredentialID(params *DeleteMeAPICredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAPICredentialCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAPICredentialCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAPICredentialCredentialID",
		Method:             "DELETE",
		PathPattern:        "/me/api/credential/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAPICredentialCredentialIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAPICredentialCredentialIDOK), nil

}

/*
DeleteMeAccessRestrictionBackupCode deletes this two factor

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAccessRestrictionBackupCode(params *DeleteMeAccessRestrictionBackupCodeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAccessRestrictionBackupCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAccessRestrictionBackupCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAccessRestrictionBackupCode",
		Method:             "DELETE",
		PathPattern:        "/me/accessRestriction/backupCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAccessRestrictionBackupCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAccessRestrictionBackupCodeOK), nil

}

/*
DeleteMeAccessRestrictionIPID deletes this restriction rule

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAccessRestrictionIPID(params *DeleteMeAccessRestrictionIPIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAccessRestrictionIPIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAccessRestrictionIPIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAccessRestrictionIPID",
		Method:             "DELETE",
		PathPattern:        "/me/accessRestriction/ip/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAccessRestrictionIPIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAccessRestrictionIPIDOK), nil

}

/*
DeleteMeAccessRestrictionSmsID deletes this two factor

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAccessRestrictionSmsID(params *DeleteMeAccessRestrictionSmsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAccessRestrictionSmsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAccessRestrictionSmsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAccessRestrictionSmsID",
		Method:             "DELETE",
		PathPattern:        "/me/accessRestriction/sms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAccessRestrictionSmsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAccessRestrictionSmsIDOK), nil

}

/*
DeleteMeAccessRestrictionTotpID deletes this two factor

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAccessRestrictionTotpID(params *DeleteMeAccessRestrictionTotpIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAccessRestrictionTotpIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAccessRestrictionTotpIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAccessRestrictionTotpID",
		Method:             "DELETE",
		PathPattern:        "/me/accessRestriction/totp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAccessRestrictionTotpIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAccessRestrictionTotpIDOK), nil

}

/*
DeleteMeAccessRestrictionU2fID deletes this two factor

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeAccessRestrictionU2fID(params *DeleteMeAccessRestrictionU2fIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeAccessRestrictionU2fIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeAccessRestrictionU2fIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeAccessRestrictionU2fID",
		Method:             "DELETE",
		PathPattern:        "/me/accessRestriction/u2f/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeAccessRestrictionU2fIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeAccessRestrictionU2fIDOK), nil

}

/*
DeleteMeDocumentID deletes a document

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeDocumentID(params *DeleteMeDocumentIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeDocumentID",
		Method:             "DELETE",
		PathPattern:        "/me/document/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeDocumentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeDocumentIDOK), nil

}

/*
DeleteMeFaxCustomDomainsID deletes a custom domain of your fax services

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeFaxCustomDomainsID(params *DeleteMeFaxCustomDomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeFaxCustomDomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeFaxCustomDomainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeFaxCustomDomainsID",
		Method:             "DELETE",
		PathPattern:        "/me/fax/customDomains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeFaxCustomDomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeFaxCustomDomainsIDOK), nil

}

/*
DeleteMeIPXEScriptName removes this IP x e script

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeIPXEScriptName(params *DeleteMeIPXEScriptNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeIPXEScriptNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeIPXEScriptNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeIPXEScriptName",
		Method:             "DELETE",
		PathPattern:        "/me/ipxeScript/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeIPXEScriptNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeIPXEScriptNameOK), nil

}

/*
DeleteMeInstallationTemplateTemplateName removes this template

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeInstallationTemplateTemplateName(params *DeleteMeInstallationTemplateTemplateNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeInstallationTemplateTemplateNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeInstallationTemplateTemplateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeInstallationTemplateTemplateName",
		Method:             "DELETE",
		PathPattern:        "/me/installationTemplate/{templateName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeInstallationTemplateTemplateNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeInstallationTemplateTemplateNameOK), nil

}

/*
DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName removes this scheme of partition

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(params *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeName",
		Method:             "DELETE",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK), nil

}

/*
DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName removes this r a ID

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(params *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName",
		Method:             "DELETE",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK), nil

}

/*
DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint removes this partition

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(params *DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint",
		Method:             "DELETE",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK), nil

}

/*
DeleteMePaymentMeanBankAccountID disables payment through this account

PRODUCTION - authentication required
*/
func (a *Client) DeleteMePaymentMeanBankAccountID(params *DeleteMePaymentMeanBankAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMePaymentMeanBankAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMePaymentMeanBankAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMePaymentMeanBankAccountID",
		Method:             "DELETE",
		PathPattern:        "/me/paymentMean/bankAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMePaymentMeanBankAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMePaymentMeanBankAccountIDOK), nil

}

/*
DeleteMePaymentMeanCreditCardID disables payment through this credit card

PRODUCTION - authentication required
*/
func (a *Client) DeleteMePaymentMeanCreditCardID(params *DeleteMePaymentMeanCreditCardIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMePaymentMeanCreditCardIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMePaymentMeanCreditCardIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMePaymentMeanCreditCardID",
		Method:             "DELETE",
		PathPattern:        "/me/paymentMean/creditCard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMePaymentMeanCreditCardIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMePaymentMeanCreditCardIDOK), nil

}

/*
DeleteMePaymentMeanPaypalID disables payment through this pay pal account

PRODUCTION - authentication required
*/
func (a *Client) DeleteMePaymentMeanPaypalID(params *DeleteMePaymentMeanPaypalIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMePaymentMeanPaypalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMePaymentMeanPaypalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMePaymentMeanPaypalID",
		Method:             "DELETE",
		PathPattern:        "/me/paymentMean/paypal/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMePaymentMeanPaypalIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMePaymentMeanPaypalIDOK), nil

}

/*
DeleteMeSSHKeyKeyName removes this public SSH key

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeSSHKeyKeyName(params *DeleteMeSSHKeyKeyNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeSSHKeyKeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeSSHKeyKeyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeSSHKeyKeyName",
		Method:             "DELETE",
		PathPattern:        "/me/sshKey/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeSSHKeyKeyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeSSHKeyKeyNameOK), nil

}

/*
DeleteMeTelephonyDefaultIPRestrictionID deletes a default IP restriction for your future vo IP lines

PRODUCTION - authentication required
*/
func (a *Client) DeleteMeTelephonyDefaultIPRestrictionID(params *DeleteMeTelephonyDefaultIPRestrictionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMeTelephonyDefaultIPRestrictionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMeTelephonyDefaultIPRestrictionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMeTelephonyDefaultIPRestrictionID",
		Method:             "DELETE",
		PathPattern:        "/me/telephony/defaultIpRestriction/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMeTelephonyDefaultIPRestrictionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMeTelephonyDefaultIPRestrictionIDOK), nil

}

/*
GetMe gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMe(params *GetMeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMe",
		Method:             "GET",
		PathPattern:        "/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOK), nil

}

/*
GetMeAPIApplication lists of your Api application

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPIApplication(params *GetMeAPIApplicationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPIApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPIApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPIApplication",
		Method:             "GET",
		PathPattern:        "/me/api/application",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPIApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPIApplicationOK), nil

}

/*
GetMeAPIApplicationApplicationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPIApplicationApplicationID(params *GetMeAPIApplicationApplicationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPIApplicationApplicationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPIApplicationApplicationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPIApplicationApplicationID",
		Method:             "GET",
		PathPattern:        "/me/api/application/{applicationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPIApplicationApplicationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPIApplicationApplicationIDOK), nil

}

/*
GetMeAPICredential lists of your Api credentials

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPICredential(params *GetMeAPICredentialParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPICredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPICredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPICredential",
		Method:             "GET",
		PathPattern:        "/me/api/credential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPICredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPICredentialOK), nil

}

/*
GetMeAPICredentialCredentialID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPICredentialCredentialID(params *GetMeAPICredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPICredentialCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPICredentialCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPICredentialCredentialID",
		Method:             "GET",
		PathPattern:        "/me/api/credential/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPICredentialCredentialIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPICredentialCredentialIDOK), nil

}

/*
GetMeAPICredentialCredentialIDApplication gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPICredentialCredentialIDApplication(params *GetMeAPICredentialCredentialIDApplicationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPICredentialCredentialIDApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPICredentialCredentialIDApplicationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPICredentialCredentialIDApplication",
		Method:             "GET",
		PathPattern:        "/me/api/credential/{credentialId}/application",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPICredentialCredentialIDApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPICredentialCredentialIDApplicationOK), nil

}

/*
GetMeAPILogsSelf lists of Api calls done with your account

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPILogsSelf(params *GetMeAPILogsSelfParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPILogsSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPILogsSelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPILogsSelf",
		Method:             "GET",
		PathPattern:        "/me/api/logs/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPILogsSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPILogsSelfOK), nil

}

/*
GetMeAPILogsSelfLogID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPILogsSelfLogID(params *GetMeAPILogsSelfLogIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPILogsSelfLogIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPILogsSelfLogIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPILogsSelfLogID",
		Method:             "GET",
		PathPattern:        "/me/api/logs/self/{logId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPILogsSelfLogIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPILogsSelfLogIDOK), nil

}

/*
GetMeAPILogsServices lists of Api calls done on services you have access to

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPILogsServices(params *GetMeAPILogsServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPILogsServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPILogsServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPILogsServices",
		Method:             "GET",
		PathPattern:        "/me/api/logs/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPILogsServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPILogsServicesOK), nil

}

/*
GetMeAPILogsServicesLogID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAPILogsServicesLogID(params *GetMeAPILogsServicesLogIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAPILogsServicesLogIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAPILogsServicesLogIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAPILogsServicesLogID",
		Method:             "GET",
		PathPattern:        "/me/api/logs/services/{logId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAPILogsServicesLogIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAPILogsServicesLogIDOK), nil

}

/*
GetMeAccessRestrictionBackupCode gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionBackupCode(params *GetMeAccessRestrictionBackupCodeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionBackupCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionBackupCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionBackupCode",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/backupCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionBackupCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionBackupCodeOK), nil

}

/*
GetMeAccessRestrictionDeveloperMode gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionDeveloperMode(params *GetMeAccessRestrictionDeveloperModeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionDeveloperModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionDeveloperModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionDeveloperMode",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/developerMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionDeveloperModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionDeveloperModeOK), nil

}

/*
GetMeAccessRestrictionIP lists of IP restrictions

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionIP(params *GetMeAccessRestrictionIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionIP",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionIPOK), nil

}

/*
GetMeAccessRestrictionIPDefaultRule gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionIPDefaultRule(params *GetMeAccessRestrictionIPDefaultRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionIPDefaultRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionIPDefaultRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionIPDefaultRule",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/ipDefaultRule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionIPDefaultRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionIPDefaultRuleOK), nil

}

/*
GetMeAccessRestrictionIPID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionIPID(params *GetMeAccessRestrictionIPIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionIPIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionIPIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionIPID",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/ip/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionIPIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionIPIDOK), nil

}

/*
GetMeAccessRestrictionSms lists of sms accounts

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionSms(params *GetMeAccessRestrictionSmsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionSmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionSms",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionSmsOK), nil

}

/*
GetMeAccessRestrictionSmsID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionSmsID(params *GetMeAccessRestrictionSmsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionSmsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionSmsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionSmsID",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/sms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionSmsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionSmsIDOK), nil

}

/*
GetMeAccessRestrictionTotp lists of t o t p accounts

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionTotp(params *GetMeAccessRestrictionTotpParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionTotp",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionTotpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionTotpOK), nil

}

/*
GetMeAccessRestrictionTotpID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionTotpID(params *GetMeAccessRestrictionTotpIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionTotpIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionTotpIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionTotpID",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/totp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionTotpIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionTotpIDOK), nil

}

/*
GetMeAccessRestrictionU2f lists of u2 f accounts

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionU2f(params *GetMeAccessRestrictionU2fParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionU2fOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionU2fParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionU2f",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/u2f",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionU2fReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionU2fOK), nil

}

/*
GetMeAccessRestrictionU2fID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAccessRestrictionU2fID(params *GetMeAccessRestrictionU2fIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAccessRestrictionU2fIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAccessRestrictionU2fIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAccessRestrictionU2fID",
		Method:             "GET",
		PathPattern:        "/me/accessRestriction/u2f/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAccessRestrictionU2fIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAccessRestrictionU2fIDOK), nil

}

/*
GetMeAgreements lists of contracts signed between you and o v h

PRODUCTION - authentication required
*/
func (a *Client) GetMeAgreements(params *GetMeAgreementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAgreementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAgreementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAgreements",
		Method:             "GET",
		PathPattern:        "/me/agreements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAgreementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAgreementsOK), nil

}

/*
GetMeAgreementsID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAgreementsID(params *GetMeAgreementsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAgreementsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAgreementsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAgreementsID",
		Method:             "GET",
		PathPattern:        "/me/agreements/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAgreementsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAgreementsIDOK), nil

}

/*
GetMeAgreementsIDContract gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAgreementsIDContract(params *GetMeAgreementsIDContractParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAgreementsIDContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAgreementsIDContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAgreementsIDContract",
		Method:             "GET",
		PathPattern:        "/me/agreements/{id}/contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAgreementsIDContractReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAgreementsIDContractOK), nil

}

/*
GetMeAutorenew gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeAutorenew(params *GetMeAutorenewParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAutorenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAutorenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAutorenew",
		Method:             "GET",
		PathPattern:        "/me/autorenew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAutorenewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAutorenewOK), nil

}

/*
GetMeAvailableAutomaticPaymentMeans lists available payment methods in this nic s country

PRODUCTION - authentication required
*/
func (a *Client) GetMeAvailableAutomaticPaymentMeans(params *GetMeAvailableAutomaticPaymentMeansParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeAvailableAutomaticPaymentMeansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeAvailableAutomaticPaymentMeansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeAvailableAutomaticPaymentMeans",
		Method:             "GET",
		PathPattern:        "/me/availableAutomaticPaymentMeans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeAvailableAutomaticPaymentMeansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeAvailableAutomaticPaymentMeansOK), nil

}

/*
GetMeBill lists of all the bills the logged account has

PRODUCTION - authentication required
*/
func (a *Client) GetMeBill(params *GetMeBillParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBill",
		Method:             "GET",
		PathPattern:        "/me/bill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillOK), nil

}

/*
GetMeBillBillID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillID(params *GetMeBillBillIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillID",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDOK), nil

}

/*
GetMeBillBillIDDebt gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDebt(params *GetMeBillBillIDDebtParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDebtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDebtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDebt",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/debt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDebtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDebtOK), nil

}

/*
GetMeBillBillIDDebtOperation alls operations related to these debts

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDebtOperation(params *GetMeBillBillIDDebtOperationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDebtOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDebtOperationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDebtOperation",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/debt/operation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDebtOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDebtOperationOK), nil

}

/*
GetMeBillBillIDDebtOperationOperationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDebtOperationOperationID(params *GetMeBillBillIDDebtOperationOperationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDebtOperationOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDebtOperationOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDebtOperationOperationID",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/debt/operation/{operationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDebtOperationOperationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDebtOperationOperationIDOK), nil

}

/*
GetMeBillBillIDDebtOperationOperationIDAssociatedObject returns main data about the object related to this debt operation

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDebtOperationOperationIDAssociatedObject(params *GetMeBillBillIDDebtOperationOperationIDAssociatedObjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDebtOperationOperationIDAssociatedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDebtOperationOperationIDAssociatedObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDebtOperationOperationIDAssociatedObject",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/debt/operation/{operationId}/associatedObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDebtOperationOperationIDAssociatedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDebtOperationOperationIDAssociatedObjectOK), nil

}

/*
GetMeBillBillIDDetails gives access to all entries of the bill

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDetails(params *GetMeBillBillIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDetails",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDetailsOK), nil

}

/*
GetMeBillBillIDDetailsBillDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDDetailsBillDetailID(params *GetMeBillBillIDDetailsBillDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDDetailsBillDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDDetailsBillDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDDetailsBillDetailID",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/details/{billDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDDetailsBillDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDDetailsBillDetailIDOK), nil

}

/*
GetMeBillBillIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeBillBillIDPayment(params *GetMeBillBillIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeBillBillIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeBillBillIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeBillBillIDPayment",
		Method:             "GET",
		PathPattern:        "/me/bill/{billId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeBillBillIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeBillBillIDPaymentOK), nil

}

/*
GetMeCertificates gets all certificates of the account

PRODUCTION - authentication required
*/
func (a *Client) GetMeCertificates(params *GetMeCertificatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeCertificates",
		Method:             "GET",
		PathPattern:        "/me/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeCertificatesOK), nil

}

/*
GetMeContact retrieves all contact that you created

PRODUCTION - authentication required
*/
func (a *Client) GetMeContact(params *GetMeContactParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeContact",
		Method:             "GET",
		PathPattern:        "/me/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeContactOK), nil

}

/*
GetMeContactContactID retrieves information about a contact

PRODUCTION - authentication required
*/
func (a *Client) GetMeContactContactID(params *GetMeContactContactIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeContactContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeContactContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeContactContactID",
		Method:             "GET",
		PathPattern:        "/me/contact/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeContactContactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeContactContactIDOK), nil

}

/*
GetMeContactContactIDFields displays mandatory read only informations of a contact

PRODUCTION - authentication required
*/
func (a *Client) GetMeContactContactIDFields(params *GetMeContactContactIDFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeContactContactIDFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeContactContactIDFieldsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeContactContactIDFields",
		Method:             "GET",
		PathPattern:        "/me/contact/{contactId}/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeContactContactIDFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeContactContactIDFieldsOK), nil

}

/*
GetMeCreditBalance retrieves credit balance names

PRODUCTION - authentication required
*/
func (a *Client) GetMeCreditBalance(params *GetMeCreditBalanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeCreditBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeCreditBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeCreditBalance",
		Method:             "GET",
		PathPattern:        "/me/credit/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeCreditBalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeCreditBalanceOK), nil

}

/*
GetMeCreditBalanceBalanceName retrieves a credit balance

PRODUCTION - authentication required
*/
func (a *Client) GetMeCreditBalanceBalanceName(params *GetMeCreditBalanceBalanceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeCreditBalanceBalanceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeCreditBalanceBalanceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeCreditBalanceBalanceName",
		Method:             "GET",
		PathPattern:        "/me/credit/balance/{balanceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeCreditBalanceBalanceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeCreditBalanceBalanceNameOK), nil

}

/*
GetMeCreditBalanceBalanceNameMouvement retrieves mouvements for a specific balance

PRODUCTION - authentication required
*/
func (a *Client) GetMeCreditBalanceBalanceNameMouvement(params *GetMeCreditBalanceBalanceNameMouvementParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeCreditBalanceBalanceNameMouvementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeCreditBalanceBalanceNameMouvementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeCreditBalanceBalanceNameMouvement",
		Method:             "GET",
		PathPattern:        "/me/credit/balance/{balanceName}/mouvement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeCreditBalanceBalanceNameMouvementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeCreditBalanceBalanceNameMouvementOK), nil

}

/*
GetMeCreditBalanceBalanceNameMouvementMouvementID retrieves a specific mouvement for a credit balance

PRODUCTION - authentication required
*/
func (a *Client) GetMeCreditBalanceBalanceNameMouvementMouvementID(params *GetMeCreditBalanceBalanceNameMouvementMouvementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeCreditBalanceBalanceNameMouvementMouvementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeCreditBalanceBalanceNameMouvementMouvementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeCreditBalanceBalanceNameMouvementMouvementID",
		Method:             "GET",
		PathPattern:        "/me/credit/balance/{balanceName}/mouvement/{mouvementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeCreditBalanceBalanceNameMouvementMouvementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeCreditBalanceBalanceNameMouvementMouvementIDOK), nil

}

/*
GetMeDebtAccount gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccount(params *GetMeDebtAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccount",
		Method:             "GET",
		PathPattern:        "/me/debtAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountOK), nil

}

/*
GetMeDebtAccountDebt alls debts related to your account

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccountDebt(params *GetMeDebtAccountDebtParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountDebtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountDebtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccountDebt",
		Method:             "GET",
		PathPattern:        "/me/debtAccount/debt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountDebtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountDebtOK), nil

}

/*
GetMeDebtAccountDebtDebtID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccountDebtDebtID(params *GetMeDebtAccountDebtDebtIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountDebtDebtIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountDebtDebtIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccountDebtDebtID",
		Method:             "GET",
		PathPattern:        "/me/debtAccount/debt/{debtId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountDebtDebtIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountDebtDebtIDOK), nil

}

/*
GetMeDebtAccountDebtDebtIDOperation alls operations related to these debts

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccountDebtDebtIDOperation(params *GetMeDebtAccountDebtDebtIDOperationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountDebtDebtIDOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountDebtDebtIDOperationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccountDebtDebtIDOperation",
		Method:             "GET",
		PathPattern:        "/me/debtAccount/debt/{debtId}/operation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountDebtDebtIDOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountDebtDebtIDOperationOK), nil

}

/*
GetMeDebtAccountDebtDebtIDOperationOperationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccountDebtDebtIDOperationOperationID(params *GetMeDebtAccountDebtDebtIDOperationOperationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountDebtDebtIDOperationOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountDebtDebtIDOperationOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccountDebtDebtIDOperationOperationID",
		Method:             "GET",
		PathPattern:        "/me/debtAccount/debt/{debtId}/operation/{operationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountDebtDebtIDOperationOperationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountDebtDebtIDOperationOperationIDOK), nil

}

/*
GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObject returns main data about the object related to this debt operation

PRODUCTION - authentication required
*/
func (a *Client) GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObject(params *GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObject",
		Method:             "GET",
		PathPattern:        "/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDebtAccountDebtDebtIDOperationOperationIDAssociatedObjectOK), nil

}

/*
GetMeDeposit lists of all the deposits made to your prepaid account or debt account

PRODUCTION - authentication required
*/
func (a *Client) GetMeDeposit(params *GetMeDepositParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDeposit",
		Method:             "GET",
		PathPattern:        "/me/deposit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositOK), nil

}

/*
GetMeDepositDepositID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositID(params *GetMeDepositDepositIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositID",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDOK), nil

}

/*
GetMeDepositDepositIDDetails gives access to all entries of this deposit

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDDetails(params *GetMeDepositDepositIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDDetails",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDDetailsOK), nil

}

/*
GetMeDepositDepositIDDetailsDepositDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDDetailsDepositDetailID(params *GetMeDepositDepositIDDetailsDepositDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDDetailsDepositDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDDetailsDepositDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDDetailsDepositDetailID",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/details/{depositDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDDetailsDepositDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDDetailsDepositDetailIDOK), nil

}

/*
GetMeDepositDepositIDPaidBills gets invoices paid by this deposit

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBills(params *GetMeDepositDepositIDPaidBillsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBills",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillID(params *GetMeDepositDepositIDPaidBillsBillIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillID",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDebt gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDebt(params *GetMeDepositDepositIDPaidBillsBillIDDebtParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDebtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDebtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDebt",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/debt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDebtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDebtOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDebtOperation alls operations related to these debts

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDebtOperation(params *GetMeDepositDepositIDPaidBillsBillIDDebtOperationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDebtOperationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDebtOperation",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/debt/operation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDebtOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationID(params *GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationID",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObject returns main data about the object related to this debt operation

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObject(params *GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObject",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDebtOperationOperationIDAssociatedObjectOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDetails gives access to all entries of the bill

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDetails(params *GetMeDepositDepositIDPaidBillsBillIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDetails",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDetailsOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailID(params *GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailID",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDDetailsBillDetailIDOK), nil

}

/*
GetMeDepositDepositIDPaidBillsBillIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPaidBillsBillIDPayment(params *GetMeDepositDepositIDPaidBillsBillIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaidBillsBillIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaidBillsBillIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPaidBillsBillIDPayment",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaidBillsBillIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaidBillsBillIDPaymentOK), nil

}

/*
GetMeDepositDepositIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDepositDepositIDPayment(params *GetMeDepositDepositIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDepositDepositIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDepositDepositIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDepositDepositIDPayment",
		Method:             "GET",
		PathPattern:        "/me/deposit/{depositId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDepositDepositIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDepositDepositIDPaymentOK), nil

}

/*
GetMeDocument lists of documents added in your account

PRODUCTION - authentication required
*/
func (a *Client) GetMeDocument(params *GetMeDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDocument",
		Method:             "GET",
		PathPattern:        "/me/document",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDocumentOK), nil

}

/*
GetMeDocumentID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeDocumentID(params *GetMeDocumentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeDocumentID",
		Method:             "GET",
		PathPattern:        "/me/document/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeDocumentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeDocumentIDOK), nil

}

/*
GetMeFaxCustomDomains gets the fax custom domains linked to the customer account

PRODUCTION - authentication required
*/
func (a *Client) GetMeFaxCustomDomains(params *GetMeFaxCustomDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeFaxCustomDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeFaxCustomDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeFaxCustomDomains",
		Method:             "GET",
		PathPattern:        "/me/fax/customDomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeFaxCustomDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeFaxCustomDomainsOK), nil

}

/*
GetMeFaxCustomDomainsID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeFaxCustomDomainsID(params *GetMeFaxCustomDomainsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeFaxCustomDomainsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeFaxCustomDomainsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeFaxCustomDomainsID",
		Method:             "GET",
		PathPattern:        "/me/fax/customDomains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeFaxCustomDomainsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeFaxCustomDomainsIDOK), nil

}

/*
GetMeFidelityAccount gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeFidelityAccount(params *GetMeFidelityAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeFidelityAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeFidelityAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeFidelityAccount",
		Method:             "GET",
		PathPattern:        "/me/fidelityAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeFidelityAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeFidelityAccountOK), nil

}

/*
GetMeFidelityAccountMovements lists of entries of the fidelity account

PRODUCTION - authentication required
*/
func (a *Client) GetMeFidelityAccountMovements(params *GetMeFidelityAccountMovementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeFidelityAccountMovementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeFidelityAccountMovementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeFidelityAccountMovements",
		Method:             "GET",
		PathPattern:        "/me/fidelityAccount/movements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeFidelityAccountMovementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeFidelityAccountMovementsOK), nil

}

/*
GetMeFidelityAccountMovementsMovementID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeFidelityAccountMovementsMovementID(params *GetMeFidelityAccountMovementsMovementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeFidelityAccountMovementsMovementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeFidelityAccountMovementsMovementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeFidelityAccountMovementsMovementID",
		Method:             "GET",
		PathPattern:        "/me/fidelityAccount/movements/{movementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeFidelityAccountMovementsMovementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeFidelityAccountMovementsMovementIDOK), nil

}

/*
GetMeIPOrganisation lists of organisations

PRODUCTION - authentication required
*/
func (a *Client) GetMeIPOrganisation(params *GetMeIPOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeIPOrganisationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeIPOrganisationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeIPOrganisation",
		Method:             "GET",
		PathPattern:        "/me/ipOrganisation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeIPOrganisationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeIPOrganisationOK), nil

}

/*
GetMeIPOrganisationOrganisationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeIPOrganisationOrganisationID(params *GetMeIPOrganisationOrganisationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeIPOrganisationOrganisationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeIPOrganisationOrganisationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeIPOrganisationOrganisationID",
		Method:             "GET",
		PathPattern:        "/me/ipOrganisation/{organisationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeIPOrganisationOrganisationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeIPOrganisationOrganisationIDOK), nil

}

/*
GetMeIPXEScript lists of all your IP x e scripts

PRODUCTION - authentication required
*/
func (a *Client) GetMeIPXEScript(params *GetMeIPXEScriptParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeIPXEScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeIPXEScriptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeIPXEScript",
		Method:             "GET",
		PathPattern:        "/me/ipxeScript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeIPXEScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeIPXEScriptOK), nil

}

/*
GetMeIPXEScriptName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeIPXEScriptName(params *GetMeIPXEScriptNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeIPXEScriptNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeIPXEScriptNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeIPXEScriptName",
		Method:             "GET",
		PathPattern:        "/me/ipxeScript/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeIPXEScriptNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeIPXEScriptNameOK), nil

}

/*
GetMeInstallationTemplate yours customized operating system installation templates

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplate(params *GetMeInstallationTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplate",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateOK), nil

}

/*
GetMeInstallationTemplateTemplateName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateName(params *GetMeInstallationTemplateTemplateNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateName",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNameOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionScheme partitionings schemes available on this template

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionScheme(params *GetMeInstallationTemplateTemplateNamePartitionSchemeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionScheme",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(params *GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeName",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid hardwares r a ids defined in this partitioning scheme

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid(params *GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(params *GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition partitions defined in this partitioning scheme

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition(params *GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionOK), nil

}

/*
GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(params *GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint",
		Method:             "GET",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK), nil

}

/*
GetMeMailingListAvailableLists lists of mailing list you can subscribe

PRODUCTION - authentication required
*/
func (a *Client) GetMeMailingListAvailableLists(params *GetMeMailingListAvailableListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeMailingListAvailableListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeMailingListAvailableListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeMailingListAvailableLists",
		Method:             "GET",
		PathPattern:        "/me/mailingList/availableLists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeMailingListAvailableListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeMailingListAvailableListsOK), nil

}

/*
GetMeNotificationEmailHistory lists of all your email notifications

PRODUCTION - authentication required
*/
func (a *Client) GetMeNotificationEmailHistory(params *GetMeNotificationEmailHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeNotificationEmailHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeNotificationEmailHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeNotificationEmailHistory",
		Method:             "GET",
		PathPattern:        "/me/notification/email/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeNotificationEmailHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeNotificationEmailHistoryOK), nil

}

/*
GetMeNotificationEmailHistoryID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeNotificationEmailHistoryID(params *GetMeNotificationEmailHistoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeNotificationEmailHistoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeNotificationEmailHistoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeNotificationEmailHistoryID",
		Method:             "GET",
		PathPattern:        "/me/notification/email/history/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeNotificationEmailHistoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeNotificationEmailHistoryIDOK), nil

}

/*
GetMeOrder lists of all the orders the logged account has

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrder(params *GetMeOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrder",
		Method:             "GET",
		PathPattern:        "/me/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOK), nil

}

/*
GetMeOrderOrderID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderID(params *GetMeOrderOrderIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderID",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDOK), nil

}

/*
GetMeOrderOrderIDAssociatedObject returns main data about the object the processing of the order generated

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDAssociatedObject(params *GetMeOrderOrderIDAssociatedObjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDAssociatedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDAssociatedObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDAssociatedObject",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/associatedObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDAssociatedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDAssociatedObjectOK), nil

}

/*
GetMeOrderOrderIDAvailableRegisteredPaymentMean lists of registered payment mean you can use to pay this order

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDAvailableRegisteredPaymentMean(params *GetMeOrderOrderIDAvailableRegisteredPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDAvailableRegisteredPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDAvailableRegisteredPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDAvailableRegisteredPaymentMean",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/availableRegisteredPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDAvailableRegisteredPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDAvailableRegisteredPaymentMeanOK), nil

}

/*
GetMeOrderOrderIDBill gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDBill(params *GetMeOrderOrderIDBillParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDBillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDBillParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDBill",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/bill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDBillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDBillOK), nil

}

/*
GetMeOrderOrderIDDebt gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDebt(params *GetMeOrderOrderIDDebtParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDebtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDebtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDebt",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/debt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDebtReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDebtOK), nil

}

/*
GetMeOrderOrderIDDebtOperation alls operations related to these debts

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDebtOperation(params *GetMeOrderOrderIDDebtOperationParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDebtOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDebtOperationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDebtOperation",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/debt/operation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDebtOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDebtOperationOK), nil

}

/*
GetMeOrderOrderIDDebtOperationOperationID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDebtOperationOperationID(params *GetMeOrderOrderIDDebtOperationOperationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDebtOperationOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDebtOperationOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDebtOperationOperationID",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/debt/operation/{operationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDebtOperationOperationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDebtOperationOperationIDOK), nil

}

/*
GetMeOrderOrderIDDebtOperationOperationIDAssociatedObject returns main data about the object related to this debt operation

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDebtOperationOperationIDAssociatedObject(params *GetMeOrderOrderIDDebtOperationOperationIDAssociatedObjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDebtOperationOperationIDAssociatedObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDebtOperationOperationIDAssociatedObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDebtOperationOperationIDAssociatedObject",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/debt/operation/{operationId}/associatedObject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDebtOperationOperationIDAssociatedObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDebtOperationOperationIDAssociatedObjectOK), nil

}

/*
GetMeOrderOrderIDDetails gives access to all entries of the order

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDetails(params *GetMeOrderOrderIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDetails",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDetailsOK), nil

}

/*
GetMeOrderOrderIDDetailsOrderDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDDetailsOrderDetailID(params *GetMeOrderOrderIDDetailsOrderDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDetailsOrderDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDetailsOrderDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDetailsOrderDetailID",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/details/{orderDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDetailsOrderDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDetailsOrderDetailIDOK), nil

}

/*
GetMeOrderOrderIDDetailsOrderDetailIDExtension gets this object properties

BETA - authentication required
*/
func (a *Client) GetMeOrderOrderIDDetailsOrderDetailIDExtension(params *GetMeOrderOrderIDDetailsOrderDetailIDExtensionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDDetailsOrderDetailIDExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDDetailsOrderDetailIDExtensionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDDetailsOrderDetailIDExtension",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/details/{orderDetailId}/extension",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDDetailsOrderDetailIDExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDDetailsOrderDetailIDExtensionOK), nil

}

/*
GetMeOrderOrderIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDPayment(params *GetMeOrderOrderIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDPayment",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDPaymentOK), nil

}

/*
GetMeOrderOrderIDPaymentMeans returns main data about the object the processing of the order generated

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDPaymentMeans(params *GetMeOrderOrderIDPaymentMeansParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDPaymentMeansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDPaymentMeansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDPaymentMeans",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/paymentMeans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDPaymentMeansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDPaymentMeansOK), nil

}

/*
GetMeOrderOrderIDRefund gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDRefund(params *GetMeOrderOrderIDRefundParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDRefund",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDRefundOK), nil

}

/*
GetMeOrderOrderIDStatus returns status of order

PRODUCTION - authentication required
*/
func (a *Client) GetMeOrderOrderIDStatus(params *GetMeOrderOrderIDStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOrderOrderIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOrderOrderIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOrderOrderIDStatus",
		Method:             "GET",
		PathPattern:        "/me/order/{orderId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOrderOrderIDStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOrderOrderIDStatusOK), nil

}

/*
GetMeOvhAccount lists of o v h accounts the logged account has

PRODUCTION - authentication required
*/
func (a *Client) GetMeOvhAccount(params *GetMeOvhAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOvhAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOvhAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOvhAccount",
		Method:             "GET",
		PathPattern:        "/me/ovhAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOvhAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOvhAccountOK), nil

}

/*
GetMeOvhAccountOvhAccountID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOvhAccountOvhAccountID(params *GetMeOvhAccountOvhAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOvhAccountOvhAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOvhAccountOvhAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOvhAccountOvhAccountID",
		Method:             "GET",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOvhAccountOvhAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOvhAccountOvhAccountIDOK), nil

}

/*
GetMeOvhAccountOvhAccountIDMovements details about an entry of the o v h account

PRODUCTION - authentication required
*/
func (a *Client) GetMeOvhAccountOvhAccountIDMovements(params *GetMeOvhAccountOvhAccountIDMovementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOvhAccountOvhAccountIDMovementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOvhAccountOvhAccountIDMovementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOvhAccountOvhAccountIDMovements",
		Method:             "GET",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}/movements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOvhAccountOvhAccountIDMovementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOvhAccountOvhAccountIDMovementsOK), nil

}

/*
GetMeOvhAccountOvhAccountIDMovementsMovementID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeOvhAccountOvhAccountIDMovementsMovementID(params *GetMeOvhAccountOvhAccountIDMovementsMovementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeOvhAccountOvhAccountIDMovementsMovementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeOvhAccountOvhAccountIDMovementsMovementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeOvhAccountOvhAccountIDMovementsMovementID",
		Method:             "GET",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}/movements/{movementId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeOvhAccountOvhAccountIDMovementsMovementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeOvhAccountOvhAccountIDMovementsMovementIDOK), nil

}

/*
GetMePaymentMeanBankAccount lists of bank accounts

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanBankAccount(params *GetMePaymentMeanBankAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanBankAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanBankAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanBankAccount",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/bankAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanBankAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanBankAccountOK), nil

}

/*
GetMePaymentMeanBankAccountID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanBankAccountID(params *GetMePaymentMeanBankAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanBankAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanBankAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanBankAccountID",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/bankAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanBankAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanBankAccountIDOK), nil

}

/*
GetMePaymentMeanCreditCard lists of credit cards

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanCreditCard(params *GetMePaymentMeanCreditCardParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanCreditCard",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/creditCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanCreditCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanCreditCardOK), nil

}

/*
GetMePaymentMeanCreditCardID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanCreditCardID(params *GetMePaymentMeanCreditCardIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanCreditCardIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanCreditCardIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanCreditCardID",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/creditCard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanCreditCardIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanCreditCardIDOK), nil

}

/*
GetMePaymentMeanDeferredPaymentAccount lists of authorized deferred payment account for this customer

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanDeferredPaymentAccount(params *GetMePaymentMeanDeferredPaymentAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanDeferredPaymentAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanDeferredPaymentAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanDeferredPaymentAccount",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/deferredPaymentAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanDeferredPaymentAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanDeferredPaymentAccountOK), nil

}

/*
GetMePaymentMeanDeferredPaymentAccountID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanDeferredPaymentAccountID(params *GetMePaymentMeanDeferredPaymentAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanDeferredPaymentAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanDeferredPaymentAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanDeferredPaymentAccountID",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/deferredPaymentAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanDeferredPaymentAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanDeferredPaymentAccountIDOK), nil

}

/*
GetMePaymentMeanPaypal lists of paypal accounts usable for payments on this account

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanPaypal(params *GetMePaymentMeanPaypalParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanPaypalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanPaypalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanPaypal",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/paypal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanPaypalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanPaypalOK), nil

}

/*
GetMePaymentMeanPaypalID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMePaymentMeanPaypalID(params *GetMePaymentMeanPaypalIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMePaymentMeanPaypalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMePaymentMeanPaypalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMePaymentMeanPaypalID",
		Method:             "GET",
		PathPattern:        "/me/paymentMean/paypal/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMePaymentMeanPaypalIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMePaymentMeanPaypalIDOK), nil

}

/*
GetMeRefund lists of all the refunds the logged account has

PRODUCTION - authentication required
*/
func (a *Client) GetMeRefund(params *GetMeRefundParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeRefundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeRefundParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeRefund",
		Method:             "GET",
		PathPattern:        "/me/refund",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeRefundReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeRefundOK), nil

}

/*
GetMeRefundRefundID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeRefundRefundID(params *GetMeRefundRefundIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeRefundRefundIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeRefundRefundIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeRefundRefundID",
		Method:             "GET",
		PathPattern:        "/me/refund/{refundId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeRefundRefundIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeRefundRefundIDOK), nil

}

/*
GetMeRefundRefundIDDetails gives access to all entries of the refund

PRODUCTION - authentication required
*/
func (a *Client) GetMeRefundRefundIDDetails(params *GetMeRefundRefundIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeRefundRefundIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeRefundRefundIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeRefundRefundIDDetails",
		Method:             "GET",
		PathPattern:        "/me/refund/{refundId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeRefundRefundIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeRefundRefundIDDetailsOK), nil

}

/*
GetMeRefundRefundIDDetailsRefundDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeRefundRefundIDDetailsRefundDetailID(params *GetMeRefundRefundIDDetailsRefundDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeRefundRefundIDDetailsRefundDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeRefundRefundIDDetailsRefundDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeRefundRefundIDDetailsRefundDetailID",
		Method:             "GET",
		PathPattern:        "/me/refund/{refundId}/details/{refundDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeRefundRefundIDDetailsRefundDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeRefundRefundIDDetailsRefundDetailIDOK), nil

}

/*
GetMeRefundRefundIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeRefundRefundIDPayment(params *GetMeRefundRefundIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeRefundRefundIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeRefundRefundIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeRefundRefundIDPayment",
		Method:             "GET",
		PathPattern:        "/me/refund/{refundId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeRefundRefundIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeRefundRefundIDPaymentOK), nil

}

/*
GetMeSLA lists active SLA

PRODUCTION - authentication required
*/
func (a *Client) GetMeSLA(params *GetMeSLAParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSLAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSLA",
		Method:             "GET",
		PathPattern:        "/me/sla",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSLAOK), nil

}

/*
GetMeSLAID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeSLAID(params *GetMeSLAIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSLAIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSLAIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSLAID",
		Method:             "GET",
		PathPattern:        "/me/sla/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSLAIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSLAIDOK), nil

}

/*
GetMeSLAIDCanBeApplied checks whether this SLA can be applied on your services

PRODUCTION - authentication required
*/
func (a *Client) GetMeSLAIDCanBeApplied(params *GetMeSLAIDCanBeAppliedParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSLAIDCanBeAppliedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSLAIDCanBeAppliedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSLAIDCanBeApplied",
		Method:             "GET",
		PathPattern:        "/me/sla/{id}/canBeApplied",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSLAIDCanBeAppliedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSLAIDCanBeAppliedOK), nil

}

/*
GetMeSLAIDServices gets services impacted by this SLA

PRODUCTION - authentication required
*/
func (a *Client) GetMeSLAIDServices(params *GetMeSLAIDServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSLAIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSLAIDServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSLAIDServices",
		Method:             "GET",
		PathPattern:        "/me/sla/{id}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSLAIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSLAIDServicesOK), nil

}

/*
GetMeSLAIDStatus gets the status request of this SLA

PRODUCTION - authentication required
*/
func (a *Client) GetMeSLAIDStatus(params *GetMeSLAIDStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSLAIDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSLAIDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSLAIDStatus",
		Method:             "GET",
		PathPattern:        "/me/sla/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSLAIDStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSLAIDStatusOK), nil

}

/*
GetMeSSHKey lists of your public SSH keys

PRODUCTION - authentication required
*/
func (a *Client) GetMeSSHKey(params *GetMeSSHKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSSHKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSSHKey",
		Method:             "GET",
		PathPattern:        "/me/sshKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSSHKeyOK), nil

}

/*
GetMeSSHKeyKeyName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeSSHKeyKeyName(params *GetMeSSHKeyKeyNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSSHKeyKeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSSHKeyKeyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSSHKeyKeyName",
		Method:             "GET",
		PathPattern:        "/me/sshKey/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSSHKeyKeyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSSHKeyKeyNameOK), nil

}

/*
GetMeSubAccount lists of sub accounts

PRODUCTION - authentication required
*/
func (a *Client) GetMeSubAccount(params *GetMeSubAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSubAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSubAccount",
		Method:             "GET",
		PathPattern:        "/me/subAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSubAccountOK), nil

}

/*
GetMeSubAccountID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeSubAccountID(params *GetMeSubAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSubAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSubAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSubAccountID",
		Method:             "GET",
		PathPattern:        "/me/subAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSubAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSubAccountIDOK), nil

}

/*
GetMeSubscription lists of all o v h things you can subscribe to

PRODUCTION - authentication required
*/
func (a *Client) GetMeSubscription(params *GetMeSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSubscription",
		Method:             "GET",
		PathPattern:        "/me/subscription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSubscriptionOK), nil

}

/*
GetMeSubscriptionSubscriptionType gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeSubscriptionSubscriptionType(params *GetMeSubscriptionSubscriptionTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeSubscriptionSubscriptionTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeSubscriptionSubscriptionTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeSubscriptionSubscriptionType",
		Method:             "GET",
		PathPattern:        "/me/subscription/{subscriptionType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeSubscriptionSubscriptionTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeSubscriptionSubscriptionTypeOK), nil

}

/*
GetMeTaskContactChange lists of service contact change tasks you are involved in

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskContactChange(params *GetMeTaskContactChangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskContactChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskContactChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskContactChange",
		Method:             "GET",
		PathPattern:        "/me/task/contactChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskContactChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskContactChangeOK), nil

}

/*
GetMeTaskContactChangeID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskContactChangeID(params *GetMeTaskContactChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskContactChangeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskContactChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskContactChangeID",
		Method:             "GET",
		PathPattern:        "/me/task/contactChange/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskContactChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskContactChangeIDOK), nil

}

/*
GetMeTaskDomain lists of domain task

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskDomain(params *GetMeTaskDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskDomain",
		Method:             "GET",
		PathPattern:        "/me/task/domain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskDomainOK), nil

}

/*
GetMeTaskDomainID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskDomainID(params *GetMeTaskDomainIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskDomainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskDomainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskDomainID",
		Method:             "GET",
		PathPattern:        "/me/task/domain/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskDomainIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskDomainIDOK), nil

}

/*
GetMeTaskDomainIDArgument lists of arguments

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskDomainIDArgument(params *GetMeTaskDomainIDArgumentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskDomainIDArgumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskDomainIDArgumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskDomainIDArgument",
		Method:             "GET",
		PathPattern:        "/me/task/domain/{id}/argument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskDomainIDArgumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskDomainIDArgumentOK), nil

}

/*
GetMeTaskDomainIDArgumentKey gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskDomainIDArgumentKey(params *GetMeTaskDomainIDArgumentKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskDomainIDArgumentKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskDomainIDArgumentKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskDomainIDArgumentKey",
		Method:             "GET",
		PathPattern:        "/me/task/domain/{id}/argument/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskDomainIDArgumentKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskDomainIDArgumentKeyOK), nil

}

/*
GetMeTaskDomainIDProgressbar gets this object properties

BETA - authentication required
*/
func (a *Client) GetMeTaskDomainIDProgressbar(params *GetMeTaskDomainIDProgressbarParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskDomainIDProgressbarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskDomainIDProgressbarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskDomainIDProgressbar",
		Method:             "GET",
		PathPattern:        "/me/task/domain/{id}/progressbar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskDomainIDProgressbarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskDomainIDProgressbarOK), nil

}

/*
GetMeTaskEmailChange lists of email change tasks you are involved in

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskEmailChange(params *GetMeTaskEmailChangeParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskEmailChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskEmailChangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskEmailChange",
		Method:             "GET",
		PathPattern:        "/me/task/emailChange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskEmailChangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskEmailChangeOK), nil

}

/*
GetMeTaskEmailChangeID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeTaskEmailChangeID(params *GetMeTaskEmailChangeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTaskEmailChangeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTaskEmailChangeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTaskEmailChangeID",
		Method:             "GET",
		PathPattern:        "/me/task/emailChange/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTaskEmailChangeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTaskEmailChangeIDOK), nil

}

/*
GetMeTelephonyDefaultIPRestriction thes default s IP IP restictions for your future vo IP lines

PRODUCTION - authentication required
*/
func (a *Client) GetMeTelephonyDefaultIPRestriction(params *GetMeTelephonyDefaultIPRestrictionParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTelephonyDefaultIPRestrictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTelephonyDefaultIPRestrictionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTelephonyDefaultIPRestriction",
		Method:             "GET",
		PathPattern:        "/me/telephony/defaultIpRestriction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTelephonyDefaultIPRestrictionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTelephonyDefaultIPRestrictionOK), nil

}

/*
GetMeTelephonyDefaultIPRestrictionID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeTelephonyDefaultIPRestrictionID(params *GetMeTelephonyDefaultIPRestrictionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTelephonyDefaultIPRestrictionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTelephonyDefaultIPRestrictionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTelephonyDefaultIPRestrictionID",
		Method:             "GET",
		PathPattern:        "/me/telephony/defaultIpRestriction/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTelephonyDefaultIPRestrictionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTelephonyDefaultIPRestrictionIDOK), nil

}

/*
GetMeTelephonySettings gets the telephony settings linked to the customer account

PRODUCTION - authentication required
*/
func (a *Client) GetMeTelephonySettings(params *GetMeTelephonySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeTelephonySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeTelephonySettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeTelephonySettings",
		Method:             "GET",
		PathPattern:        "/me/telephony/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeTelephonySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeTelephonySettingsOK), nil

}

/*
GetMeVipStatus vs IP status of this account

PRODUCTION - authentication required
*/
func (a *Client) GetMeVipStatus(params *GetMeVipStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeVipStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeVipStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeVipStatus",
		Method:             "GET",
		PathPattern:        "/me/vipStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeVipStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeVipStatusOK), nil

}

/*
GetMeWithdrawal lists of all the withdrawals made from your prepaid account

PRODUCTION - authentication required
*/
func (a *Client) GetMeWithdrawal(params *GetMeWithdrawalParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWithdrawalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWithdrawal",
		Method:             "GET",
		PathPattern:        "/me/withdrawal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWithdrawalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWithdrawalOK), nil

}

/*
GetMeWithdrawalWithdrawalID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeWithdrawalWithdrawalID(params *GetMeWithdrawalWithdrawalIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWithdrawalWithdrawalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWithdrawalWithdrawalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWithdrawalWithdrawalID",
		Method:             "GET",
		PathPattern:        "/me/withdrawal/{withdrawalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWithdrawalWithdrawalIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWithdrawalWithdrawalIDOK), nil

}

/*
GetMeWithdrawalWithdrawalIDDetails gives access to all entries of this withdrawal

PRODUCTION - authentication required
*/
func (a *Client) GetMeWithdrawalWithdrawalIDDetails(params *GetMeWithdrawalWithdrawalIDDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWithdrawalWithdrawalIDDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWithdrawalWithdrawalIDDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWithdrawalWithdrawalIDDetails",
		Method:             "GET",
		PathPattern:        "/me/withdrawal/{withdrawalId}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWithdrawalWithdrawalIDDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWithdrawalWithdrawalIDDetailsOK), nil

}

/*
GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailID(params *GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailID",
		Method:             "GET",
		PathPattern:        "/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWithdrawalWithdrawalIDDetailsWithdrawalDetailIDOK), nil

}

/*
GetMeWithdrawalWithdrawalIDPayment gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetMeWithdrawalWithdrawalIDPayment(params *GetMeWithdrawalWithdrawalIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeWithdrawalWithdrawalIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeWithdrawalWithdrawalIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeWithdrawalWithdrawalIDPayment",
		Method:             "GET",
		PathPattern:        "/me/withdrawal/{withdrawalId}/payment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeWithdrawalWithdrawalIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeWithdrawalWithdrawalIDPaymentOK), nil

}

/*
GetMeXdslSetting gets xdsl settings linked to the nichandle

PRODUCTION - authentication required
*/
func (a *Client) GetMeXdslSetting(params *GetMeXdslSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetMeXdslSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeXdslSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMeXdslSetting",
		Method:             "GET",
		PathPattern:        "/me/xdsl/setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMeXdslSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeXdslSettingOK), nil

}

/*
PostMeAccessRestrictionBackupCode adds a s o t p access restriction

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionBackupCode(params *PostMeAccessRestrictionBackupCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionBackupCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionBackupCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionBackupCode",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/backupCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionBackupCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionBackupCodeOK), nil

}

/*
PostMeAccessRestrictionBackupCodeDisable disables this s o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionBackupCodeDisable(params *PostMeAccessRestrictionBackupCodeDisableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionBackupCodeDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionBackupCodeDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionBackupCodeDisable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/backupCode/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionBackupCodeDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionBackupCodeDisableOK), nil

}

/*
PostMeAccessRestrictionBackupCodeEnable enables this s o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionBackupCodeEnable(params *PostMeAccessRestrictionBackupCodeEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionBackupCodeEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionBackupCodeEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionBackupCodeEnable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/backupCode/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionBackupCodeEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionBackupCodeEnableOK), nil

}

/*
PostMeAccessRestrictionBackupCodeValidate validates your s o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionBackupCodeValidate(params *PostMeAccessRestrictionBackupCodeValidateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionBackupCodeValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionBackupCodeValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionBackupCodeValidate",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/backupCode/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionBackupCodeValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionBackupCodeValidateOK), nil

}

/*
PostMeAccessRestrictionIP adds an IP access restriction

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionIP(params *PostMeAccessRestrictionIPParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionIP",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionIPOK), nil

}

/*
PostMeAccessRestrictionSms adds a s m s access restriction

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionSms(params *PostMeAccessRestrictionSmsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionSmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionSms",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionSmsOK), nil

}

/*
PostMeAccessRestrictionSmsIDDisable disables this s m s account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionSmsIDDisable(params *PostMeAccessRestrictionSmsIDDisableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionSmsIDDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionSmsIDDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionSmsIDDisable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/sms/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionSmsIDDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionSmsIDDisableOK), nil

}

/*
PostMeAccessRestrictionSmsIDEnable enables this s m s account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionSmsIDEnable(params *PostMeAccessRestrictionSmsIDEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionSmsIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionSmsIDEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionSmsIDEnable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/sms/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionSmsIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionSmsIDEnableOK), nil

}

/*
PostMeAccessRestrictionSmsIDSendCode sends a s m s to this account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionSmsIDSendCode(params *PostMeAccessRestrictionSmsIDSendCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionSmsIDSendCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionSmsIDSendCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionSmsIDSendCode",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/sms/{id}/sendCode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionSmsIDSendCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionSmsIDSendCodeOK), nil

}

/*
PostMeAccessRestrictionSmsIDValidate validates your s m s account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionSmsIDValidate(params *PostMeAccessRestrictionSmsIDValidateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionSmsIDValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionSmsIDValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionSmsIDValidate",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/sms/{id}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionSmsIDValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionSmsIDValidateOK), nil

}

/*
PostMeAccessRestrictionTotp adds a t o t p access restriction

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionTotp(params *PostMeAccessRestrictionTotpParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionTotpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionTotp",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/totp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionTotpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionTotpOK), nil

}

/*
PostMeAccessRestrictionTotpIDDisable disables this t o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionTotpIDDisable(params *PostMeAccessRestrictionTotpIDDisableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionTotpIDDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionTotpIDDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionTotpIDDisable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/totp/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionTotpIDDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionTotpIDDisableOK), nil

}

/*
PostMeAccessRestrictionTotpIDEnable enables this t o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionTotpIDEnable(params *PostMeAccessRestrictionTotpIDEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionTotpIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionTotpIDEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionTotpIDEnable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/totp/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionTotpIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionTotpIDEnableOK), nil

}

/*
PostMeAccessRestrictionTotpIDValidate validates your t o t p account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionTotpIDValidate(params *PostMeAccessRestrictionTotpIDValidateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionTotpIDValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionTotpIDValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionTotpIDValidate",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/totp/{id}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionTotpIDValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionTotpIDValidateOK), nil

}

/*
PostMeAccessRestrictionU2f adds a u2 f access restriction

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionU2f(params *PostMeAccessRestrictionU2fParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionU2fOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionU2fParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionU2f",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/u2f",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionU2fReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionU2fOK), nil

}

/*
PostMeAccessRestrictionU2fIDChallenge gets an u2 f challenge

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionU2fIDChallenge(params *PostMeAccessRestrictionU2fIDChallengeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionU2fIDChallengeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionU2fIDChallengeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionU2fIDChallenge",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/u2f/{id}/challenge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionU2fIDChallengeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionU2fIDChallengeOK), nil

}

/*
PostMeAccessRestrictionU2fIDDisable disables this u2 f account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionU2fIDDisable(params *PostMeAccessRestrictionU2fIDDisableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionU2fIDDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionU2fIDDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionU2fIDDisable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/u2f/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionU2fIDDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionU2fIDDisableOK), nil

}

/*
PostMeAccessRestrictionU2fIDEnable enables this u2 f account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionU2fIDEnable(params *PostMeAccessRestrictionU2fIDEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionU2fIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionU2fIDEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionU2fIDEnable",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/u2f/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionU2fIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionU2fIDEnableOK), nil

}

/*
PostMeAccessRestrictionU2fIDValidate validates your u2 f account

PRODUCTION - authentication required
*/
func (a *Client) PostMeAccessRestrictionU2fIDValidate(params *PostMeAccessRestrictionU2fIDValidateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAccessRestrictionU2fIDValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAccessRestrictionU2fIDValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAccessRestrictionU2fIDValidate",
		Method:             "POST",
		PathPattern:        "/me/accessRestriction/u2f/{id}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAccessRestrictionU2fIDValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAccessRestrictionU2fIDValidateOK), nil

}

/*
PostMeAgreementsIDAccept accepts this contract

PRODUCTION - authentication required
*/
func (a *Client) PostMeAgreementsIDAccept(params *PostMeAgreementsIDAcceptParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAgreementsIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAgreementsIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAgreementsIDAccept",
		Method:             "POST",
		PathPattern:        "/me/agreements/{id}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAgreementsIDAcceptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAgreementsIDAcceptOK), nil

}

/*
PostMeAutorenew activates auto renew for this nic

PRODUCTION - authentication required
*/
func (a *Client) PostMeAutorenew(params *PostMeAutorenewParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeAutorenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeAutorenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeAutorenew",
		Method:             "POST",
		PathPattern:        "/me/autorenew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeAutorenewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeAutorenewOK), nil

}

/*
PostMeBillBillIDDebtPay creates an order in order to pay this order s debt

PRODUCTION - authentication required
*/
func (a *Client) PostMeBillBillIDDebtPay(params *PostMeBillBillIDDebtPayParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeBillBillIDDebtPayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeBillBillIDDebtPayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeBillBillIDDebtPay",
		Method:             "POST",
		PathPattern:        "/me/bill/{billId}/debt/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeBillBillIDDebtPayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeBillBillIDDebtPayOK), nil

}

/*
PostMeChangeEmail initiates an email change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostMeChangeEmail(params *PostMeChangeEmailParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeChangeEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeChangeEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeChangeEmail",
		Method:             "POST",
		PathPattern:        "/me/changeEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeChangeEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeChangeEmailOK), nil

}

/*
PostMeChangePassword initiates a password change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostMeChangePassword(params *PostMeChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeChangePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeChangePassword",
		Method:             "POST",
		PathPattern:        "/me/changePassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeChangePasswordOK), nil

}

/*
PostMeContact creates a new contact

PRODUCTION - authentication required
*/
func (a *Client) PostMeContact(params *PostMeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeContact",
		Method:             "POST",
		PathPattern:        "/me/contact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeContactOK), nil

}

/*
PostMeCreditCode validates a code for generate associated credit mouvement

PRODUCTION - authentication required
*/
func (a *Client) PostMeCreditCode(params *PostMeCreditCodeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeCreditCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeCreditCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeCreditCode",
		Method:             "POST",
		PathPattern:        "/me/credit/code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeCreditCodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeCreditCodeOK), nil

}

/*
PostMeDebtAccountDebtDebtIDPay creates an order in order to pay this order s debt

PRODUCTION - authentication required
*/
func (a *Client) PostMeDebtAccountDebtDebtIDPay(params *PostMeDebtAccountDebtDebtIDPayParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeDebtAccountDebtDebtIDPayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeDebtAccountDebtDebtIDPayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeDebtAccountDebtDebtIDPay",
		Method:             "POST",
		PathPattern:        "/me/debtAccount/debt/{debtId}/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeDebtAccountDebtDebtIDPayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeDebtAccountDebtDebtIDPayOK), nil

}

/*
PostMeDebtAccountPay creates an order in order to pay all your due debts

PRODUCTION - authentication required
*/
func (a *Client) PostMeDebtAccountPay(params *PostMeDebtAccountPayParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeDebtAccountPayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeDebtAccountPayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeDebtAccountPay",
		Method:             "POST",
		PathPattern:        "/me/debtAccount/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeDebtAccountPayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeDebtAccountPayOK), nil

}

/*
PostMeDepositDepositIDPaidBillsBillIDDebtPay creates an order in order to pay this order s debt

PRODUCTION - authentication required
*/
func (a *Client) PostMeDepositDepositIDPaidBillsBillIDDebtPay(params *PostMeDepositDepositIDPaidBillsBillIDDebtPayParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeDepositDepositIDPaidBillsBillIDDebtPayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeDepositDepositIDPaidBillsBillIDDebtPayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeDepositDepositIDPaidBillsBillIDDebtPay",
		Method:             "POST",
		PathPattern:        "/me/deposit/{depositId}/paidBills/{billId}/debt/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeDepositDepositIDPaidBillsBillIDDebtPayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeDepositDepositIDPaidBillsBillIDDebtPayOK), nil

}

/*
PostMeDocument creates new document

PRODUCTION - authentication required
*/
func (a *Client) PostMeDocument(params *PostMeDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeDocument",
		Method:             "POST",
		PathPattern:        "/me/document",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeDocumentOK), nil

}

/*
PostMeDocumentCors adds c o r s support on your container

PRODUCTION - authentication required
*/
func (a *Client) PostMeDocumentCors(params *PostMeDocumentCorsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeDocumentCorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeDocumentCorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeDocumentCors",
		Method:             "POST",
		PathPattern:        "/me/document/cors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeDocumentCorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeDocumentCorsOK), nil

}

/*
PostMeFaxCustomDomains creates a custom domain for your fax services

PRODUCTION - authentication required
*/
func (a *Client) PostMeFaxCustomDomains(params *PostMeFaxCustomDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeFaxCustomDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeFaxCustomDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeFaxCustomDomains",
		Method:             "POST",
		PathPattern:        "/me/fax/customDomains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeFaxCustomDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeFaxCustomDomainsOK), nil

}

/*
PostMeFidelityAccountCreditOrder generates an order that can be paid in order to credit the fidelity account

PRODUCTION - authentication required
*/
func (a *Client) PostMeFidelityAccountCreditOrder(params *PostMeFidelityAccountCreditOrderParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeFidelityAccountCreditOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeFidelityAccountCreditOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeFidelityAccountCreditOrder",
		Method:             "POST",
		PathPattern:        "/me/fidelityAccount/creditOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeFidelityAccountCreditOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeFidelityAccountCreditOrderOK), nil

}

/*
PostMeGeolocation fetches visitor country and region

PRODUCTION
*/
func (a *Client) PostMeGeolocation(params *PostMeGeolocationParams) (*PostMeGeolocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeGeolocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeGeolocation",
		Method:             "POST",
		PathPattern:        "/me/geolocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeGeolocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeGeolocationOK), nil

}

/*
PostMeIPOrganisation adds an organisation

PRODUCTION - authentication required
*/
func (a *Client) PostMeIPOrganisation(params *PostMeIPOrganisationParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeIPOrganisationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeIPOrganisationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeIPOrganisation",
		Method:             "POST",
		PathPattern:        "/me/ipOrganisation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeIPOrganisationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeIPOrganisationOK), nil

}

/*
PostMeIPXEScript adds an IP x e script

PRODUCTION - authentication required
*/
func (a *Client) PostMeIPXEScript(params *PostMeIPXEScriptParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeIPXEScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeIPXEScriptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeIPXEScript",
		Method:             "POST",
		PathPattern:        "/me/ipxeScript",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeIPXEScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeIPXEScriptOK), nil

}

/*
PostMeInstallationTemplate creates a template

PRODUCTION - authentication required
*/
func (a *Client) PostMeInstallationTemplate(params *PostMeInstallationTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInstallationTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInstallationTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInstallationTemplate",
		Method:             "POST",
		PathPattern:        "/me/installationTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInstallationTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInstallationTemplateOK), nil

}

/*
PostMeInstallationTemplateTemplateNameCheckIntegrity checks the integrity of this template

PRODUCTION - authentication required
*/
func (a *Client) PostMeInstallationTemplateTemplateNameCheckIntegrity(params *PostMeInstallationTemplateTemplateNameCheckIntegrityParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInstallationTemplateTemplateNameCheckIntegrityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInstallationTemplateTemplateNameCheckIntegrityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInstallationTemplateTemplateNameCheckIntegrity",
		Method:             "POST",
		PathPattern:        "/me/installationTemplate/{templateName}/checkIntegrity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInstallationTemplateTemplateNameCheckIntegrityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInstallationTemplateTemplateNameCheckIntegrityOK), nil

}

/*
PostMeInstallationTemplateTemplateNamePartitionScheme adds a scheme of partition

PRODUCTION - authentication required
*/
func (a *Client) PostMeInstallationTemplateTemplateNamePartitionScheme(params *PostMeInstallationTemplateTemplateNamePartitionSchemeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInstallationTemplateTemplateNamePartitionSchemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInstallationTemplateTemplateNamePartitionSchemeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInstallationTemplateTemplateNamePartitionScheme",
		Method:             "POST",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInstallationTemplateTemplateNamePartitionSchemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInstallationTemplateTemplateNamePartitionSchemeOK), nil

}

/*
PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid adds an hardware r a ID in this partitioning scheme

PRODUCTION - authentication required
*/
func (a *Client) PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid(params *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaid",
		Method:             "POST",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidOK), nil

}

/*
PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition adds a partition in this partitioning scheme

PRODUCTION - authentication required
*/
func (a *Client) PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition(params *PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartition",
		Method:             "POST",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionOK), nil

}

/*
PostMeMailingListSubscribe subscribes an email to a restricted mailing list

PRODUCTION - authentication required
*/
func (a *Client) PostMeMailingListSubscribe(params *PostMeMailingListSubscribeParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeMailingListSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeMailingListSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeMailingListSubscribe",
		Method:             "POST",
		PathPattern:        "/me/mailingList/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeMailingListSubscribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeMailingListSubscribeOK), nil

}

/*
PostMeOrderOrderIDDebtPay creates an order in order to pay this order s debt

PRODUCTION - authentication required
*/
func (a *Client) PostMeOrderOrderIDDebtPay(params *PostMeOrderOrderIDDebtPayParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeOrderOrderIDDebtPayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeOrderOrderIDDebtPayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeOrderOrderIDDebtPay",
		Method:             "POST",
		PathPattern:        "/me/order/{orderId}/debt/pay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeOrderOrderIDDebtPayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeOrderOrderIDDebtPayOK), nil

}

/*
PostMeOrderOrderIDPayWithRegisteredPaymentMean pays with an already registered payment mean

PRODUCTION - authentication required
*/
func (a *Client) PostMeOrderOrderIDPayWithRegisteredPaymentMean(params *PostMeOrderOrderIDPayWithRegisteredPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeOrderOrderIDPayWithRegisteredPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeOrderOrderIDPayWithRegisteredPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeOrderOrderIDPayWithRegisteredPaymentMean",
		Method:             "POST",
		PathPattern:        "/me/order/{orderId}/payWithRegisteredPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeOrderOrderIDPayWithRegisteredPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeOrderOrderIDPayWithRegisteredPaymentMeanOK), nil

}

/*
PostMeOrderOrderIDRetraction requests retraction of order

PRODUCTION - authentication required
*/
func (a *Client) PostMeOrderOrderIDRetraction(params *PostMeOrderOrderIDRetractionParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeOrderOrderIDRetractionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeOrderOrderIDRetractionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeOrderOrderIDRetraction",
		Method:             "POST",
		PathPattern:        "/me/order/{orderId}/retraction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeOrderOrderIDRetractionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeOrderOrderIDRetractionOK), nil

}

/*
PostMeOvhAccountOvhAccountIDCreditOrder generates an order that can be paid in order to credit the o v h account

PRODUCTION - authentication required
*/
func (a *Client) PostMeOvhAccountOvhAccountIDCreditOrder(params *PostMeOvhAccountOvhAccountIDCreditOrderParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeOvhAccountOvhAccountIDCreditOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeOvhAccountOvhAccountIDCreditOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeOvhAccountOvhAccountIDCreditOrder",
		Method:             "POST",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}/creditOrder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeOvhAccountOvhAccountIDCreditOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeOvhAccountOvhAccountIDCreditOrderOK), nil

}

/*
PostMeOvhAccountOvhAccountIDRetrieveMoney transfers money from ovh account to your bank account

PRODUCTION - authentication required
*/
func (a *Client) PostMeOvhAccountOvhAccountIDRetrieveMoney(params *PostMeOvhAccountOvhAccountIDRetrieveMoneyParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeOvhAccountOvhAccountIDRetrieveMoneyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeOvhAccountOvhAccountIDRetrieveMoneyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeOvhAccountOvhAccountIDRetrieveMoney",
		Method:             "POST",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}/retrieveMoney",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeOvhAccountOvhAccountIDRetrieveMoneyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeOvhAccountOvhAccountIDRetrieveMoneyOK), nil

}

/*
PostMePasswordRecover requests a password recover

PRODUCTION
*/
func (a *Client) PostMePasswordRecover(params *PostMePasswordRecoverParams) (*PostMePasswordRecoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePasswordRecoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePasswordRecover",
		Method:             "POST",
		PathPattern:        "/me/passwordRecover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePasswordRecoverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePasswordRecoverOK), nil

}

/*
PostMePaymentMeanBankAccount enables payment through a new account

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanBankAccount(params *PostMePaymentMeanBankAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanBankAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanBankAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanBankAccount",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/bankAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanBankAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanBankAccountOK), nil

}

/*
PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMean chooses this bank account as your default payment mean will cancel the previous choice

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMean(params *PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMean",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanBankAccountIDChooseAsDefaultPaymentMeanOK), nil

}

/*
PostMePaymentMeanCreditCard adds a new credit card

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanCreditCard(params *PostMePaymentMeanCreditCardParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanCreditCardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanCreditCardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanCreditCard",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/creditCard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanCreditCardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanCreditCardOK), nil

}

/*
PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMean chooses this credit card as your default payment mean will cancel the previous choice

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMean(params *PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMean",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanCreditCardIDChooseAsDefaultPaymentMeanOK), nil

}

/*
PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMean allows you to use deferred payment will cancel the previous choice

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMean(params *PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMean",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanDeferredPaymentAccountIDChooseAsDefaultPaymentMeanOK), nil

}

/*
PostMePaymentMeanPaypal enables payment through a new pay pal account

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanPaypal(params *PostMePaymentMeanPaypalParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanPaypalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanPaypalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanPaypal",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/paypal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanPaypalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanPaypalOK), nil

}

/*
PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMean chooses this paypal agreement as your default payment mean will cancel the previous choice

PRODUCTION - authentication required
*/
func (a *Client) PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMean(params *PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMeanParams, authInfo runtime.ClientAuthInfoWriter) (*PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMeanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMePaymentMeanPaypalIDChooseAsDefaultPaymentMeanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMean",
		Method:             "POST",
		PathPattern:        "/me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMeanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMePaymentMeanPaypalIDChooseAsDefaultPaymentMeanOK), nil

}

/*
PostMeSLAIDApply asks for SLA application

PRODUCTION - authentication required
*/
func (a *Client) PostMeSLAIDApply(params *PostMeSLAIDApplyParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeSLAIDApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeSLAIDApplyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeSLAIDApply",
		Method:             "POST",
		PathPattern:        "/me/sla/{id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeSLAIDApplyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeSLAIDApplyOK), nil

}

/*
PostMeSSHKey adds a new public SSH key

PRODUCTION - authentication required
*/
func (a *Client) PostMeSSHKey(params *PostMeSSHKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeSSHKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeSSHKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeSSHKey",
		Method:             "POST",
		PathPattern:        "/me/sshKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeSSHKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeSSHKeyOK), nil

}

/*
PostMeSubAccount creates a new sub account

PRODUCTION - authentication required
*/
func (a *Client) PostMeSubAccount(params *PostMeSubAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeSubAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeSubAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeSubAccount",
		Method:             "POST",
		PathPattern:        "/me/subAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeSubAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeSubAccountOK), nil

}

/*
PostMeSubAccountIDCreateConsumerKey creates a consumer key for the current application

PRODUCTION - authentication required
*/
func (a *Client) PostMeSubAccountIDCreateConsumerKey(params *PostMeSubAccountIDCreateConsumerKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeSubAccountIDCreateConsumerKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeSubAccountIDCreateConsumerKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeSubAccountIDCreateConsumerKey",
		Method:             "POST",
		PathPattern:        "/me/subAccount/{id}/createConsumerKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeSubAccountIDCreateConsumerKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeSubAccountIDCreateConsumerKeyOK), nil

}

/*
PostMeTaskContactChangeIDAccept accepts this change request

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskContactChangeIDAccept(params *PostMeTaskContactChangeIDAcceptParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskContactChangeIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskContactChangeIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskContactChangeIDAccept",
		Method:             "POST",
		PathPattern:        "/me/task/contactChange/{id}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskContactChangeIDAcceptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskContactChangeIDAcceptOK), nil

}

/*
PostMeTaskContactChangeIDRefuse refuses this change request

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskContactChangeIDRefuse(params *PostMeTaskContactChangeIDRefuseParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskContactChangeIDRefuseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskContactChangeIDRefuseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskContactChangeIDRefuse",
		Method:             "POST",
		PathPattern:        "/me/task/contactChange/{id}/refuse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskContactChangeIDRefuseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskContactChangeIDRefuseOK), nil

}

/*
PostMeTaskContactChangeIDResendEmail this call will send you a new email containing a new token

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskContactChangeIDResendEmail(params *PostMeTaskContactChangeIDResendEmailParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskContactChangeIDResendEmailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskContactChangeIDResendEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskContactChangeIDResendEmail",
		Method:             "POST",
		PathPattern:        "/me/task/contactChange/{id}/resendEmail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskContactChangeIDResendEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskContactChangeIDResendEmailOK), nil

}

/*
PostMeTaskDomainIDAccelerate accelerates the task

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskDomainIDAccelerate(params *PostMeTaskDomainIDAccelerateParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskDomainIDAccelerateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskDomainIDAccelerateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskDomainIDAccelerate",
		Method:             "POST",
		PathPattern:        "/me/task/domain/{id}/accelerate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskDomainIDAccelerateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskDomainIDAccelerateOK), nil

}

/*
PostMeTaskDomainIDCancel cancels the task

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskDomainIDCancel(params *PostMeTaskDomainIDCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskDomainIDCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskDomainIDCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskDomainIDCancel",
		Method:             "POST",
		PathPattern:        "/me/task/domain/{id}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskDomainIDCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskDomainIDCancelOK), nil

}

/*
PostMeTaskDomainIDRelaunch relaunches the task

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskDomainIDRelaunch(params *PostMeTaskDomainIDRelaunchParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskDomainIDRelaunchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskDomainIDRelaunchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskDomainIDRelaunch",
		Method:             "POST",
		PathPattern:        "/me/task/domain/{id}/relaunch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskDomainIDRelaunchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskDomainIDRelaunchOK), nil

}

/*
PostMeTaskEmailChangeIDAccept accepts this change request

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskEmailChangeIDAccept(params *PostMeTaskEmailChangeIDAcceptParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskEmailChangeIDAcceptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskEmailChangeIDAcceptParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskEmailChangeIDAccept",
		Method:             "POST",
		PathPattern:        "/me/task/emailChange/{id}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskEmailChangeIDAcceptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskEmailChangeIDAcceptOK), nil

}

/*
PostMeTaskEmailChangeIDRefuse refuses this change request

PRODUCTION - authentication required
*/
func (a *Client) PostMeTaskEmailChangeIDRefuse(params *PostMeTaskEmailChangeIDRefuseParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTaskEmailChangeIDRefuseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTaskEmailChangeIDRefuseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTaskEmailChangeIDRefuse",
		Method:             "POST",
		PathPattern:        "/me/task/emailChange/{id}/refuse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTaskEmailChangeIDRefuseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTaskEmailChangeIDRefuseOK), nil

}

/*
PostMeTelephonyDefaultIPRestriction creates a default IP restriction for your future vo IP lines

PRODUCTION - authentication required
*/
func (a *Client) PostMeTelephonyDefaultIPRestriction(params *PostMeTelephonyDefaultIPRestrictionParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTelephonyDefaultIPRestrictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTelephonyDefaultIPRestrictionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTelephonyDefaultIPRestriction",
		Method:             "POST",
		PathPattern:        "/me/telephony/defaultIpRestriction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTelephonyDefaultIPRestrictionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTelephonyDefaultIPRestrictionOK), nil

}

/*
PostMeTelephonySettings changes the telephony settings linked to the customer account

PRODUCTION - authentication required
*/
func (a *Client) PostMeTelephonySettings(params *PostMeTelephonySettingsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeTelephonySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeTelephonySettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeTelephonySettings",
		Method:             "POST",
		PathPattern:        "/me/telephony/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeTelephonySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeTelephonySettingsOK), nil

}

/*
PostMeVoucherCheckValidity verifies existing voucher

PRODUCTION - authentication required
*/
func (a *Client) PostMeVoucherCheckValidity(params *PostMeVoucherCheckValidityParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeVoucherCheckValidityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeVoucherCheckValidityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeVoucherCheckValidity",
		Method:             "POST",
		PathPattern:        "/me/voucher/checkValidity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeVoucherCheckValidityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeVoucherCheckValidityOK), nil

}

/*
PostMeXdslSetting changes xdsl settings linked to the nichandle

PRODUCTION - authentication required
*/
func (a *Client) PostMeXdslSetting(params *PostMeXdslSettingParams, authInfo runtime.ClientAuthInfoWriter) (*PostMeXdslSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMeXdslSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMeXdslSetting",
		Method:             "POST",
		PathPattern:        "/me/xdsl/setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMeXdslSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMeXdslSettingOK), nil

}

/*
PutMe alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMe(params *PutMeParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMe",
		Method:             "PUT",
		PathPattern:        "/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeOK), nil

}

/*
PutMeAccessRestrictionDeveloperMode alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionDeveloperMode(params *PutMeAccessRestrictionDeveloperModeParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionDeveloperModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionDeveloperModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionDeveloperMode",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/developerMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionDeveloperModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionDeveloperModeOK), nil

}

/*
PutMeAccessRestrictionIPDefaultRule alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionIPDefaultRule(params *PutMeAccessRestrictionIPDefaultRuleParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionIPDefaultRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionIPDefaultRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionIPDefaultRule",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/ipDefaultRule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionIPDefaultRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionIPDefaultRuleOK), nil

}

/*
PutMeAccessRestrictionIPID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionIPID(params *PutMeAccessRestrictionIPIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionIPIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionIPIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionIPID",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/ip/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionIPIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionIPIDOK), nil

}

/*
PutMeAccessRestrictionSmsID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionSmsID(params *PutMeAccessRestrictionSmsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionSmsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionSmsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionSmsID",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/sms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionSmsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionSmsIDOK), nil

}

/*
PutMeAccessRestrictionTotpID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionTotpID(params *PutMeAccessRestrictionTotpIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionTotpIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionTotpIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionTotpID",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/totp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionTotpIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionTotpIDOK), nil

}

/*
PutMeAccessRestrictionU2fID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAccessRestrictionU2fID(params *PutMeAccessRestrictionU2fIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAccessRestrictionU2fIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAccessRestrictionU2fIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAccessRestrictionU2fID",
		Method:             "PUT",
		PathPattern:        "/me/accessRestriction/u2f/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAccessRestrictionU2fIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAccessRestrictionU2fIDOK), nil

}

/*
PutMeAutorenew alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeAutorenew(params *PutMeAutorenewParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeAutorenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeAutorenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeAutorenew",
		Method:             "PUT",
		PathPattern:        "/me/autorenew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeAutorenewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeAutorenewOK), nil

}

/*
PutMeContactContactID updates an existing contact

PRODUCTION - authentication required
*/
func (a *Client) PutMeContactContactID(params *PutMeContactContactIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeContactContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeContactContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeContactContactID",
		Method:             "PUT",
		PathPattern:        "/me/contact/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeContactContactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeContactContactIDOK), nil

}

/*
PutMeDocumentID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeDocumentID(params *PutMeDocumentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeDocumentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeDocumentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeDocumentID",
		Method:             "PUT",
		PathPattern:        "/me/document/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeDocumentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeDocumentIDOK), nil

}

/*
PutMeFidelityAccount alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeFidelityAccount(params *PutMeFidelityAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeFidelityAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeFidelityAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeFidelityAccount",
		Method:             "PUT",
		PathPattern:        "/me/fidelityAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeFidelityAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeFidelityAccountOK), nil

}

/*
PutMeIPOrganisationOrganisationID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeIPOrganisationOrganisationID(params *PutMeIPOrganisationOrganisationIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeIPOrganisationOrganisationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeIPOrganisationOrganisationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeIPOrganisationOrganisationID",
		Method:             "PUT",
		PathPattern:        "/me/ipOrganisation/{organisationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeIPOrganisationOrganisationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeIPOrganisationOrganisationIDOK), nil

}

/*
PutMeInstallationTemplateTemplateName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeInstallationTemplateTemplateName(params *PutMeInstallationTemplateTemplateNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeInstallationTemplateTemplateNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeInstallationTemplateTemplateNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeInstallationTemplateTemplateName",
		Method:             "PUT",
		PathPattern:        "/me/installationTemplate/{templateName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeInstallationTemplateTemplateNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeInstallationTemplateTemplateNameOK), nil

}

/*
PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeName(params *PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeName",
		Method:             "PUT",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameOK), nil

}

/*
PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName(params *PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidName",
		Method:             "PUT",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNameHardwareRaidNameOK), nil

}

/*
PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint(params *PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpoint",
		Method:             "PUT",
		PathPattern:        "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeInstallationTemplateTemplateNamePartitionSchemeSchemeNamePartitionMountpointOK), nil

}

/*
PutMeOvhAccountOvhAccountID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeOvhAccountOvhAccountID(params *PutMeOvhAccountOvhAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeOvhAccountOvhAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeOvhAccountOvhAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeOvhAccountOvhAccountID",
		Method:             "PUT",
		PathPattern:        "/me/ovhAccount/{ovhAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeOvhAccountOvhAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeOvhAccountOvhAccountIDOK), nil

}

/*
PutMePaymentMeanBankAccountID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMePaymentMeanBankAccountID(params *PutMePaymentMeanBankAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMePaymentMeanBankAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMePaymentMeanBankAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMePaymentMeanBankAccountID",
		Method:             "PUT",
		PathPattern:        "/me/paymentMean/bankAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMePaymentMeanBankAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMePaymentMeanBankAccountIDOK), nil

}

/*
PutMePaymentMeanCreditCardID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMePaymentMeanCreditCardID(params *PutMePaymentMeanCreditCardIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMePaymentMeanCreditCardIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMePaymentMeanCreditCardIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMePaymentMeanCreditCardID",
		Method:             "PUT",
		PathPattern:        "/me/paymentMean/creditCard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMePaymentMeanCreditCardIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMePaymentMeanCreditCardIDOK), nil

}

/*
PutMePaymentMeanDeferredPaymentAccountID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMePaymentMeanDeferredPaymentAccountID(params *PutMePaymentMeanDeferredPaymentAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMePaymentMeanDeferredPaymentAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMePaymentMeanDeferredPaymentAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMePaymentMeanDeferredPaymentAccountID",
		Method:             "PUT",
		PathPattern:        "/me/paymentMean/deferredPaymentAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMePaymentMeanDeferredPaymentAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMePaymentMeanDeferredPaymentAccountIDOK), nil

}

/*
PutMePaymentMeanPaypalID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMePaymentMeanPaypalID(params *PutMePaymentMeanPaypalIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMePaymentMeanPaypalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMePaymentMeanPaypalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMePaymentMeanPaypalID",
		Method:             "PUT",
		PathPattern:        "/me/paymentMean/paypal/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMePaymentMeanPaypalIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMePaymentMeanPaypalIDOK), nil

}

/*
PutMeSSHKeyKeyName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeSSHKeyKeyName(params *PutMeSSHKeyKeyNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeSSHKeyKeyNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeSSHKeyKeyNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeSSHKeyKeyName",
		Method:             "PUT",
		PathPattern:        "/me/sshKey/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeSSHKeyKeyNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeSSHKeyKeyNameOK), nil

}

/*
PutMeSubAccountID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeSubAccountID(params *PutMeSubAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeSubAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeSubAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeSubAccountID",
		Method:             "PUT",
		PathPattern:        "/me/subAccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeSubAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeSubAccountIDOK), nil

}

/*
PutMeSubscriptionSubscriptionType alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeSubscriptionSubscriptionType(params *PutMeSubscriptionSubscriptionTypeParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeSubscriptionSubscriptionTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeSubscriptionSubscriptionTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeSubscriptionSubscriptionType",
		Method:             "PUT",
		PathPattern:        "/me/subscription/{subscriptionType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeSubscriptionSubscriptionTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeSubscriptionSubscriptionTypeOK), nil

}

/*
PutMeTaskDomainIDArgumentKey alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutMeTaskDomainIDArgumentKey(params *PutMeTaskDomainIDArgumentKeyParams, authInfo runtime.ClientAuthInfoWriter) (*PutMeTaskDomainIDArgumentKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMeTaskDomainIDArgumentKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMeTaskDomainIDArgumentKey",
		Method:             "PUT",
		PathPattern:        "/me/task/domain/{id}/argument/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMeTaskDomainIDArgumentKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMeTaskDomainIDArgumentKeyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
