// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMeRefundParams creates a new GetMeRefundParams object
// with the default values initialized.
func NewGetMeRefundParams() *GetMeRefundParams {
	var ()
	return &GetMeRefundParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMeRefundParamsWithTimeout creates a new GetMeRefundParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMeRefundParamsWithTimeout(timeout time.Duration) *GetMeRefundParams {
	var ()
	return &GetMeRefundParams{

		timeout: timeout,
	}
}

// NewGetMeRefundParamsWithContext creates a new GetMeRefundParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMeRefundParamsWithContext(ctx context.Context) *GetMeRefundParams {
	var ()
	return &GetMeRefundParams{

		Context: ctx,
	}
}

// NewGetMeRefundParamsWithHTTPClient creates a new GetMeRefundParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMeRefundParamsWithHTTPClient(client *http.Client) *GetMeRefundParams {
	var ()
	return &GetMeRefundParams{
		HTTPClient: client,
	}
}

/*GetMeRefundParams contains all the parameters to send to the API endpoint
for the get me refund operation typically these are written to a http.Request
*/
type GetMeRefundParams struct {

	/*DateFrom*/
	DateFrom *strfmt.DateTime
	/*DateTo*/
	DateTo *strfmt.DateTime
	/*OrderID*/
	OrderID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get me refund params
func (o *GetMeRefundParams) WithTimeout(timeout time.Duration) *GetMeRefundParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get me refund params
func (o *GetMeRefundParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get me refund params
func (o *GetMeRefundParams) WithContext(ctx context.Context) *GetMeRefundParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get me refund params
func (o *GetMeRefundParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get me refund params
func (o *GetMeRefundParams) WithHTTPClient(client *http.Client) *GetMeRefundParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get me refund params
func (o *GetMeRefundParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateFrom adds the dateFrom to the get me refund params
func (o *GetMeRefundParams) WithDateFrom(dateFrom *strfmt.DateTime) *GetMeRefundParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get me refund params
func (o *GetMeRefundParams) SetDateFrom(dateFrom *strfmt.DateTime) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get me refund params
func (o *GetMeRefundParams) WithDateTo(dateTo *strfmt.DateTime) *GetMeRefundParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get me refund params
func (o *GetMeRefundParams) SetDateTo(dateTo *strfmt.DateTime) {
	o.DateTo = dateTo
}

// WithOrderID adds the orderID to the get me refund params
func (o *GetMeRefundParams) WithOrderID(orderID *int64) *GetMeRefundParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get me refund params
func (o *GetMeRefundParams) SetOrderID(orderID *int64) {
	o.OrderID = orderID
}

// WriteToRequest writes these params to a swagger request
func (o *GetMeRefundParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateFrom != nil {

		// query param date.from
		var qrDateFrom strfmt.DateTime
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom.String()
		if qDateFrom != "" {
			if err := r.SetQueryParam("date.from", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param date.to
		var qrDateTo strfmt.DateTime
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo.String()
		if qDateTo != "" {
			if err := r.SetQueryParam("date.to", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// query param orderId
		var qrOrderID int64
		if o.OrderID != nil {
			qrOrderID = *o.OrderID
		}
		qOrderID := swag.FormatInt64(qrOrderID)
		if qOrderID != "" {
			if err := r.SetQueryParam("orderId", qOrderID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
