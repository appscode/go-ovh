// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/appscode/go-ovh/me/models"
)

// NewPutMeTaskDomainIDArgumentKeyParams creates a new PutMeTaskDomainIDArgumentKeyParams object
// with the default values initialized.
func NewPutMeTaskDomainIDArgumentKeyParams() *PutMeTaskDomainIDArgumentKeyParams {
	var ()
	return &PutMeTaskDomainIDArgumentKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutMeTaskDomainIDArgumentKeyParamsWithTimeout creates a new PutMeTaskDomainIDArgumentKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutMeTaskDomainIDArgumentKeyParamsWithTimeout(timeout time.Duration) *PutMeTaskDomainIDArgumentKeyParams {
	var ()
	return &PutMeTaskDomainIDArgumentKeyParams{

		timeout: timeout,
	}
}

// NewPutMeTaskDomainIDArgumentKeyParamsWithContext creates a new PutMeTaskDomainIDArgumentKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutMeTaskDomainIDArgumentKeyParamsWithContext(ctx context.Context) *PutMeTaskDomainIDArgumentKeyParams {
	var ()
	return &PutMeTaskDomainIDArgumentKeyParams{

		Context: ctx,
	}
}

// NewPutMeTaskDomainIDArgumentKeyParamsWithHTTPClient creates a new PutMeTaskDomainIDArgumentKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutMeTaskDomainIDArgumentKeyParamsWithHTTPClient(client *http.Client) *PutMeTaskDomainIDArgumentKeyParams {
	var ()
	return &PutMeTaskDomainIDArgumentKeyParams{
		HTTPClient: client,
	}
}

/*PutMeTaskDomainIDArgumentKeyParams contains all the parameters to send to the API endpoint
for the put me task domain ID argument key operation typically these are written to a http.Request
*/
type PutMeTaskDomainIDArgumentKeyParams struct {

	/*ID*/
	ID int64
	/*Key*/
	Key string
	/*MeTaskDomainArgumentPut*/
	MeTaskDomainArgumentPut *models.NichandleDomainTaskArgument

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithTimeout(timeout time.Duration) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithContext(ctx context.Context) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithHTTPClient(client *http.Client) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithID(id int64) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetID(id int64) {
	o.ID = id
}

// WithKey adds the key to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithKey(key string) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetKey(key string) {
	o.Key = key
}

// WithMeTaskDomainArgumentPut adds the meTaskDomainArgumentPut to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) WithMeTaskDomainArgumentPut(meTaskDomainArgumentPut *models.NichandleDomainTaskArgument) *PutMeTaskDomainIDArgumentKeyParams {
	o.SetMeTaskDomainArgumentPut(meTaskDomainArgumentPut)
	return o
}

// SetMeTaskDomainArgumentPut adds the meTaskDomainArgumentPut to the put me task domain ID argument key params
func (o *PutMeTaskDomainIDArgumentKeyParams) SetMeTaskDomainArgumentPut(meTaskDomainArgumentPut *models.NichandleDomainTaskArgument) {
	o.MeTaskDomainArgumentPut = meTaskDomainArgumentPut
}

// WriteToRequest writes these params to a swagger request
func (o *PutMeTaskDomainIDArgumentKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}

	if o.MeTaskDomainArgumentPut != nil {
		if err := r.SetBodyParam(o.MeTaskDomainArgumentPut); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
