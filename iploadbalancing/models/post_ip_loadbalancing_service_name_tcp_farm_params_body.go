// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIPLoadbalancingServiceNameTCPFarmParamsBody post Ip loadbalancing service name Tcp farm params body
// swagger:model postIpLoadbalancingServiceNameTcpFarmParamsBody
type PostIPLoadbalancingServiceNameTCPFarmParamsBody struct {

	// balance
	Balance string `json:"balance,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// probe
	Probe *IPLBBackendProbe `json:"probe,omitempty"`

	// stickiness
	Stickiness string `json:"stickiness,omitempty"`

	// vrack network Id
	VrackNetworkID int64 `json:"vrackNetworkId,omitempty"`

	// zone
	// Required: true
	Zone *string `json:"zone"`
}

// Validate validates this post Ip loadbalancing service name Tcp farm params body
func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStickiness(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeBalancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["first","leastconn","roundrobin","source"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeBalancePropEnum = append(postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeBalancePropEnum, v)
	}
}

const (
	// PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceFirst captures enum value "first"
	PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceFirst string = "first"
	// PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceLeastconn captures enum value "leastconn"
	PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceLeastconn string = "leastconn"
	// PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceRoundrobin captures enum value "roundrobin"
	PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceRoundrobin string = "roundrobin"
	// PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceSource captures enum value "source"
	PostIPLoadbalancingServiceNameTCPFarmParamsBodyBalanceSource string = "source"
)

// prop value enum
func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateBalanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeBalancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	// value enum
	if err := m.validateBalanceEnum("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateProbe(formats strfmt.Registry) error {

	if swag.IsZero(m.Probe) { // not required
		return nil
	}

	if m.Probe != nil {

		if err := m.Probe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probe")
			}
			return err
		}
	}

	return nil
}

var postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeStickinessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sourceIp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeStickinessPropEnum = append(postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeStickinessPropEnum, v)
	}
}

const (
	// PostIPLoadbalancingServiceNameTCPFarmParamsBodyStickinessSourceIP captures enum value "sourceIp"
	PostIPLoadbalancingServiceNameTCPFarmParamsBodyStickinessSourceIP string = "sourceIp"
)

// prop value enum
func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateStickinessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpLoadbalancingServiceNameTcpFarmParamsBodyTypeStickinessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateStickiness(formats strfmt.Registry) error {

	if swag.IsZero(m.Stickiness) { // not required
		return nil
	}

	// value enum
	if err := m.validateStickinessEnum("stickiness", "body", m.Stickiness); err != nil {
		return err
	}

	return nil
}

func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameTCPFarmParamsBody) UnmarshalBinary(b []byte) error {
	var res PostIPLoadbalancingServiceNameTCPFarmParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
