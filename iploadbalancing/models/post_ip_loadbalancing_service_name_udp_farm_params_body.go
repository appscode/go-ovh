// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIPLoadbalancingServiceNameUDPFarmParamsBody post Ip loadbalancing service name Udp farm params body
// swagger:model postIpLoadbalancingServiceNameUdpFarmParamsBody
type PostIPLoadbalancingServiceNameUDPFarmParamsBody struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// port
	// Required: true
	Port *int64 `json:"port"`

	// vrack network Id
	VrackNetworkID int64 `json:"vrackNetworkId,omitempty"`

	// zone
	// Required: true
	Zone *string `json:"zone"`
}

// Validate validates this post Ip loadbalancing service name Udp farm params body
func (m *PostIPLoadbalancingServiceNameUDPFarmParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostIPLoadbalancingServiceNameUDPFarmParamsBody) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *PostIPLoadbalancingServiceNameUDPFarmParamsBody) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameUDPFarmParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameUDPFarmParamsBody) UnmarshalBinary(b []byte) error {
	var res PostIPLoadbalancingServiceNameUDPFarmParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
