// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLBRouteHTTPRouteHTTP HTTP Route
// swagger:model iplb.RouteHttp.RouteHttp
type IPLBRouteHTTPRouteHTTP struct {

	// action
	Action *IPLBRouteHTTPAction `json:"action,omitempty"`

	// Human readable name for your route, this field is for you
	DisplayName string `json:"displayName,omitempty"`

	// Route traffic for this frontend
	FrontendID int64 `json:"frontendId,omitempty"`

	// Id of your route
	// Required: true
	// Read Only: true
	RouteID int64 `json:"routeId"`

	// rules
	// Required: true
	Rules IPLBRouteHTTPRouteHTTPRules `json:"rules"`

	// Route status. Routes in "ok" state are ready to operate
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated first. Only the first matching route will trigger an action
	Weight int64 `json:"weight,omitempty"`
}

// Validate validates this iplb route Http route Http
func (m *IPLBRouteHTTPRouteHTTP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLBRouteHTTPRouteHTTP) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	if m.Action != nil {

		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action")
			}
			return err
		}
	}

	return nil
}

func (m *IPLBRouteHTTPRouteHTTP) validateRouteID(formats strfmt.Registry) error {

	if err := validate.Required("routeId", "body", int64(m.RouteID)); err != nil {
		return err
	}

	return nil
}

func (m *IPLBRouteHTTPRouteHTTP) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	if err := m.Rules.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rules")
		}
		return err
	}

	return nil
}

var iplbRouteHttpRouteHttpTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creating","deleting","internal","ok","updating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iplbRouteHttpRouteHttpTypeStatusPropEnum = append(iplbRouteHttpRouteHttpTypeStatusPropEnum, v)
	}
}

const (
	// IPLBRouteHTTPRouteHTTPStatusCreating captures enum value "creating"
	IPLBRouteHTTPRouteHTTPStatusCreating string = "creating"
	// IPLBRouteHTTPRouteHTTPStatusDeleting captures enum value "deleting"
	IPLBRouteHTTPRouteHTTPStatusDeleting string = "deleting"
	// IPLBRouteHTTPRouteHTTPStatusInternal captures enum value "internal"
	IPLBRouteHTTPRouteHTTPStatusInternal string = "internal"
	// IPLBRouteHTTPRouteHTTPStatusOk captures enum value "ok"
	IPLBRouteHTTPRouteHTTPStatusOk string = "ok"
	// IPLBRouteHTTPRouteHTTPStatusUpdating captures enum value "updating"
	IPLBRouteHTTPRouteHTTPStatusUpdating string = "updating"
)

// prop value enum
func (m *IPLBRouteHTTPRouteHTTP) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iplbRouteHttpRouteHttpTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLBRouteHTTPRouteHTTP) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLBRouteHTTPRouteHTTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBRouteHTTPRouteHTTP) UnmarshalBinary(b []byte) error {
	var res IPLBRouteHTTPRouteHTTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
