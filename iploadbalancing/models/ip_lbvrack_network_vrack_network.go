// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLBVrackNetworkVrackNetwork Represents a private network in the vRack
// swagger:model iplb.VrackNetwork.VrackNetwork
type IPLBVrackNetworkVrackNetwork struct {

	// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The block must be in the private network and reserved for the Load Balancer
	NatIP string `json:"natIp,omitempty"`

	// IP block of the private network in the vRack
	// Required: true
	// Read Only: true
	Subnet string `json:"subnet"`

	// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
	Vlan int64 `json:"vlan,omitempty"`

	// Internal Load Balancer identifier of the vRack private network description
	// Required: true
	// Read Only: true
	VrackNetworkID int64 `json:"vrackNetworkId"`
}

// Validate validates this iplb vrack network vrack network
func (m *IPLBVrackNetworkVrackNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVrackNetworkID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLBVrackNetworkVrackNetwork) validateSubnet(formats strfmt.Registry) error {

	if err := validate.RequiredString("subnet", "body", string(m.Subnet)); err != nil {
		return err
	}

	return nil
}

func (m *IPLBVrackNetworkVrackNetwork) validateVrackNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("vrackNetworkId", "body", int64(m.VrackNetworkID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLBVrackNetworkVrackNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBVrackNetworkVrackNetwork) UnmarshalBinary(b []byte) error {
	var res IPLBVrackNetworkVrackNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
