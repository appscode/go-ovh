// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLBBackendHTTPBackendHTTP HTTP Farm
// swagger:model iplb.BackendHttp.BackendHttp
type IPLBBackendHTTPBackendHTTP struct {

	// Load balancing algorithm. 'roundrobin' if null
	Balance string `json:"balance,omitempty"`

	// Human readable name for your backend, this field is for you
	DisplayName string `json:"displayName,omitempty"`

	// Id of your farm
	// Required: true
	// Read Only: true
	FarmID int64 `json:"farmId"`

	// Port attached to your farm. Inherited from frontend if null
	Port int64 `json:"port,omitempty"`

	// probe
	Probe *IPLBBackendProbe `json:"probe,omitempty"`

	// Stickiness type. No stickiness if null
	Stickiness string `json:"stickiness,omitempty"`

	// Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack
	// Read Only: true
	VrackNetworkID int64 `json:"vrackNetworkId,omitempty"`

	// Zone of you farm
	// Required: true
	// Read Only: true
	Zone string `json:"zone"`
}

// Validate validates this iplb backend Http backend Http
func (m *IPLBBackendHTTPBackendHTTP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFarmID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStickiness(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var iplbBackendHttpBackendHttpTypeBalancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["first","leastconn","roundrobin","source","uri"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iplbBackendHttpBackendHttpTypeBalancePropEnum = append(iplbBackendHttpBackendHttpTypeBalancePropEnum, v)
	}
}

const (
	// IPLBBackendHTTPBackendHTTPBalanceFirst captures enum value "first"
	IPLBBackendHTTPBackendHTTPBalanceFirst string = "first"
	// IPLBBackendHTTPBackendHTTPBalanceLeastconn captures enum value "leastconn"
	IPLBBackendHTTPBackendHTTPBalanceLeastconn string = "leastconn"
	// IPLBBackendHTTPBackendHTTPBalanceRoundrobin captures enum value "roundrobin"
	IPLBBackendHTTPBackendHTTPBalanceRoundrobin string = "roundrobin"
	// IPLBBackendHTTPBackendHTTPBalanceSource captures enum value "source"
	IPLBBackendHTTPBackendHTTPBalanceSource string = "source"
	// IPLBBackendHTTPBackendHTTPBalanceURI captures enum value "uri"
	IPLBBackendHTTPBackendHTTPBalanceURI string = "uri"
)

// prop value enum
func (m *IPLBBackendHTTPBackendHTTP) validateBalanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iplbBackendHttpBackendHttpTypeBalancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLBBackendHTTPBackendHTTP) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	// value enum
	if err := m.validateBalanceEnum("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *IPLBBackendHTTPBackendHTTP) validateFarmID(formats strfmt.Registry) error {

	if err := validate.Required("farmId", "body", int64(m.FarmID)); err != nil {
		return err
	}

	return nil
}

func (m *IPLBBackendHTTPBackendHTTP) validateProbe(formats strfmt.Registry) error {

	if swag.IsZero(m.Probe) { // not required
		return nil
	}

	if m.Probe != nil {

		if err := m.Probe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probe")
			}
			return err
		}
	}

	return nil
}

var iplbBackendHttpBackendHttpTypeStickinessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cookie","sourceIp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iplbBackendHttpBackendHttpTypeStickinessPropEnum = append(iplbBackendHttpBackendHttpTypeStickinessPropEnum, v)
	}
}

const (
	// IPLBBackendHTTPBackendHTTPStickinessCookie captures enum value "cookie"
	IPLBBackendHTTPBackendHTTPStickinessCookie string = "cookie"
	// IPLBBackendHTTPBackendHTTPStickinessSourceIP captures enum value "sourceIp"
	IPLBBackendHTTPBackendHTTPStickinessSourceIP string = "sourceIp"
)

// prop value enum
func (m *IPLBBackendHTTPBackendHTTP) validateStickinessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iplbBackendHttpBackendHttpTypeStickinessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLBBackendHTTPBackendHTTP) validateStickiness(formats strfmt.Registry) error {

	if swag.IsZero(m.Stickiness) { // not required
		return nil
	}

	// value enum
	if err := m.validateStickinessEnum("stickiness", "body", m.Stickiness); err != nil {
		return err
	}

	return nil
}

func (m *IPLBBackendHTTPBackendHTTP) validateZone(formats strfmt.Registry) error {

	if err := validate.RequiredString("zone", "body", string(m.Zone)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLBBackendHTTPBackendHTTP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBBackendHTTPBackendHTTP) UnmarshalBinary(b []byte) error {
	var res IPLBBackendHTTPBackendHTTP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
