// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IPLBVrackNetworkCreationRules Rules to create a new description of a private network in the vRack
// swagger:model iplb.VrackNetworkCreationRules
type IPLBVrackNetworkCreationRules struct {

	// Minimum number of IPs needed to forward requests to your servers using NAT in your private network behind the current Load Balancer. Ip Block given on Load Balancer vRack network must contain at least this number of IP.
	MinNatIps int64 `json:"minNatIps,omitempty"`

	// Number of remaining private network descriptions available for creation for this Load Balancer
	RemainingNetworks int64 `json:"remainingNetworks,omitempty"`

	// Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product
	VrackName string `json:"vrackName,omitempty"`
}

// Validate validates this iplb vrack network creation rules
func (m *IPLBVrackNetworkCreationRules) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IPLBVrackNetworkCreationRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBVrackNetworkCreationRules) UnmarshalBinary(b []byte) error {
	var res IPLBVrackNetworkCreationRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
