// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLBBackendCustomerServerBackendServer BackendServer
// swagger:model iplb.BackendCustomerServer.BackendServer
type IPLBBackendCustomerServerBackendServer struct {

	// Backend id
	// Required: true
	// Read Only: true
	BackendID int64 `json:"backendId"`

	// Backup state
	Backup bool `json:"backup,omitempty"`

	// Certificate chain. Allow server certificate verification (Avoid man-in-the-middle attacks)
	Chain string `json:"chain,omitempty"`

	// Server cookie value configured for cookie stickiness
	Cookie string `json:"cookie,omitempty"`

	// Id of your backend/server link
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// Port attached to your server. Inherited from backend if null
	Port int64 `json:"port,omitempty"`

	// Probe state
	Probe bool `json:"probe,omitempty"`

	// Enforce use of the PROXY protocol version over any connection established to this server (disabled if null)
	ProxyProtocolVersion string `json:"proxyProtocolVersion,omitempty"`

	// SSL ciphering. Probes will also be sent ciphered
	Ssl bool `json:"ssl,omitempty"`

	// Weight value. Defaults to 1. 0 if not used in load balancing.
	Weight int64 `json:"weight,omitempty"`
}

// Validate validates this iplb backend customer server backend server
func (m *IPLBBackendCustomerServerBackendServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackendID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProxyProtocolVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLBBackendCustomerServerBackendServer) validateBackendID(formats strfmt.Registry) error {

	if err := validate.Required("backendId", "body", int64(m.BackendID)); err != nil {
		return err
	}

	return nil
}

func (m *IPLBBackendCustomerServerBackendServer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

var iplbBackendCustomerServerBackendServerTypeProxyProtocolVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v1","v2","v2-ssl","v2-ssl-cn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		iplbBackendCustomerServerBackendServerTypeProxyProtocolVersionPropEnum = append(iplbBackendCustomerServerBackendServerTypeProxyProtocolVersionPropEnum, v)
	}
}

const (
	// IPLBBackendCustomerServerBackendServerProxyProtocolVersionV1 captures enum value "v1"
	IPLBBackendCustomerServerBackendServerProxyProtocolVersionV1 string = "v1"
	// IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2 captures enum value "v2"
	IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2 string = "v2"
	// IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2Ssl captures enum value "v2-ssl"
	IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2Ssl string = "v2-ssl"
	// IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2SslCn captures enum value "v2-ssl-cn"
	IPLBBackendCustomerServerBackendServerProxyProtocolVersionV2SslCn string = "v2-ssl-cn"
)

// prop value enum
func (m *IPLBBackendCustomerServerBackendServer) validateProxyProtocolVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, iplbBackendCustomerServerBackendServerTypeProxyProtocolVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLBBackendCustomerServerBackendServer) validateProxyProtocolVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyProtocolVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateProxyProtocolVersionEnum("proxyProtocolVersion", "body", m.ProxyProtocolVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLBBackendCustomerServerBackendServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBBackendCustomerServerBackendServer) UnmarshalBinary(b []byte) error {
	var res IPLBBackendCustomerServerBackendServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
