// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLBQuotaQuota Quota informations for current billing period for this zone
// swagger:model iplb.Quota.Quota
type IPLBQuotaQuota struct {

	// Quota alert value in bytes. When reached, we will send you an alert. Default : included quota with your offer
	Alert int64 `json:"alert,omitempty"`

	// Included quota value with your offer, in bytes
	// Read Only: true
	Included int64 `json:"included,omitempty"`

	// The last time your quota was updated from your Load Balancer instance
	// Read Only: true
	LastUpdateDate strfmt.DateTime `json:"lastUpdateDate,omitempty"`

	// The last time your quota was resetted (billed)
	// Read Only: true
	ResetDate strfmt.DateTime `json:"resetDate,omitempty"`

	// Total used quota value in bytes
	// Read Only: true
	Total int64 `json:"total,omitempty"`

	// Zone of your quota
	// Required: true
	// Read Only: true
	Zone string `json:"zone"`
}

// Validate validates this iplb quota quota
func (m *IPLBQuotaQuota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLBQuotaQuota) validateZone(formats strfmt.Registry) error {

	if err := validate.RequiredString("zone", "body", string(m.Zone)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLBQuotaQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLBQuotaQuota) UnmarshalBinary(b []byte) error {
	var res IPLBQuotaQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
