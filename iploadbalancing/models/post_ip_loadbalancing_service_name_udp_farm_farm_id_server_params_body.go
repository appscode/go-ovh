// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody post Ip loadbalancing service name Udp farm farm Id server params body
// swagger:model postIpLoadbalancingServiceNameUdpFarmFarmIdServerParamsBody
type PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this post Ip loadbalancing service name Udp farm farm Id server params body
func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

var postIpLoadbalancingServiceNameUdpFarmFarmIdServerParamsBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpLoadbalancingServiceNameUdpFarmFarmIdServerParamsBodyTypeStatusPropEnum = append(postIpLoadbalancingServiceNameUdpFarmFarmIdServerParamsBodyTypeStatusPropEnum, v)
	}
}

const (
	// PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBodyStatusActive captures enum value "active"
	PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBodyStatusActive string = "active"
	// PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBodyStatusInactive captures enum value "inactive"
	PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBodyStatusInactive string = "inactive"
)

// prop value enum
func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpLoadbalancingServiceNameUdpFarmFarmIdServerParamsBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody) UnmarshalBinary(b []byte) error {
	var res PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
