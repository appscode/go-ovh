// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIPLoadbalancingServiceNameQuotaHistoryParams creates a new GetIPLoadbalancingServiceNameQuotaHistoryParams object
// with the default values initialized.
func NewGetIPLoadbalancingServiceNameQuotaHistoryParams() *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	var ()
	return &GetIPLoadbalancingServiceNameQuotaHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithTimeout creates a new GetIPLoadbalancingServiceNameQuotaHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithTimeout(timeout time.Duration) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	var ()
	return &GetIPLoadbalancingServiceNameQuotaHistoryParams{

		timeout: timeout,
	}
}

// NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithContext creates a new GetIPLoadbalancingServiceNameQuotaHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithContext(ctx context.Context) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	var ()
	return &GetIPLoadbalancingServiceNameQuotaHistoryParams{

		Context: ctx,
	}
}

// NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithHTTPClient creates a new GetIPLoadbalancingServiceNameQuotaHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPLoadbalancingServiceNameQuotaHistoryParamsWithHTTPClient(client *http.Client) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	var ()
	return &GetIPLoadbalancingServiceNameQuotaHistoryParams{
		HTTPClient: client,
	}
}

/*GetIPLoadbalancingServiceNameQuotaHistoryParams contains all the parameters to send to the API endpoint
for the get IP loadbalancing service name quota history operation typically these are written to a http.Request
*/
type GetIPLoadbalancingServiceNameQuotaHistoryParams struct {

	/*HistorizedDateFrom*/
	HistorizedDateFrom *strfmt.Date
	/*HistorizedDateTo*/
	HistorizedDateTo *strfmt.Date
	/*ServiceName*/
	ServiceName string
	/*Zone*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithTimeout(timeout time.Duration) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithContext(ctx context.Context) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithHTTPClient(client *http.Client) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHistorizedDateFrom adds the historizedDateFrom to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithHistorizedDateFrom(historizedDateFrom *strfmt.Date) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetHistorizedDateFrom(historizedDateFrom)
	return o
}

// SetHistorizedDateFrom adds the historizedDateFrom to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetHistorizedDateFrom(historizedDateFrom *strfmt.Date) {
	o.HistorizedDateFrom = historizedDateFrom
}

// WithHistorizedDateTo adds the historizedDateTo to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithHistorizedDateTo(historizedDateTo *strfmt.Date) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetHistorizedDateTo(historizedDateTo)
	return o
}

// SetHistorizedDateTo adds the historizedDateTo to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetHistorizedDateTo(historizedDateTo *strfmt.Date) {
	o.HistorizedDateTo = historizedDateTo
}

// WithServiceName adds the serviceName to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithServiceName(serviceName string) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetServiceName(serviceName string) {
	o.ServiceName = serviceName
}

// WithZone adds the zone to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WithZone(zone *string) *GetIPLoadbalancingServiceNameQuotaHistoryParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get IP loadbalancing service name quota history params
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPLoadbalancingServiceNameQuotaHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HistorizedDateFrom != nil {

		// query param historizedDate.from
		var qrHistorizedDateFrom strfmt.Date
		if o.HistorizedDateFrom != nil {
			qrHistorizedDateFrom = *o.HistorizedDateFrom
		}
		qHistorizedDateFrom := qrHistorizedDateFrom.String()
		if qHistorizedDateFrom != "" {
			if err := r.SetQueryParam("historizedDate.from", qHistorizedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.HistorizedDateTo != nil {

		// query param historizedDate.to
		var qrHistorizedDateTo strfmt.Date
		if o.HistorizedDateTo != nil {
			qrHistorizedDateTo = *o.HistorizedDateTo
		}
		qHistorizedDateTo := qrHistorizedDateTo.String()
		if qHistorizedDateTo != "" {
			if err := r.SetQueryParam("historizedDate.to", qHistorizedDateTo); err != nil {
				return err
			}
		}

	}

	// path param serviceName
	if err := r.SetPathParam("serviceName", o.ServiceName); err != nil {
		return err
	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
