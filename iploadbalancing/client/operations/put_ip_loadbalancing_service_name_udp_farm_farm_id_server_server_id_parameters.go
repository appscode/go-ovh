// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/appscode/go-ovh/iploadbalancing/models"
)

// NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams creates a new PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams object
// with the default values initialized.
func NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams() *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithTimeout creates a new PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithTimeout(timeout time.Duration) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams{

		timeout: timeout,
	}
}

// NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithContext creates a new PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithContext(ctx context.Context) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams{

		Context: ctx,
	}
}

// NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithHTTPClient creates a new PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParamsWithHTTPClient(client *http.Client) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams{
		HTTPClient: client,
	}
}

/*PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams contains all the parameters to send to the API endpoint
for the put IP loadbalancing service name UDP farm farm ID server server ID operation typically these are written to a http.Request
*/
type PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams struct {

	/*FarmID*/
	FarmID int64
	/*IPLBUDPFarmServerPut*/
	IPLBUDPFarmServerPut *models.IPLBBackendUDPCustomerServerBackendUDPServer
	/*ServerID*/
	ServerID int64
	/*ServiceName*/
	ServiceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithTimeout(timeout time.Duration) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithContext(ctx context.Context) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithHTTPClient(client *http.Client) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFarmID adds the farmID to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithFarmID(farmID int64) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetFarmID(farmID)
	return o
}

// SetFarmID adds the farmId to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetFarmID(farmID int64) {
	o.FarmID = farmID
}

// WithIPLBUDPFarmServerPut adds the iPLBUDPFarmServerPut to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithIPLBUDPFarmServerPut(iPLBUDPFarmServerPut *models.IPLBBackendUDPCustomerServerBackendUDPServer) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetIPLBUDPFarmServerPut(iPLBUDPFarmServerPut)
	return o
}

// SetIPLBUDPFarmServerPut adds the iplbUdpFarmServerPut to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetIPLBUDPFarmServerPut(iPLBUDPFarmServerPut *models.IPLBBackendUDPCustomerServerBackendUDPServer) {
	o.IPLBUDPFarmServerPut = iPLBUDPFarmServerPut
}

// WithServerID adds the serverID to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithServerID(serverID int64) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetServerID(serverID)
	return o
}

// SetServerID adds the serverId to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetServerID(serverID int64) {
	o.ServerID = serverID
}

// WithServiceName adds the serviceName to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WithServiceName(serviceName string) *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the put IP loadbalancing service name UDP farm farm ID server server ID params
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) SetServiceName(serviceName string) {
	o.ServiceName = serviceName
}

// WriteToRequest writes these params to a swagger request
func (o *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param farmId
	if err := r.SetPathParam("farmId", swag.FormatInt64(o.FarmID)); err != nil {
		return err
	}

	if o.IPLBUDPFarmServerPut != nil {
		if err := r.SetBodyParam(o.IPLBUDPFarmServerPut); err != nil {
			return err
		}
	}

	// path param serverId
	if err := r.SetPathParam("serverId", swag.FormatInt64(o.ServerID)); err != nil {
		return err
	}

	// path param serviceName
	if err := r.SetPathParam("serviceName", o.ServiceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
