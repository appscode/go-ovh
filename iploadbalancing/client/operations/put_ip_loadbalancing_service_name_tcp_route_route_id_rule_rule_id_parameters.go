// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/appscode/go-ovh/iploadbalancing/models"
)

// NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams creates a new PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams object
// with the default values initialized.
func NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams() *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithTimeout creates a new PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithTimeout(timeout time.Duration) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams{

		timeout: timeout,
	}
}

// NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithContext creates a new PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithContext(ctx context.Context) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams{

		Context: ctx,
	}
}

// NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithHTTPClient creates a new PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParamsWithHTTPClient(client *http.Client) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	var ()
	return &PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams{
		HTTPClient: client,
	}
}

/*PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams contains all the parameters to send to the API endpoint
for the put IP loadbalancing service name TCP route route ID rule rule ID operation typically these are written to a http.Request
*/
type PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams struct {

	/*IPLBTCPRouteRulePut*/
	IPLBTCPRouteRulePut *models.IPLBRouteRuleRouteRule
	/*RouteID*/
	RouteID int64
	/*RuleID*/
	RuleID int64
	/*ServiceName*/
	ServiceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithTimeout(timeout time.Duration) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithContext(ctx context.Context) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithHTTPClient(client *http.Client) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPLBTCPRouteRulePut adds the iPLBTCPRouteRulePut to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithIPLBTCPRouteRulePut(iPLBTCPRouteRulePut *models.IPLBRouteRuleRouteRule) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetIPLBTCPRouteRulePut(iPLBTCPRouteRulePut)
	return o
}

// SetIPLBTCPRouteRulePut adds the iplbTcpRouteRulePut to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetIPLBTCPRouteRulePut(iPLBTCPRouteRulePut *models.IPLBRouteRuleRouteRule) {
	o.IPLBTCPRouteRulePut = iPLBTCPRouteRulePut
}

// WithRouteID adds the routeID to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithRouteID(routeID int64) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetRouteID(routeID)
	return o
}

// SetRouteID adds the routeId to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetRouteID(routeID int64) {
	o.RouteID = routeID
}

// WithRuleID adds the ruleID to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithRuleID(ruleID int64) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetRuleID(ruleID int64) {
	o.RuleID = ruleID
}

// WithServiceName adds the serviceName to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WithServiceName(serviceName string) *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the put IP loadbalancing service name TCP route route ID rule rule ID params
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) SetServiceName(serviceName string) {
	o.ServiceName = serviceName
}

// WriteToRequest writes these params to a swagger request
func (o *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IPLBTCPRouteRulePut != nil {
		if err := r.SetBodyParam(o.IPLBTCPRouteRulePut); err != nil {
			return err
		}
	}

	// path param routeId
	if err := r.SetPathParam("routeId", swag.FormatInt64(o.RouteID)); err != nil {
		return err
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", swag.FormatInt64(o.RuleID)); err != nil {
		return err
	}

	// path param serviceName
	if err := r.SetPathParam("serviceName", o.ServiceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
