// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIPLoadbalancingServiceNameHTTPFarmFarmID deletes an HTTP farm

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameHTTPFarmFarmID(params *DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameHTTPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameHTTPFarmFarmID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID deletes a server from an HTTP farm

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID(params *DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendID deletes an HTTP frontend

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendID(params *DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameHTTPRouteRouteID deletes this HTTP route

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameHTTPRouteRouteID(params *DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameHTTPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameHTTPRouteRouteID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID deletes this rule from the route

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID(params *DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameSslID deletes a custom s s l certificate

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameSslID(params *DeleteIPLoadbalancingServiceNameSslIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameSslIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameSslIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameSslID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/ssl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameSslIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameSslIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameTCPFarmFarmID deletes a TCP farm

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameTCPFarmFarmID(params *DeleteIPLoadbalancingServiceNameTCPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameTCPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameTCPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameTCPFarmFarmID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameTCPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameTCPFarmFarmIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID deletes a server from a TCP farm

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID(params *DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameTCPFrontendFrontendID deletes an TCP frontend

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameTCPFrontendFrontendID(params *DeleteIPLoadbalancingServiceNameTCPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameTCPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameTCPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameTCPFrontendFrontendID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameTCPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameTCPFrontendFrontendIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameTCPRouteRouteID deletes this TCP route

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameTCPRouteRouteID(params *DeleteIPLoadbalancingServiceNameTCPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameTCPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameTCPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameTCPRouteRouteID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameTCPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameTCPRouteRouteIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID deletes this rule from the route

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID(params *DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameUDPFarmFarmID deletes an UDP farm

BETA - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameUDPFarmFarmID(params *DeleteIPLoadbalancingServiceNameUDPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameUDPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameUDPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameUDPFarmFarmID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameUDPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameUDPFarmFarmIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID deletes a server from an UDP farm

BETA - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID(params *DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameUDPFrontendFrontendID deletes an UDP frontend

BETA - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameUDPFrontendFrontendID(params *DeleteIPLoadbalancingServiceNameUDPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameUDPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameUDPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameUDPFrontendFrontendID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameUDPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameUDPFrontendFrontendIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkID deletes this description of a private network in the v rack it must not be used by any farm server

BETA - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkID(params *DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkID",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK), nil

}

/*
DeleteIPLoadbalancingServiceNameZoneName deletes a zone

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadbalancingServiceNameZoneName(params *DeleteIPLoadbalancingServiceNameZoneNameParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadbalancingServiceNameZoneNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadbalancingServiceNameZoneNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadbalancingServiceNameZoneName",
		Method:             "DELETE",
		PathPattern:        "/ipLoadbalancing/{serviceName}/zone/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadbalancingServiceNameZoneNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadbalancingServiceNameZoneNameOK), nil

}

/*
GetIPLoadbalancing lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancing(params *GetIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancing",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingOK), nil

}

/*
GetIPLoadbalancingAvailableZones lists of zone available for an IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingAvailableZones(params *GetIPLoadbalancingAvailableZonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingAvailableZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingAvailableZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingAvailableZones",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/availableZones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingAvailableZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingAvailableZonesOK), nil

}

/*
GetIPLoadbalancingServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceName(params *GetIPLoadbalancingServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceName",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameOK), nil

}

/*
GetIPLoadbalancingServiceNameAvailableFarmProbes availables farm probes for health checks

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameAvailableFarmProbes(params *GetIPLoadbalancingServiceNameAvailableFarmProbesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameAvailableFarmProbesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameAvailableFarmProbesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameAvailableFarmProbes",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/availableFarmProbes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameAvailableFarmProbesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameAvailableFarmProbesOK), nil

}

/*
GetIPLoadbalancingServiceNameAvailableFarmType availables farm types

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameAvailableFarmType(params *GetIPLoadbalancingServiceNameAvailableFarmTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameAvailableFarmTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameAvailableFarmTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameAvailableFarmType",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/availableFarmType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameAvailableFarmTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameAvailableFarmTypeOK), nil

}

/*
GetIPLoadbalancingServiceNameAvailableFrontendType availables frontend type

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameAvailableFrontendType(params *GetIPLoadbalancingServiceNameAvailableFrontendTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameAvailableFrontendTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameAvailableFrontendTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameAvailableFrontendType",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/availableFrontendType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameAvailableFrontendTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameAvailableFrontendTypeOK), nil

}

/*
GetIPLoadbalancingServiceNameAvailableRouteActions availables route actions

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameAvailableRouteActions(params *GetIPLoadbalancingServiceNameAvailableRouteActionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameAvailableRouteActionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameAvailableRouteActionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameAvailableRouteActions",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/availableRouteActions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameAvailableRouteActionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameAvailableRouteActionsOK), nil

}

/*
GetIPLoadbalancingServiceNameAvailableRouteRules availables route match rules

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameAvailableRouteRules(params *GetIPLoadbalancingServiceNameAvailableRouteRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameAvailableRouteRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameAvailableRouteRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameAvailableRouteRules",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/availableRouteRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameAvailableRouteRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameAvailableRouteRulesOK), nil

}

/*
GetIPLoadbalancingServiceNameDefinedFarms lists of defined farms and whether they are HTTP TCP or UDP

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameDefinedFarms(params *GetIPLoadbalancingServiceNameDefinedFarmsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameDefinedFarmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameDefinedFarmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameDefinedFarms",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/definedFarms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameDefinedFarmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameDefinedFarmsOK), nil

}

/*
GetIPLoadbalancingServiceNameDefinedFrontends lists of defined frontends and whether they are HTTP TCP or UDP

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameDefinedFrontends(params *GetIPLoadbalancingServiceNameDefinedFrontendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameDefinedFrontendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameDefinedFrontendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameDefinedFrontends",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/definedFrontends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameDefinedFrontendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameDefinedFrontendsOK), nil

}

/*
GetIPLoadbalancingServiceNameDefinedRoutes lists of defined routes and whether they are HTTP or TCP

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameDefinedRoutes(params *GetIPLoadbalancingServiceNameDefinedRoutesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameDefinedRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameDefinedRoutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameDefinedRoutes",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/definedRoutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameDefinedRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameDefinedRoutesOK), nil

}

/*
GetIPLoadbalancingServiceNameFailover lists all failover ip routed to this IP l b

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameFailover(params *GetIPLoadbalancingServiceNameFailoverParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameFailoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameFailoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameFailover",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/failover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameFailoverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameFailoverOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFarm HTTPs farm for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFarm(params *GetIPLoadbalancingServiceNameHTTPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFarm",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFarmOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFarmFarmID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFarmFarmID(params *GetIPLoadbalancingServiceNameHTTPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFarmFarmID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFarmFarmIDOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFarmFarmIDServer HTTPs farm s servers

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFarmFarmIDServer(params *GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFarmFarmIDServer",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID(params *GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFrontend HTTPs frontends for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFrontend(params *GetIPLoadbalancingServiceNameHTTPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFrontend",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFrontendOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPFrontendFrontendID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPFrontendFrontendID(params *GetIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPFrontendFrontendID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPRoute HTTPs routes for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPRoute(params *GetIPLoadbalancingServiceNameHTTPRouteParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPRoute",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPRouteOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPRouteRouteID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPRouteRouteID(params *GetIPLoadbalancingServiceNameHTTPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPRouteRouteID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPRouteRouteIDOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPRouteRouteIDRule HTTPs routes for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPRouteRouteIDRule(params *GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPRouteRouteIDRule",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleOK), nil

}

/*
GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID(params *GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK), nil

}

/*
GetIPLoadbalancingServiceNameInstancesState gets the effective state of your IP l b instances on IP l b servers

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameInstancesState(params *GetIPLoadbalancingServiceNameInstancesStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameInstancesStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameInstancesStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameInstancesState",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/instancesState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameInstancesStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameInstancesStateOK), nil

}

/*
GetIPLoadbalancingServiceNameNatIP Ips subnet used by o v h to nat requests on your IP l b to your backends you must ensure that your backends are not part of a network that overlap with this one

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameNatIP(params *GetIPLoadbalancingServiceNameNatIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameNatIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameNatIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameNatIP",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/natIp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameNatIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameNatIPOK), nil

}

/*
GetIPLoadbalancingServiceNamePendingChanges lists the pending changes on your load balancer configuration per zone

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNamePendingChanges(params *GetIPLoadbalancingServiceNamePendingChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNamePendingChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNamePendingChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNamePendingChanges",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/pendingChanges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNamePendingChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNamePendingChangesOK), nil

}

/*
GetIPLoadbalancingServiceNameQuota availables quota informations for current billing period per zone

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameQuota(params *GetIPLoadbalancingServiceNameQuotaParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameQuota",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/quota",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameQuotaOK), nil

}

/*
GetIPLoadbalancingServiceNameQuotaHistory quota history informations per month

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameQuotaHistory(params *GetIPLoadbalancingServiceNameQuotaHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameQuotaHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameQuotaHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameQuotaHistory",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/quotaHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameQuotaHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameQuotaHistoryOK), nil

}

/*
GetIPLoadbalancingServiceNameQuotaHistoryID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameQuotaHistoryID(params *GetIPLoadbalancingServiceNameQuotaHistoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameQuotaHistoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameQuotaHistoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameQuotaHistoryID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/quotaHistory/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameQuotaHistoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameQuotaHistoryIDOK), nil

}

/*
GetIPLoadbalancingServiceNameQuotaZone gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameQuotaZone(params *GetIPLoadbalancingServiceNameQuotaZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameQuotaZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameQuotaZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameQuotaZone",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/quota/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameQuotaZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameQuotaZoneOK), nil

}

/*
GetIPLoadbalancingServiceNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameServiceInfos(params *GetIPLoadbalancingServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameServiceInfosOK), nil

}

/*
GetIPLoadbalancingServiceNameSsl ssls for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameSsl(params *GetIPLoadbalancingServiceNameSslParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameSslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameSslParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameSsl",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/ssl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameSslReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameSslOK), nil

}

/*
GetIPLoadbalancingServiceNameSslID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameSslID(params *GetIPLoadbalancingServiceNameSslIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameSslIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameSslIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameSslID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/ssl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameSslIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameSslIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFarm TCPs farm for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFarm(params *GetIPLoadbalancingServiceNameTCPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFarm",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFarmOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFarmFarmID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFarmFarmID(params *GetIPLoadbalancingServiceNameTCPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFarmFarmID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFarmFarmIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFarmFarmIDServer TCPs farm s servers

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFarmFarmIDServer(params *GetIPLoadbalancingServiceNameTCPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFarmFarmIDServer",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFarmFarmIDServerOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID(params *GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFrontend TCPs frontends for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFrontend(params *GetIPLoadbalancingServiceNameTCPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFrontend",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFrontendOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPFrontendFrontendID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPFrontendFrontendID(params *GetIPLoadbalancingServiceNameTCPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPFrontendFrontendID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPFrontendFrontendIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPRoute TCPs routes for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPRoute(params *GetIPLoadbalancingServiceNameTCPRouteParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPRoute",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPRouteOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPRouteRouteID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPRouteRouteID(params *GetIPLoadbalancingServiceNameTCPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPRouteRouteID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPRouteRouteIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPRouteRouteIDRule HTTPs routes for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPRouteRouteIDRule(params *GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPRouteRouteIDRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPRouteRouteIDRule",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleOK), nil

}

/*
GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID(params *GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK), nil

}

/*
GetIPLoadbalancingServiceNameTask tasks for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTask(params *GetIPLoadbalancingServiceNameTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTask",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTaskOK), nil

}

/*
GetIPLoadbalancingServiceNameTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameTaskID(params *GetIPLoadbalancingServiceNameTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameTaskID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/task/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameTaskIDOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFarm UDPs farm for this iplb

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFarm(params *GetIPLoadbalancingServiceNameUDPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFarm",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFarmOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFarmFarmID gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFarmFarmID(params *GetIPLoadbalancingServiceNameUDPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFarmFarmID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFarmFarmIDOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFarmFarmIDServer UDPs farm s servers

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFarmFarmIDServer(params *GetIPLoadbalancingServiceNameUDPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFarmFarmIDServer",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFarmFarmIDServerOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID(params *GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFrontend UDPs frontends for this iplb

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFrontend(params *GetIPLoadbalancingServiceNameUDPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFrontend",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFrontendOK), nil

}

/*
GetIPLoadbalancingServiceNameUDPFrontendFrontendID gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameUDPFrontendFrontendID(params *GetIPLoadbalancingServiceNameUDPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameUDPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameUDPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameUDPFrontendFrontendID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameUDPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameUDPFrontendFrontendIDOK), nil

}

/*
GetIPLoadbalancingServiceNameVrackNetwork descriptions of private networks in the v rack attached to this load balancer

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameVrackNetwork(params *GetIPLoadbalancingServiceNameVrackNetworkParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameVrackNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameVrackNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameVrackNetwork",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameVrackNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameVrackNetworkOK), nil

}

/*
GetIPLoadbalancingServiceNameVrackNetworkCreationRules rules to create a network attached to a vrack

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameVrackNetworkCreationRules(params *GetIPLoadbalancingServiceNameVrackNetworkCreationRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameVrackNetworkCreationRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameVrackNetworkCreationRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameVrackNetworkCreationRules",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/networkCreationRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameVrackNetworkCreationRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameVrackNetworkCreationRulesOK), nil

}

/*
GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkID gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkID(params *GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkID",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK), nil

}

/*
GetIPLoadbalancingServiceNameZone zones for this iplb

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameZone(params *GetIPLoadbalancingServiceNameZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameZone",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameZoneOK), nil

}

/*
GetIPLoadbalancingServiceNameZoneName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadbalancingServiceNameZoneName(params *GetIPLoadbalancingServiceNameZoneNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadbalancingServiceNameZoneNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadbalancingServiceNameZoneNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadbalancingServiceNameZoneName",
		Method:             "GET",
		PathPattern:        "/ipLoadbalancing/{serviceName}/zone/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadbalancingServiceNameZoneNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadbalancingServiceNameZoneNameOK), nil

}

/*
PostIPLoadbalancingServiceNameChangeContact launches a contact change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameChangeContact(params *PostIPLoadbalancingServiceNameChangeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameChangeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameChangeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameChangeContact",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/changeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameChangeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameChangeContactOK), nil

}

/*
PostIPLoadbalancingServiceNameConfirmTermination confirms termination of your service

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameConfirmTermination(params *PostIPLoadbalancingServiceNameConfirmTerminationParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameConfirmTerminationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameConfirmTerminationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameConfirmTermination",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/confirmTermination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameConfirmTerminationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameConfirmTerminationOK), nil

}

/*
PostIPLoadbalancingServiceNameFreeCertificate orders a free certificate we order and deliver it for you

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameFreeCertificate(params *PostIPLoadbalancingServiceNameFreeCertificateParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameFreeCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameFreeCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameFreeCertificate",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/freeCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameFreeCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameFreeCertificateOK), nil

}

/*
PostIPLoadbalancingServiceNameHTTPFarm adds a new HTTP farm on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameHTTPFarm(params *PostIPLoadbalancingServiceNameHTTPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameHTTPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameHTTPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameHTTPFarm",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameHTTPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameHTTPFarmOK), nil

}

/*
PostIPLoadbalancingServiceNameHTTPFarmFarmIDServer adds a server to an HTTP farm

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameHTTPFarmFarmIDServer(params *PostIPLoadbalancingServiceNameHTTPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameHTTPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameHTTPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameHTTPFarmFarmIDServer",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameHTTPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameHTTPFarmFarmIDServerOK), nil

}

/*
PostIPLoadbalancingServiceNameHTTPFrontend adds a new http frontend on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameHTTPFrontend(params *PostIPLoadbalancingServiceNameHTTPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameHTTPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameHTTPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameHTTPFrontend",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameHTTPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameHTTPFrontendOK), nil

}

/*
PostIPLoadbalancingServiceNameHTTPRoute adds a new HTTP route to your frontend

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameHTTPRoute(params *PostIPLoadbalancingServiceNameHTTPRouteParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameHTTPRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameHTTPRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameHTTPRoute",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameHTTPRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameHTTPRouteOK), nil

}

/*
PostIPLoadbalancingServiceNameHTTPRouteRouteIDRule adds a new rule to your route

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameHTTPRouteRouteIDRule(params *PostIPLoadbalancingServiceNameHTTPRouteRouteIDRuleParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameHTTPRouteRouteIDRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameHTTPRouteRouteIDRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameHTTPRouteRouteIDRule",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameHTTPRouteRouteIDRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameHTTPRouteRouteIDRuleOK), nil

}

/*
PostIPLoadbalancingServiceNameRefresh applies the configuration to your iplb

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameRefresh(params *PostIPLoadbalancingServiceNameRefreshParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameRefreshParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameRefresh",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameRefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameRefreshOK), nil

}

/*
PostIPLoadbalancingServiceNameSsl adds a new custom s s l certificate on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameSsl(params *PostIPLoadbalancingServiceNameSslParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameSslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameSslParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameSsl",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/ssl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameSslReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameSslOK), nil

}

/*
PostIPLoadbalancingServiceNameTCPFarm adds a new TCP farm on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTCPFarm(params *PostIPLoadbalancingServiceNameTCPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTCPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTCPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTCPFarm",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTCPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTCPFarmOK), nil

}

/*
PostIPLoadbalancingServiceNameTCPFarmFarmIDServer adds a server to a TCP farm

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTCPFarmFarmIDServer(params *PostIPLoadbalancingServiceNameTCPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTCPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTCPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTCPFarmFarmIDServer",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTCPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTCPFarmFarmIDServerOK), nil

}

/*
PostIPLoadbalancingServiceNameTCPFrontend adds a new TCP frontend on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTCPFrontend(params *PostIPLoadbalancingServiceNameTCPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTCPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTCPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTCPFrontend",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTCPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTCPFrontendOK), nil

}

/*
PostIPLoadbalancingServiceNameTCPRoute adds a new TCP route to your frontend

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTCPRoute(params *PostIPLoadbalancingServiceNameTCPRouteParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTCPRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTCPRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTCPRoute",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTCPRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTCPRouteOK), nil

}

/*
PostIPLoadbalancingServiceNameTCPRouteRouteIDRule adds a new rule to your route

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTCPRouteRouteIDRule(params *PostIPLoadbalancingServiceNameTCPRouteRouteIDRuleParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTCPRouteRouteIDRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTCPRouteRouteIDRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTCPRouteRouteIDRule",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTCPRouteRouteIDRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTCPRouteRouteIDRuleOK), nil

}

/*
PostIPLoadbalancingServiceNameTerminate terminates your service

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameTerminate(params *PostIPLoadbalancingServiceNameTerminateParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameTerminateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameTerminate",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameTerminateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameTerminateOK), nil

}

/*
PostIPLoadbalancingServiceNameUDPFarm adds a new UDP farm on your IP load balancing

BETA - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameUDPFarm(params *PostIPLoadbalancingServiceNameUDPFarmParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameUDPFarmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameUDPFarmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameUDPFarm",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameUDPFarmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameUDPFarmOK), nil

}

/*
PostIPLoadbalancingServiceNameUDPFarmFarmIDServer adds a server to an UDP farm

BETA - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameUDPFarmFarmIDServer(params *PostIPLoadbalancingServiceNameUDPFarmFarmIDServerParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameUDPFarmFarmIDServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameUDPFarmFarmIDServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameUDPFarmFarmIDServer",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameUDPFarmFarmIDServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameUDPFarmFarmIDServerOK), nil

}

/*
PostIPLoadbalancingServiceNameUDPFrontend adds a new UDP frontend on your IP load balancing

BETA - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameUDPFrontend(params *PostIPLoadbalancingServiceNameUDPFrontendParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameUDPFrontendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameUDPFrontendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameUDPFrontend",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/frontend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameUDPFrontendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameUDPFrontendOK), nil

}

/*
PostIPLoadbalancingServiceNameVrackNetwork adds a description of a private network in the attached v rack

BETA - authentication required
*/
func (a *Client) PostIPLoadbalancingServiceNameVrackNetwork(params *PostIPLoadbalancingServiceNameVrackNetworkParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadbalancingServiceNameVrackNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadbalancingServiceNameVrackNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadbalancingServiceNameVrackNetwork",
		Method:             "POST",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/network",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadbalancingServiceNameVrackNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadbalancingServiceNameVrackNetworkOK), nil

}

/*
PutIPLoadbalancingServiceName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceName(params *PutIPLoadbalancingServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceName",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameOK), nil

}

/*
PutIPLoadbalancingServiceNameHTTPFarmFarmID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameHTTPFarmFarmID(params *PutIPLoadbalancingServiceNameHTTPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameHTTPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameHTTPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameHTTPFarmFarmID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameHTTPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameHTTPFarmFarmIDOK), nil

}

/*
PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID(params *PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameHTTPFarmFarmIDServerServerIDOK), nil

}

/*
PutIPLoadbalancingServiceNameHTTPFrontendFrontendID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameHTTPFrontendFrontendID(params *PutIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameHTTPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameHTTPFrontendFrontendID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameHTTPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameHTTPFrontendFrontendIDOK), nil

}

/*
PutIPLoadbalancingServiceNameHTTPRouteRouteID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameHTTPRouteRouteID(params *PutIPLoadbalancingServiceNameHTTPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameHTTPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameHTTPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameHTTPRouteRouteID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameHTTPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameHTTPRouteRouteIDOK), nil

}

/*
PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID(params *PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameHTTPRouteRouteIDRuleRuleIDOK), nil

}

/*
PutIPLoadbalancingServiceNameQuotaZone alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameQuotaZone(params *PutIPLoadbalancingServiceNameQuotaZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameQuotaZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameQuotaZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameQuotaZone",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/quota/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameQuotaZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameQuotaZoneOK), nil

}

/*
PutIPLoadbalancingServiceNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameServiceInfos(params *PutIPLoadbalancingServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameServiceInfosOK), nil

}

/*
PutIPLoadbalancingServiceNameSslID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameSslID(params *PutIPLoadbalancingServiceNameSslIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameSslIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameSslIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameSslID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/ssl/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameSslIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameSslIDOK), nil

}

/*
PutIPLoadbalancingServiceNameTCPFarmFarmID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameTCPFarmFarmID(params *PutIPLoadbalancingServiceNameTCPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameTCPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameTCPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameTCPFarmFarmID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameTCPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameTCPFarmFarmIDOK), nil

}

/*
PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID(params *PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameTCPFarmFarmIDServerServerIDOK), nil

}

/*
PutIPLoadbalancingServiceNameTCPFrontendFrontendID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameTCPFrontendFrontendID(params *PutIPLoadbalancingServiceNameTCPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameTCPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameTCPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameTCPFrontendFrontendID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameTCPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameTCPFrontendFrontendIDOK), nil

}

/*
PutIPLoadbalancingServiceNameTCPRouteRouteID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameTCPRouteRouteID(params *PutIPLoadbalancingServiceNameTCPRouteRouteIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameTCPRouteRouteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameTCPRouteRouteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameTCPRouteRouteID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameTCPRouteRouteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameTCPRouteRouteIDOK), nil

}

/*
PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID(params *PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameTCPRouteRouteIDRuleRuleIDOK), nil

}

/*
PutIPLoadbalancingServiceNameUDPFarmFarmID alters this object properties

BETA - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameUDPFarmFarmID(params *PutIPLoadbalancingServiceNameUDPFarmFarmIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameUDPFarmFarmIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameUDPFarmFarmIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameUDPFarmFarmID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameUDPFarmFarmIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameUDPFarmFarmIDOK), nil

}

/*
PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID alters this object properties

BETA - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID(params *PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameUDPFarmFarmIDServerServerIDOK), nil

}

/*
PutIPLoadbalancingServiceNameUDPFrontendFrontendID alters this object properties

BETA - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameUDPFrontendFrontendID(params *PutIPLoadbalancingServiceNameUDPFrontendFrontendIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameUDPFrontendFrontendIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameUDPFrontendFrontendIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameUDPFrontendFrontendID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameUDPFrontendFrontendIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameUDPFrontendFrontendIDOK), nil

}

/*
PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkID alters this object properties

BETA - authentication required
*/
func (a *Client) PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkID(params *PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkID",
		Method:             "PUT",
		PathPattern:        "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadbalancingServiceNameVrackNetworkVrackNetworkIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
