// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VrackAllowedServices A structure given all service allowed for this vrack
// swagger:model vrack.AllowedServices
type VrackAllowedServices struct {

	// list of publicCloud projects allowed to be connected to vrack
	CloudProject []string `json:"cloudProject"`

	// list of dedicated cloud allowed to be connected to vrack
	DedicatedCloud []string `json:"dedicatedCloud"`

	// list of dedicated cloud datacenters allowed to be connected to vrack
	DedicatedCloudDatacenter []string `json:"dedicatedCloudDatacenter"`

	// list of dedicated connect links allowed to be connected to vrack
	DedicatedConnect []string `json:"dedicatedConnect"`

	// list of dedicated servers allowed to be connected to vrack
	DedicatedServer []string `json:"dedicatedServer"`

	// dedicated server interface
	DedicatedServerInterface VrackAllowedServicesDedicatedServerInterface `json:"dedicatedServerInterface"`

	// list of blocks allowed to be connected to vrack
	IP []string `json:"ip"`

	// list of ipLoadbalancing allowed to be connected to vrack
	IPLB []string `json:"iplb"`

	// list of legacy vrack (1.0) allowed to be connected to vrack
	LegacyVrack []string `json:"legacyVrack"`
}

// Validate validates this vrack allowed services
func (m *VrackAllowedServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDedicatedCloud(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDedicatedCloudDatacenter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDedicatedConnect(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDedicatedServer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPLB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLegacyVrack(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VrackAllowedServices) validateCloudProject(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProject) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateDedicatedCloud(formats strfmt.Registry) error {

	if swag.IsZero(m.DedicatedCloud) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateDedicatedCloudDatacenter(formats strfmt.Registry) error {

	if swag.IsZero(m.DedicatedCloudDatacenter) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateDedicatedConnect(formats strfmt.Registry) error {

	if swag.IsZero(m.DedicatedConnect) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateDedicatedServer(formats strfmt.Registry) error {

	if swag.IsZero(m.DedicatedServer) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateIP(formats strfmt.Registry) error {

	if swag.IsZero(m.IP) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateIPLB(formats strfmt.Registry) error {

	if swag.IsZero(m.IPLB) { // not required
		return nil
	}

	return nil
}

func (m *VrackAllowedServices) validateLegacyVrack(formats strfmt.Registry) error {

	if swag.IsZero(m.LegacyVrack) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VrackAllowedServices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VrackAllowedServices) UnmarshalBinary(b []byte) error {
	var res VrackAllowedServices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
