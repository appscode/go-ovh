// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteVrackServiceNameCloudProjectProject removes this public cloud project from this vrack

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameCloudProjectProject(params *DeleteVrackServiceNameCloudProjectProjectParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameCloudProjectProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameCloudProjectProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameCloudProjectProject",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/cloudProject/{project}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameCloudProjectProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameCloudProjectProjectOK), nil

}

/*
DeleteVrackServiceNameDedicatedCloudDedicatedCloud removes this dedicated cloud Vm network from this vrack

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameDedicatedCloudDedicatedCloud(params *DeleteVrackServiceNameDedicatedCloudDedicatedCloudParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameDedicatedCloudDedicatedCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameDedicatedCloudDedicatedCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameDedicatedCloudDedicatedCloud",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameDedicatedCloudDedicatedCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameDedicatedCloudDedicatedCloudOK), nil

}

/*
DeleteVrackServiceNameDedicatedServerDedicatedServer removes this server from this vrack

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameDedicatedServerDedicatedServer(params *DeleteVrackServiceNameDedicatedServerDedicatedServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameDedicatedServerDedicatedServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameDedicatedServerDedicatedServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameDedicatedServerDedicatedServer",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/dedicatedServer/{dedicatedServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameDedicatedServerDedicatedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameDedicatedServerDedicatedServerOK), nil

}

/*
DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface removes this server interface from this vrack

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface(params *DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceOK), nil

}

/*
DeleteVrackServiceNameIPIP removes this IP block from this vrack

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameIPIP(params *DeleteVrackServiceNameIPIPParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameIPIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameIPIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameIPIP",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameIPIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameIPIPOK), nil

}

/*
DeleteVrackServiceNameIPLoadbalancingIPLoadbalancing removes this ip loadbalancing from this vrack

BETA - authentication required
*/
func (a *Client) DeleteVrackServiceNameIPLoadbalancingIPLoadbalancing(params *DeleteVrackServiceNameIPLoadbalancingIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameIPLoadbalancingIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameIPLoadbalancingIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameIPLoadbalancingIPLoadbalancing",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameIPLoadbalancingIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameIPLoadbalancingIPLoadbalancingOK), nil

}

/*
DeleteVrackServiceNameLegacyVrackLegacyVrack removes this legacy vrack vrack x x x x from this vrack pn x x x x

PRODUCTION - authentication required
*/
func (a *Client) DeleteVrackServiceNameLegacyVrackLegacyVrack(params *DeleteVrackServiceNameLegacyVrackLegacyVrackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVrackServiceNameLegacyVrackLegacyVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVrackServiceNameLegacyVrackLegacyVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVrackServiceNameLegacyVrackLegacyVrack",
		Method:             "DELETE",
		PathPattern:        "/vrack/{serviceName}/legacyVrack/{legacyVrack}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVrackServiceNameLegacyVrackLegacyVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVrackServiceNameLegacyVrackLegacyVrackOK), nil

}

/*
GetVrack lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetVrack(params *GetVrackParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrack",
		Method:             "GET",
		PathPattern:        "/vrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackOK), nil

}

/*
GetVrackServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceName(params *GetVrackServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceName",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameOK), nil

}

/*
GetVrackServiceNameAllowedServices lists all services allowed in this vrack

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameAllowedServices(params *GetVrackServiceNameAllowedServicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameAllowedServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameAllowedServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameAllowedServices",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/allowedServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameAllowedServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameAllowedServicesOK), nil

}

/*
GetVrackServiceNameCloudProject vracks for public cloud project

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameCloudProject(params *GetVrackServiceNameCloudProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameCloudProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameCloudProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameCloudProject",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/cloudProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameCloudProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameCloudProjectOK), nil

}

/*
GetVrackServiceNameCloudProjectProject gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameCloudProjectProject(params *GetVrackServiceNameCloudProjectProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameCloudProjectProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameCloudProjectProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameCloudProjectProject",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/cloudProject/{project}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameCloudProjectProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameCloudProjectProjectOK), nil

}

/*
GetVrackServiceNameDedicatedCloud vracks dedicated cloud Vm network

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedCloud(params *GetVrackServiceNameDedicatedCloudParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedCloud",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedCloudOK), nil

}

/*
GetVrackServiceNameDedicatedCloudDatacenter vracks dedicated cloud datacenter

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedCloudDatacenter(params *GetVrackServiceNameDedicatedCloudDatacenterParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedCloudDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedCloudDatacenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedCloudDatacenter",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloudDatacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedCloudDatacenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedCloudDatacenterOK), nil

}

/*
GetVrackServiceNameDedicatedCloudDatacenterDatacenter gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedCloudDatacenterDatacenter(params *GetVrackServiceNameDedicatedCloudDatacenterDatacenterParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedCloudDatacenterDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedCloudDatacenterDatacenterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedCloudDatacenterDatacenter",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedCloudDatacenterDatacenterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedCloudDatacenterDatacenterOK), nil

}

/*
GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack vracks allowed for your dedicated cloud datacenter

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack(params *GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrack",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/allowedVrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedCloudDatacenterDatacenterAllowedVrackOK), nil

}

/*
GetVrackServiceNameDedicatedCloudDedicatedCloud gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedCloudDedicatedCloud(params *GetVrackServiceNameDedicatedCloudDedicatedCloudParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedCloudDedicatedCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedCloudDedicatedCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedCloudDedicatedCloud",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloud/{dedicatedCloud}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedCloudDedicatedCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedCloudDedicatedCloudOK), nil

}

/*
GetVrackServiceNameDedicatedConnect vracks dedicated connect

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedConnect(params *GetVrackServiceNameDedicatedConnectParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedConnect",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedConnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedConnectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedConnectOK), nil

}

/*
GetVrackServiceNameDedicatedConnectName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedConnectName(params *GetVrackServiceNameDedicatedConnectNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedConnectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedConnectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedConnectName",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedConnect/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedConnectNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedConnectNameOK), nil

}

/*
GetVrackServiceNameDedicatedServer vracks for dedicated server

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServer(params *GetVrackServiceNameDedicatedServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServer",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerOK), nil

}

/*
GetVrackServiceNameDedicatedServerDedicatedServer gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServerDedicatedServer(params *GetVrackServiceNameDedicatedServerDedicatedServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerDedicatedServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerDedicatedServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServerDedicatedServer",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServer/{dedicatedServer}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerDedicatedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerDedicatedServerOK), nil

}

/*
GetVrackServiceNameDedicatedServerDedicatedServerMrtg retrieves vrack traffic graph values

DEPRECATED (see '/dedicated/server/{serviceName}/networkInterfaceController') - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServerDedicatedServerMrtg(params *GetVrackServiceNameDedicatedServerDedicatedServerMrtgParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerDedicatedServerMrtgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerDedicatedServerMrtgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServerDedicatedServerMrtg",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServer/{dedicatedServer}/mrtg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerDedicatedServerMrtgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerDedicatedServerMrtgOK), nil

}

/*
GetVrackServiceNameDedicatedServerInterface vracks for dedicated server interface

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServerInterface(params *GetVrackServiceNameDedicatedServerInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServerInterface",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServerInterface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerInterfaceOK), nil

}

/*
GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface(params *GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterface",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServerInterface/{dedicatedServerInterface}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerInterfaceDedicatedServerInterfaceOK), nil

}

/*
GetVrackServiceNameDedicatedServerInterfaceDetails details for all dedicated server interfaces in this vrack

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameDedicatedServerInterfaceDetails(params *GetVrackServiceNameDedicatedServerInterfaceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameDedicatedServerInterfaceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameDedicatedServerInterfaceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameDedicatedServerInterfaceDetails",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/dedicatedServerInterfaceDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameDedicatedServerInterfaceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameDedicatedServerInterfaceDetailsOK), nil

}

/*
GetVrackServiceNameIP vracks for IP blocks

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameIP(params *GetVrackServiceNameIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameIP",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameIPOK), nil

}

/*
GetVrackServiceNameIPIP gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameIPIP(params *GetVrackServiceNameIPIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameIPIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameIPIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameIPIP",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameIPIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameIPIPOK), nil

}

/*
GetVrackServiceNameIPIPAvailableZone zones available to announce your block

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameIPIPAvailableZone(params *GetVrackServiceNameIPIPAvailableZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameIPIPAvailableZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameIPIPAvailableZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameIPIPAvailableZone",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/ip/{ip}/availableZone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameIPIPAvailableZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameIPIPAvailableZoneOK), nil

}

/*
GetVrackServiceNameIPLoadbalancing vracks for ip loadbalancing

BETA - authentication required
*/
func (a *Client) GetVrackServiceNameIPLoadbalancing(params *GetVrackServiceNameIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameIPLoadbalancing",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/ipLoadbalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameIPLoadbalancingOK), nil

}

/*
GetVrackServiceNameIPLoadbalancingIPLoadbalancing gets this object properties

BETA - authentication required
*/
func (a *Client) GetVrackServiceNameIPLoadbalancingIPLoadbalancing(params *GetVrackServiceNameIPLoadbalancingIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameIPLoadbalancingIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameIPLoadbalancingIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameIPLoadbalancingIPLoadbalancing",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/ipLoadbalancing/{ipLoadbalancing}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameIPLoadbalancingIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameIPLoadbalancingIPLoadbalancingOK), nil

}

/*
GetVrackServiceNameLegacyVrack vracks for legacy vrack

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameLegacyVrack(params *GetVrackServiceNameLegacyVrackParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameLegacyVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameLegacyVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameLegacyVrack",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/legacyVrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameLegacyVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameLegacyVrackOK), nil

}

/*
GetVrackServiceNameLegacyVrackLegacyVrack gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameLegacyVrackLegacyVrack(params *GetVrackServiceNameLegacyVrackLegacyVrackParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameLegacyVrackLegacyVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameLegacyVrackLegacyVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameLegacyVrackLegacyVrack",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/legacyVrack/{legacyVrack}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameLegacyVrackLegacyVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameLegacyVrackLegacyVrackOK), nil

}

/*
GetVrackServiceNameServiceInfos gets this object properties

BETA - authentication required
*/
func (a *Client) GetVrackServiceNameServiceInfos(params *GetVrackServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameServiceInfosOK), nil

}

/*
GetVrackServiceNameTask vracks tasks

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameTask(params *GetVrackServiceNameTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameTask",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameTaskOK), nil

}

/*
GetVrackServiceNameTaskTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVrackServiceNameTaskTaskID(params *GetVrackServiceNameTaskTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetVrackServiceNameTaskTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVrackServiceNameTaskTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVrackServiceNameTaskTaskID",
		Method:             "GET",
		PathPattern:        "/vrack/{serviceName}/task/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVrackServiceNameTaskTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVrackServiceNameTaskTaskIDOK), nil

}

/*
PostVrackServiceNameCloudProject adds a public cloud project to this vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameCloudProject(params *PostVrackServiceNameCloudProjectParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameCloudProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameCloudProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameCloudProject",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/cloudProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameCloudProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameCloudProjectOK), nil

}

/*
PostVrackServiceNameDedicatedCloud adds a dedicated cloud Vm network to this vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameDedicatedCloud(params *PostVrackServiceNameDedicatedCloudParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameDedicatedCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameDedicatedCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameDedicatedCloud",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameDedicatedCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameDedicatedCloudOK), nil

}

/*
PostVrackServiceNameDedicatedCloudDatacenterDatacenterMove moves your dedicated cloud datacenter from a vrack to another

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameDedicatedCloudDatacenterDatacenterMove(params *PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameDedicatedCloudDatacenterDatacenterMove",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/dedicatedCloudDatacenter/{datacenter}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameDedicatedCloudDatacenterDatacenterMoveOK), nil

}

/*
PostVrackServiceNameDedicatedServer adds a dedicated server to this vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameDedicatedServer(params *PostVrackServiceNameDedicatedServerParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameDedicatedServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameDedicatedServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameDedicatedServer",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/dedicatedServer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameDedicatedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameDedicatedServerOK), nil

}

/*
PostVrackServiceNameDedicatedServerInterface adds a dedicated server interface to this vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameDedicatedServerInterface(params *PostVrackServiceNameDedicatedServerInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameDedicatedServerInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameDedicatedServerInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameDedicatedServerInterface",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/dedicatedServerInterface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameDedicatedServerInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameDedicatedServerInterfaceOK), nil

}

/*
PostVrackServiceNameIP adds an IP block to this vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameIP(params *PostVrackServiceNameIPParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameIP",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameIPOK), nil

}

/*
PostVrackServiceNameIPIPAnnounceInZone announces IP to zone for vrack

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameIPIPAnnounceInZone(params *PostVrackServiceNameIPIPAnnounceInZoneParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameIPIPAnnounceInZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameIPIPAnnounceInZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameIPIPAnnounceInZone",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/ip/{ip}/announceInZone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameIPIPAnnounceInZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameIPIPAnnounceInZoneOK), nil

}

/*
PostVrackServiceNameIPLoadbalancing adds an ip loadbalancing to this vrack

BETA - authentication required
*/
func (a *Client) PostVrackServiceNameIPLoadbalancing(params *PostVrackServiceNameIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameIPLoadbalancing",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/ipLoadbalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameIPLoadbalancingOK), nil

}

/*
PostVrackServiceNameLegacyVrack adds a legacy vrack vrack x x x x to this vrack pn x x x x

PRODUCTION - authentication required
*/
func (a *Client) PostVrackServiceNameLegacyVrack(params *PostVrackServiceNameLegacyVrackParams, authInfo runtime.ClientAuthInfoWriter) (*PostVrackServiceNameLegacyVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVrackServiceNameLegacyVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostVrackServiceNameLegacyVrack",
		Method:             "POST",
		PathPattern:        "/vrack/{serviceName}/legacyVrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVrackServiceNameLegacyVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostVrackServiceNameLegacyVrackOK), nil

}

/*
PutVrackServiceName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutVrackServiceName(params *PutVrackServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutVrackServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVrackServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVrackServiceName",
		Method:             "PUT",
		PathPattern:        "/vrack/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVrackServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVrackServiceNameOK), nil

}

/*
PutVrackServiceNameDedicatedConnectName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutVrackServiceNameDedicatedConnectName(params *PutVrackServiceNameDedicatedConnectNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutVrackServiceNameDedicatedConnectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVrackServiceNameDedicatedConnectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVrackServiceNameDedicatedConnectName",
		Method:             "PUT",
		PathPattern:        "/vrack/{serviceName}/dedicatedConnect/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVrackServiceNameDedicatedConnectNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVrackServiceNameDedicatedConnectNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
