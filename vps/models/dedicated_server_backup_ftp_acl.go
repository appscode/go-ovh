// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DedicatedServerBackupFtpACL Backup Ftp ACL for this server and Backup Ftp
// swagger:model dedicated.Server.BackupFtpAcl
type DedicatedServerBackupFtpACL struct {

	// Wether to allow the CIFS (SMB) protocol for this ACL
	Cifs bool `json:"cifs,omitempty"`

	// Wether to allow the FTP protocol for this ACL
	Ftp bool `json:"ftp,omitempty"`

	// The IP Block specific to this ACL
	// Required: true
	// Read Only: true
	IPBlock string `json:"ipBlock"`

	// Whether the rule has been applied on the Backup Ftp
	// Required: true
	// Read Only: true
	IsApplied bool `json:"isApplied"`

	// Date of the last object modification
	// Required: true
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate"`

	// Wether to allow the NFS protocol for this ACL
	Nfs bool `json:"nfs,omitempty"`
}

// Validate validates this dedicated server backup ftp Acl
func (m *DedicatedServerBackupFtpACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsApplied(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DedicatedServerBackupFtpACL) validateIPBlock(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipBlock", "body", string(m.IPBlock)); err != nil {
		return err
	}

	return nil
}

func (m *DedicatedServerBackupFtpACL) validateIsApplied(formats strfmt.Registry) error {

	if err := validate.Required("isApplied", "body", bool(m.IsApplied)); err != nil {
		return err
	}

	return nil
}

func (m *DedicatedServerBackupFtpACL) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", strfmt.DateTime(m.LastUpdate)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DedicatedServerBackupFtpACL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DedicatedServerBackupFtpACL) UnmarshalBinary(b []byte) error {
	var res DedicatedServerBackupFtpACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
