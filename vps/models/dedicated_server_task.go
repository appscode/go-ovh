// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DedicatedServerTask Server tasks
// swagger:model dedicated.Server.Task
type DedicatedServerTask struct {

	// Details of this task
	// Read Only: true
	Comment string `json:"comment,omitempty"`

	// Completion date
	// Read Only: true
	DoneDate strfmt.DateTime `json:"doneDate,omitempty"`

	// Function name
	// Required: true
	// Read Only: true
	Function string `json:"function"`

	// last update
	// Read Only: true
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// Task Creation date
	// Required: true
	// Read Only: true
	StartDate strfmt.DateTime `json:"startDate"`

	// Task status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// the id of the task
	// Required: true
	// Read Only: true
	TaskID int64 `json:"taskId"`
}

// Validate validates this dedicated server task
func (m *DedicatedServerTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTaskID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dedicatedServerTaskTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["addVirtualMac","addWindowSplaFromExistingSerial","applyBackupFtpAcls","applyBackupFtpQuota","bypassAntiDDosGame","changePasswordBackupFTP","changeRipeOrg","checkAndReleaseIp","createBackupFTP","createOrUpdateRipeOrg","createPrivateNetwork","disableFirewall","enableFirewall","genericMoveFloatingIp","hardReboot","migrateBackupFTP","moveFloatingIp","moveVirtualMac","rebootPower8To","reinstallServer","releaseIp","removeBackupFTP","removeVirtualMac","requestAccessIPMI","resetIPMI","resetIPMISession","testIPMIhttp","testIPMIpassword","testIPMIping","virtualMacAdd","virtualMacDelete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedServerTaskTypeFunctionPropEnum = append(dedicatedServerTaskTypeFunctionPropEnum, v)
	}
}

const (
	// DedicatedServerTaskFunctionAddVirtualMac captures enum value "addVirtualMac"
	DedicatedServerTaskFunctionAddVirtualMac string = "addVirtualMac"
	// DedicatedServerTaskFunctionAddWindowSplaFromExistingSerial captures enum value "addWindowSplaFromExistingSerial"
	DedicatedServerTaskFunctionAddWindowSplaFromExistingSerial string = "addWindowSplaFromExistingSerial"
	// DedicatedServerTaskFunctionApplyBackupFtpAcls captures enum value "applyBackupFtpAcls"
	DedicatedServerTaskFunctionApplyBackupFtpAcls string = "applyBackupFtpAcls"
	// DedicatedServerTaskFunctionApplyBackupFtpQuota captures enum value "applyBackupFtpQuota"
	DedicatedServerTaskFunctionApplyBackupFtpQuota string = "applyBackupFtpQuota"
	// DedicatedServerTaskFunctionBypassAntiDDosGame captures enum value "bypassAntiDDosGame"
	DedicatedServerTaskFunctionBypassAntiDDosGame string = "bypassAntiDDosGame"
	// DedicatedServerTaskFunctionChangePasswordBackupFTP captures enum value "changePasswordBackupFTP"
	DedicatedServerTaskFunctionChangePasswordBackupFTP string = "changePasswordBackupFTP"
	// DedicatedServerTaskFunctionChangeRipeOrg captures enum value "changeRipeOrg"
	DedicatedServerTaskFunctionChangeRipeOrg string = "changeRipeOrg"
	// DedicatedServerTaskFunctionCheckAndReleaseIP captures enum value "checkAndReleaseIp"
	DedicatedServerTaskFunctionCheckAndReleaseIP string = "checkAndReleaseIp"
	// DedicatedServerTaskFunctionCreateBackupFTP captures enum value "createBackupFTP"
	DedicatedServerTaskFunctionCreateBackupFTP string = "createBackupFTP"
	// DedicatedServerTaskFunctionCreateOrUpdateRipeOrg captures enum value "createOrUpdateRipeOrg"
	DedicatedServerTaskFunctionCreateOrUpdateRipeOrg string = "createOrUpdateRipeOrg"
	// DedicatedServerTaskFunctionCreatePrivateNetwork captures enum value "createPrivateNetwork"
	DedicatedServerTaskFunctionCreatePrivateNetwork string = "createPrivateNetwork"
	// DedicatedServerTaskFunctionDisableFirewall captures enum value "disableFirewall"
	DedicatedServerTaskFunctionDisableFirewall string = "disableFirewall"
	// DedicatedServerTaskFunctionEnableFirewall captures enum value "enableFirewall"
	DedicatedServerTaskFunctionEnableFirewall string = "enableFirewall"
	// DedicatedServerTaskFunctionGenericMoveFloatingIP captures enum value "genericMoveFloatingIp"
	DedicatedServerTaskFunctionGenericMoveFloatingIP string = "genericMoveFloatingIp"
	// DedicatedServerTaskFunctionHardReboot captures enum value "hardReboot"
	DedicatedServerTaskFunctionHardReboot string = "hardReboot"
	// DedicatedServerTaskFunctionMigrateBackupFTP captures enum value "migrateBackupFTP"
	DedicatedServerTaskFunctionMigrateBackupFTP string = "migrateBackupFTP"
	// DedicatedServerTaskFunctionMoveFloatingIP captures enum value "moveFloatingIp"
	DedicatedServerTaskFunctionMoveFloatingIP string = "moveFloatingIp"
	// DedicatedServerTaskFunctionMoveVirtualMac captures enum value "moveVirtualMac"
	DedicatedServerTaskFunctionMoveVirtualMac string = "moveVirtualMac"
	// DedicatedServerTaskFunctionRebootPower8To captures enum value "rebootPower8To"
	DedicatedServerTaskFunctionRebootPower8To string = "rebootPower8To"
	// DedicatedServerTaskFunctionReinstallServer captures enum value "reinstallServer"
	DedicatedServerTaskFunctionReinstallServer string = "reinstallServer"
	// DedicatedServerTaskFunctionReleaseIP captures enum value "releaseIp"
	DedicatedServerTaskFunctionReleaseIP string = "releaseIp"
	// DedicatedServerTaskFunctionRemoveBackupFTP captures enum value "removeBackupFTP"
	DedicatedServerTaskFunctionRemoveBackupFTP string = "removeBackupFTP"
	// DedicatedServerTaskFunctionRemoveVirtualMac captures enum value "removeVirtualMac"
	DedicatedServerTaskFunctionRemoveVirtualMac string = "removeVirtualMac"
	// DedicatedServerTaskFunctionRequestAccessIPMI captures enum value "requestAccessIPMI"
	DedicatedServerTaskFunctionRequestAccessIPMI string = "requestAccessIPMI"
	// DedicatedServerTaskFunctionResetIPMI captures enum value "resetIPMI"
	DedicatedServerTaskFunctionResetIPMI string = "resetIPMI"
	// DedicatedServerTaskFunctionResetIPMISession captures enum value "resetIPMISession"
	DedicatedServerTaskFunctionResetIPMISession string = "resetIPMISession"
	// DedicatedServerTaskFunctionTestIPMIhttp captures enum value "testIPMIhttp"
	DedicatedServerTaskFunctionTestIPMIhttp string = "testIPMIhttp"
	// DedicatedServerTaskFunctionTestIPMIpassword captures enum value "testIPMIpassword"
	DedicatedServerTaskFunctionTestIPMIpassword string = "testIPMIpassword"
	// DedicatedServerTaskFunctionTestIPMIping captures enum value "testIPMIping"
	DedicatedServerTaskFunctionTestIPMIping string = "testIPMIping"
	// DedicatedServerTaskFunctionVirtualMacAdd captures enum value "virtualMacAdd"
	DedicatedServerTaskFunctionVirtualMacAdd string = "virtualMacAdd"
	// DedicatedServerTaskFunctionVirtualMacDelete captures enum value "virtualMacDelete"
	DedicatedServerTaskFunctionVirtualMacDelete string = "virtualMacDelete"
)

// prop value enum
func (m *DedicatedServerTask) validateFunctionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedServerTaskTypeFunctionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedServerTask) validateFunction(formats strfmt.Registry) error {

	if err := validate.RequiredString("function", "body", string(m.Function)); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", m.Function); err != nil {
		return err
	}

	return nil
}

func (m *DedicatedServerTask) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", strfmt.DateTime(m.StartDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var dedicatedServerTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cancelled","customerError","doing","done","init","ovhError","todo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dedicatedServerTaskTypeStatusPropEnum = append(dedicatedServerTaskTypeStatusPropEnum, v)
	}
}

const (
	// DedicatedServerTaskStatusCancelled captures enum value "cancelled"
	DedicatedServerTaskStatusCancelled string = "cancelled"
	// DedicatedServerTaskStatusCustomerError captures enum value "customerError"
	DedicatedServerTaskStatusCustomerError string = "customerError"
	// DedicatedServerTaskStatusDoing captures enum value "doing"
	DedicatedServerTaskStatusDoing string = "doing"
	// DedicatedServerTaskStatusDone captures enum value "done"
	DedicatedServerTaskStatusDone string = "done"
	// DedicatedServerTaskStatusInit captures enum value "init"
	DedicatedServerTaskStatusInit string = "init"
	// DedicatedServerTaskStatusOvhError captures enum value "ovhError"
	DedicatedServerTaskStatusOvhError string = "ovhError"
	// DedicatedServerTaskStatusTodo captures enum value "todo"
	DedicatedServerTaskStatusTodo string = "todo"
)

// prop value enum
func (m *DedicatedServerTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dedicatedServerTaskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DedicatedServerTask) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DedicatedServerTask) validateTaskID(formats strfmt.Registry) error {

	if err := validate.Required("taskId", "body", int64(m.TaskID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DedicatedServerTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DedicatedServerTask) UnmarshalBinary(b []byte) error {
	var res DedicatedServerTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
