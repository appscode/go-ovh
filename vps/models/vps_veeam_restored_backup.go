// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsVeeamRestoredBackup Currently restored backup
// swagger:model vps.Veeam.RestoredBackup
type VpsVeeamRestoredBackup struct {

	// access infos
	// Required: true
	AccessInfos *VpsVeeamInfos `json:"accessInfos"`

	// The restore point id
	// Required: true
	// Read Only: true
	RestorePointID int64 `json:"restorePointId"`

	// The restored backup state
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this vps veeam restored backup
func (m *VpsVeeamRestoredBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessInfos(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRestorePointID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpsVeeamRestoredBackup) validateAccessInfos(formats strfmt.Registry) error {

	if err := validate.Required("accessInfos", "body", m.AccessInfos); err != nil {
		return err
	}

	if m.AccessInfos != nil {

		if err := m.AccessInfos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessInfos")
			}
			return err
		}
	}

	return nil
}

func (m *VpsVeeamRestoredBackup) validateRestorePointID(formats strfmt.Registry) error {

	if err := validate.Required("restorePointId", "body", int64(m.RestorePointID)); err != nil {
		return err
	}

	return nil
}

var vpsVeeamRestoredBackupTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mounted","restoring","unmounted","unmounting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsVeeamRestoredBackupTypeStatePropEnum = append(vpsVeeamRestoredBackupTypeStatePropEnum, v)
	}
}

const (
	// VpsVeeamRestoredBackupStateMounted captures enum value "mounted"
	VpsVeeamRestoredBackupStateMounted string = "mounted"
	// VpsVeeamRestoredBackupStateRestoring captures enum value "restoring"
	VpsVeeamRestoredBackupStateRestoring string = "restoring"
	// VpsVeeamRestoredBackupStateUnmounted captures enum value "unmounted"
	VpsVeeamRestoredBackupStateUnmounted string = "unmounted"
	// VpsVeeamRestoredBackupStateUnmounting captures enum value "unmounting"
	VpsVeeamRestoredBackupStateUnmounting string = "unmounting"
)

// prop value enum
func (m *VpsVeeamRestoredBackup) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsVeeamRestoredBackupTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsVeeamRestoredBackup) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsVeeamRestoredBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsVeeamRestoredBackup) UnmarshalBinary(b []byte) error {
	var res VpsVeeamRestoredBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
