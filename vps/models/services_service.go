// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicesService Details about a Service
// swagger:model services.Service
type ServicesService struct {

	// Indicates that the service can be set up to be deleted at expiration
	// Required: true
	// Read Only: true
	CanDeleteAtExpiration bool `json:"canDeleteAtExpiration"`

	// contact admin
	// Required: true
	// Read Only: true
	ContactAdmin string `json:"contactAdmin"`

	// contact billing
	// Required: true
	// Read Only: true
	ContactBilling string `json:"contactBilling"`

	// contact tech
	// Required: true
	// Read Only: true
	ContactTech string `json:"contactTech"`

	// creation
	// Required: true
	// Read Only: true
	Creation strfmt.Date `json:"creation"`

	// domain
	// Required: true
	// Read Only: true
	Domain string `json:"domain"`

	// engaged up to
	// Read Only: true
	EngagedUpTo strfmt.Date `json:"engagedUpTo,omitempty"`

	// expiration
	// Required: true
	// Read Only: true
	Expiration strfmt.Date `json:"expiration"`

	// All the possible renew period of your service in month
	// Read Only: true
	PossibleRenewPeriod []int64 `json:"possibleRenewPeriod"`

	// renew
	Renew *ServiceRenewType `json:"renew,omitempty"`

	// renewal type
	// Required: true
	// Read Only: true
	RenewalType string `json:"renewalType"`

	// service Id
	// Required: true
	// Read Only: true
	ServiceID int64 `json:"serviceId"`

	// status
	// Required: true
	// Read Only: true
	Status string `json:"status"`
}

// Validate validates this services service
func (m *ServicesService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanDeleteAtExpiration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContactAdmin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContactBilling(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContactTech(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePossibleRenewPeriod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRenew(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRenewalType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicesService) validateCanDeleteAtExpiration(formats strfmt.Registry) error {

	if err := validate.Required("canDeleteAtExpiration", "body", bool(m.CanDeleteAtExpiration)); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateContactAdmin(formats strfmt.Registry) error {

	if err := validate.RequiredString("contactAdmin", "body", string(m.ContactAdmin)); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateContactBilling(formats strfmt.Registry) error {

	if err := validate.RequiredString("contactBilling", "body", string(m.ContactBilling)); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateContactTech(formats strfmt.Registry) error {

	if err := validate.RequiredString("contactTech", "body", string(m.ContactTech)); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateCreation(formats strfmt.Registry) error {

	if err := validate.Required("creation", "body", strfmt.Date(m.Creation)); err != nil {
		return err
	}

	if err := validate.FormatOf("creation", "body", "date", m.Creation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateDomain(formats strfmt.Registry) error {

	if err := validate.RequiredString("domain", "body", string(m.Domain)); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateExpiration(formats strfmt.Registry) error {

	if err := validate.Required("expiration", "body", strfmt.Date(m.Expiration)); err != nil {
		return err
	}

	if err := validate.FormatOf("expiration", "body", "date", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validatePossibleRenewPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.PossibleRenewPeriod) { // not required
		return nil
	}

	return nil
}

func (m *ServicesService) validateRenew(formats strfmt.Registry) error {

	if swag.IsZero(m.Renew) { // not required
		return nil
	}

	if m.Renew != nil {

		if err := m.Renew.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("renew")
			}
			return err
		}
	}

	return nil
}

var servicesServiceTypeRenewalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["automaticForcedProduct","automaticV2012","automaticV2014","automaticV2016","manual","oneShot","option"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		servicesServiceTypeRenewalTypePropEnum = append(servicesServiceTypeRenewalTypePropEnum, v)
	}
}

const (
	// ServicesServiceRenewalTypeAutomaticForcedProduct captures enum value "automaticForcedProduct"
	ServicesServiceRenewalTypeAutomaticForcedProduct string = "automaticForcedProduct"
	// ServicesServiceRenewalTypeAutomaticV2012 captures enum value "automaticV2012"
	ServicesServiceRenewalTypeAutomaticV2012 string = "automaticV2012"
	// ServicesServiceRenewalTypeAutomaticV2014 captures enum value "automaticV2014"
	ServicesServiceRenewalTypeAutomaticV2014 string = "automaticV2014"
	// ServicesServiceRenewalTypeAutomaticV2016 captures enum value "automaticV2016"
	ServicesServiceRenewalTypeAutomaticV2016 string = "automaticV2016"
	// ServicesServiceRenewalTypeManual captures enum value "manual"
	ServicesServiceRenewalTypeManual string = "manual"
	// ServicesServiceRenewalTypeOneShot captures enum value "oneShot"
	ServicesServiceRenewalTypeOneShot string = "oneShot"
	// ServicesServiceRenewalTypeOption captures enum value "option"
	ServicesServiceRenewalTypeOption string = "option"
)

// prop value enum
func (m *ServicesService) validateRenewalTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, servicesServiceTypeRenewalTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServicesService) validateRenewalType(formats strfmt.Registry) error {

	if err := validate.RequiredString("renewalType", "body", string(m.RenewalType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateRenewalTypeEnum("renewalType", "body", m.RenewalType); err != nil {
		return err
	}

	return nil
}

func (m *ServicesService) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("serviceId", "body", int64(m.ServiceID)); err != nil {
		return err
	}

	return nil
}

var servicesServiceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["expired","inCreation","ok","unPaid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		servicesServiceTypeStatusPropEnum = append(servicesServiceTypeStatusPropEnum, v)
	}
}

const (
	// ServicesServiceStatusExpired captures enum value "expired"
	ServicesServiceStatusExpired string = "expired"
	// ServicesServiceStatusInCreation captures enum value "inCreation"
	ServicesServiceStatusInCreation string = "inCreation"
	// ServicesServiceStatusOk captures enum value "ok"
	ServicesServiceStatusOk string = "ok"
	// ServicesServiceStatusUnPaid captures enum value "unPaid"
	ServicesServiceStatusUnPaid string = "unPaid"
)

// prop value enum
func (m *ServicesService) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, servicesServiceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServicesService) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicesService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicesService) UnmarshalBinary(b []byte) error {
	var res ServicesService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
