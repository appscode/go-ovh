// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsVPS VPS Virtual Machine
// swagger:model vps.VPS
type VpsVPS struct {

	// cluster
	// Required: true
	// Read Only: true
	Cluster string `json:"cluster"`

	// Set the name displayed in ManagerV6 for your VPS (max 50 chars)
	DisplayName string `json:"displayName,omitempty"`

	// Set KVM keyboard layout on VPS Cloud. Reboot your VPS after change
	Keymap string `json:"keymap,omitempty"`

	// memory limit
	// Required: true
	// Read Only: true
	MemoryLimit int64 `json:"memoryLimit"`

	// model
	// Required: true
	Model *VpsModel `json:"model"`

	// Ip blocks for OVH monitoring servers
	// Required: true
	// Read Only: true
	MonitoringIPBlocks []string `json:"monitoringIpBlocks"`

	// name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Reboot your VPS 'Cloud' after change, VPS 'Classic/LowLat' will reboot automatically. Credentials for rescue mode will be sent by mail
	NetbootMode string `json:"netbootMode,omitempty"`

	// offer type
	// Required: true
	// Read Only: true
	OfferType string `json:"offerType"`

	// sla monitoring
	SLAMonitoring bool `json:"slaMonitoring,omitempty"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// vcore
	// Required: true
	// Read Only: true
	Vcore int64 `json:"vcore"`

	// zone
	// Required: true
	// Read Only: true
	Zone string `json:"zone"`
}

// Validate validates this vps v p s
func (m *VpsVPS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeymap(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemoryLimit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonitoringIPBlocks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetbootMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOfferType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpsVPS) validateCluster(formats strfmt.Registry) error {

	if err := validate.RequiredString("cluster", "body", string(m.Cluster)); err != nil {
		return err
	}

	return nil
}

var vpsVPSTypeKeymapPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fr","us"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsVPSTypeKeymapPropEnum = append(vpsVPSTypeKeymapPropEnum, v)
	}
}

const (
	// VpsVPSKeymapFr captures enum value "fr"
	VpsVPSKeymapFr string = "fr"
	// VpsVPSKeymapUs captures enum value "us"
	VpsVPSKeymapUs string = "us"
)

// prop value enum
func (m *VpsVPS) validateKeymapEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsVPSTypeKeymapPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsVPS) validateKeymap(formats strfmt.Registry) error {

	if swag.IsZero(m.Keymap) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeymapEnum("keymap", "body", m.Keymap); err != nil {
		return err
	}

	return nil
}

func (m *VpsVPS) validateMemoryLimit(formats strfmt.Registry) error {

	if err := validate.Required("memoryLimit", "body", int64(m.MemoryLimit)); err != nil {
		return err
	}

	return nil
}

func (m *VpsVPS) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	if m.Model != nil {

		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *VpsVPS) validateMonitoringIPBlocks(formats strfmt.Registry) error {

	if err := validate.Required("monitoringIpBlocks", "body", m.MonitoringIPBlocks); err != nil {
		return err
	}

	return nil
}

func (m *VpsVPS) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

var vpsVPSTypeNetbootModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","rescue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsVPSTypeNetbootModePropEnum = append(vpsVPSTypeNetbootModePropEnum, v)
	}
}

const (
	// VpsVPSNetbootModeLocal captures enum value "local"
	VpsVPSNetbootModeLocal string = "local"
	// VpsVPSNetbootModeRescue captures enum value "rescue"
	VpsVPSNetbootModeRescue string = "rescue"
)

// prop value enum
func (m *VpsVPS) validateNetbootModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsVPSTypeNetbootModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsVPS) validateNetbootMode(formats strfmt.Registry) error {

	if swag.IsZero(m.NetbootMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetbootModeEnum("netbootMode", "body", m.NetbootMode); err != nil {
		return err
	}

	return nil
}

var vpsVPSTypeOfferTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["beta-classic","classic","cloud","cloudram","game-classic","lowlat","ssd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsVPSTypeOfferTypePropEnum = append(vpsVPSTypeOfferTypePropEnum, v)
	}
}

const (
	// VpsVPSOfferTypeBetaClassic captures enum value "beta-classic"
	VpsVPSOfferTypeBetaClassic string = "beta-classic"
	// VpsVPSOfferTypeClassic captures enum value "classic"
	VpsVPSOfferTypeClassic string = "classic"
	// VpsVPSOfferTypeCloud captures enum value "cloud"
	VpsVPSOfferTypeCloud string = "cloud"
	// VpsVPSOfferTypeCloudram captures enum value "cloudram"
	VpsVPSOfferTypeCloudram string = "cloudram"
	// VpsVPSOfferTypeGameClassic captures enum value "game-classic"
	VpsVPSOfferTypeGameClassic string = "game-classic"
	// VpsVPSOfferTypeLowlat captures enum value "lowlat"
	VpsVPSOfferTypeLowlat string = "lowlat"
	// VpsVPSOfferTypeSsd captures enum value "ssd"
	VpsVPSOfferTypeSsd string = "ssd"
)

// prop value enum
func (m *VpsVPS) validateOfferTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsVPSTypeOfferTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsVPS) validateOfferType(formats strfmt.Registry) error {

	if err := validate.RequiredString("offerType", "body", string(m.OfferType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOfferTypeEnum("offerType", "body", m.OfferType); err != nil {
		return err
	}

	return nil
}

var vpsVPSTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["installing","maintenance","rebooting","running","stopped","stopping","upgrading"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsVPSTypeStatePropEnum = append(vpsVPSTypeStatePropEnum, v)
	}
}

const (
	// VpsVPSStateInstalling captures enum value "installing"
	VpsVPSStateInstalling string = "installing"
	// VpsVPSStateMaintenance captures enum value "maintenance"
	VpsVPSStateMaintenance string = "maintenance"
	// VpsVPSStateRebooting captures enum value "rebooting"
	VpsVPSStateRebooting string = "rebooting"
	// VpsVPSStateRunning captures enum value "running"
	VpsVPSStateRunning string = "running"
	// VpsVPSStateStopped captures enum value "stopped"
	VpsVPSStateStopped string = "stopped"
	// VpsVPSStateStopping captures enum value "stopping"
	VpsVPSStateStopping string = "stopping"
	// VpsVPSStateUpgrading captures enum value "upgrading"
	VpsVPSStateUpgrading string = "upgrading"
)

// prop value enum
func (m *VpsVPS) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsVPSTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsVPS) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *VpsVPS) validateVcore(formats strfmt.Registry) error {

	if err := validate.Required("vcore", "body", int64(m.Vcore)); err != nil {
		return err
	}

	return nil
}

func (m *VpsVPS) validateZone(formats strfmt.Registry) error {

	if err := validate.RequiredString("zone", "body", string(m.Zone)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsVPS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsVPS) UnmarshalBinary(b []byte) error {
	var res VpsVPS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
