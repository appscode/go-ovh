// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsSoftware Available softwares on a Template
// swagger:model vps.Software
type VpsSoftware struct {

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this vps software
func (m *VpsSoftware) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpsSoftware) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *VpsSoftware) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

var vpsSoftwareTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deprecated","stable","testing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsSoftwareTypeStatusPropEnum = append(vpsSoftwareTypeStatusPropEnum, v)
	}
}

const (
	// VpsSoftwareStatusDeprecated captures enum value "deprecated"
	VpsSoftwareStatusDeprecated string = "deprecated"
	// VpsSoftwareStatusStable captures enum value "stable"
	VpsSoftwareStatusStable string = "stable"
	// VpsSoftwareStatusTesting captures enum value "testing"
	VpsSoftwareStatusTesting string = "testing"
)

// prop value enum
func (m *VpsSoftware) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsSoftwareTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsSoftware) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var vpsSoftwareTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["database","environment","webserver"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsSoftwareTypeTypePropEnum = append(vpsSoftwareTypeTypePropEnum, v)
	}
}

const (
	// VpsSoftwareTypeDatabase captures enum value "database"
	VpsSoftwareTypeDatabase string = "database"
	// VpsSoftwareTypeEnvironment captures enum value "environment"
	VpsSoftwareTypeEnvironment string = "environment"
	// VpsSoftwareTypeWebserver captures enum value "webserver"
	VpsSoftwareTypeWebserver string = "webserver"
)

// prop value enum
func (m *VpsSoftware) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsSoftwareTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsSoftware) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsSoftware) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsSoftware) UnmarshalBinary(b []byte) error {
	var res VpsSoftware
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
