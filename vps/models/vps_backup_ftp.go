// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsBackupFtp Backup Ftp assigned to this VPS
// swagger:model vps.BackupFtp
type VpsBackupFtp struct {

	// The backup FTP server name
	// Required: true
	// Read Only: true
	FtpBackupName string `json:"ftpBackupName"`

	// quota
	Quota *VpsBackupFtpQuota `json:"quota,omitempty"`

	// If not-null, gives the date since when your account was set in read-only mode because the quota was exceeded
	// Read Only: true
	ReadOnlyDate strfmt.DateTime `json:"readOnlyDate,omitempty"`

	// The backup FTP type
	// Required: true
	// Read Only: true
	Type string `json:"type"`

	// usage
	Usage *VpsBackupFtpUsage `json:"usage,omitempty"`
}

// Validate validates this vps backup ftp
func (m *VpsBackupFtp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFtpBackupName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuota(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpsBackupFtp) validateFtpBackupName(formats strfmt.Registry) error {

	if err := validate.RequiredString("ftpBackupName", "body", string(m.FtpBackupName)); err != nil {
		return err
	}

	return nil
}

func (m *VpsBackupFtp) validateQuota(formats strfmt.Registry) error {

	if swag.IsZero(m.Quota) { // not required
		return nil
	}

	if m.Quota != nil {

		if err := m.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota")
			}
			return err
		}
	}

	return nil
}

func (m *VpsBackupFtp) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *VpsBackupFtp) validateUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if m.Usage != nil {

		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsBackupFtp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsBackupFtp) UnmarshalBinary(b []byte) error {
	var res VpsBackupFtp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
