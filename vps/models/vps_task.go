// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsTask Operation on a VPS Virtual Machine
// swagger:model vps.Task
type VpsTask struct {

	// id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// progress
	// Required: true
	// Read Only: true
	Progress int64 `json:"progress"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this vps task
func (m *VpsTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpsTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *VpsTask) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", int64(m.Progress)); err != nil {
		return err
	}

	return nil
}

var vpsTaskTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blocked","cancelled","doing","done","error","paused","todo","waitingAck"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsTaskTypeStatePropEnum = append(vpsTaskTypeStatePropEnum, v)
	}
}

const (
	// VpsTaskStateBlocked captures enum value "blocked"
	VpsTaskStateBlocked string = "blocked"
	// VpsTaskStateCancelled captures enum value "cancelled"
	VpsTaskStateCancelled string = "cancelled"
	// VpsTaskStateDoing captures enum value "doing"
	VpsTaskStateDoing string = "doing"
	// VpsTaskStateDone captures enum value "done"
	VpsTaskStateDone string = "done"
	// VpsTaskStateError captures enum value "error"
	VpsTaskStateError string = "error"
	// VpsTaskStatePaused captures enum value "paused"
	VpsTaskStatePaused string = "paused"
	// VpsTaskStateTodo captures enum value "todo"
	VpsTaskStateTodo string = "todo"
	// VpsTaskStateWaitingAck captures enum value "waitingAck"
	VpsTaskStateWaitingAck string = "waitingAck"
)

// prop value enum
func (m *VpsTask) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsTaskTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsTask) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var vpsTaskTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["addVeeamBackupJob","changeRootPassword","createSnapshot","deleteSnapshot","deliverVm","getConsoleUrl","internalTask","openConsoleAccess","provisioningAdditionalIp","reOpenVm","rebootVm","reinstallVm","removeVeeamBackup","restoreFullVeeamBackup","restoreVeeamBackup","restoreVm","revertSnapshot","setMonitoring","setNetboot","startVm","stopVm","upgradeVm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsTaskTypeTypePropEnum = append(vpsTaskTypeTypePropEnum, v)
	}
}

const (
	// VpsTaskTypeAddVeeamBackupJob captures enum value "addVeeamBackupJob"
	VpsTaskTypeAddVeeamBackupJob string = "addVeeamBackupJob"
	// VpsTaskTypeChangeRootPassword captures enum value "changeRootPassword"
	VpsTaskTypeChangeRootPassword string = "changeRootPassword"
	// VpsTaskTypeCreateSnapshot captures enum value "createSnapshot"
	VpsTaskTypeCreateSnapshot string = "createSnapshot"
	// VpsTaskTypeDeleteSnapshot captures enum value "deleteSnapshot"
	VpsTaskTypeDeleteSnapshot string = "deleteSnapshot"
	// VpsTaskTypeDeliverVM captures enum value "deliverVm"
	VpsTaskTypeDeliverVM string = "deliverVm"
	// VpsTaskTypeGetConsoleURL captures enum value "getConsoleUrl"
	VpsTaskTypeGetConsoleURL string = "getConsoleUrl"
	// VpsTaskTypeInternalTask captures enum value "internalTask"
	VpsTaskTypeInternalTask string = "internalTask"
	// VpsTaskTypeOpenConsoleAccess captures enum value "openConsoleAccess"
	VpsTaskTypeOpenConsoleAccess string = "openConsoleAccess"
	// VpsTaskTypeProvisioningAdditionalIP captures enum value "provisioningAdditionalIp"
	VpsTaskTypeProvisioningAdditionalIP string = "provisioningAdditionalIp"
	// VpsTaskTypeReOpenVM captures enum value "reOpenVm"
	VpsTaskTypeReOpenVM string = "reOpenVm"
	// VpsTaskTypeRebootVM captures enum value "rebootVm"
	VpsTaskTypeRebootVM string = "rebootVm"
	// VpsTaskTypeReinstallVM captures enum value "reinstallVm"
	VpsTaskTypeReinstallVM string = "reinstallVm"
	// VpsTaskTypeRemoveVeeamBackup captures enum value "removeVeeamBackup"
	VpsTaskTypeRemoveVeeamBackup string = "removeVeeamBackup"
	// VpsTaskTypeRestoreFullVeeamBackup captures enum value "restoreFullVeeamBackup"
	VpsTaskTypeRestoreFullVeeamBackup string = "restoreFullVeeamBackup"
	// VpsTaskTypeRestoreVeeamBackup captures enum value "restoreVeeamBackup"
	VpsTaskTypeRestoreVeeamBackup string = "restoreVeeamBackup"
	// VpsTaskTypeRestoreVM captures enum value "restoreVm"
	VpsTaskTypeRestoreVM string = "restoreVm"
	// VpsTaskTypeRevertSnapshot captures enum value "revertSnapshot"
	VpsTaskTypeRevertSnapshot string = "revertSnapshot"
	// VpsTaskTypeSetMonitoring captures enum value "setMonitoring"
	VpsTaskTypeSetMonitoring string = "setMonitoring"
	// VpsTaskTypeSetNetboot captures enum value "setNetboot"
	VpsTaskTypeSetNetboot string = "setNetboot"
	// VpsTaskTypeStartVM captures enum value "startVm"
	VpsTaskTypeStartVM string = "startVm"
	// VpsTaskTypeStopVM captures enum value "stopVm"
	VpsTaskTypeStopVM string = "stopVm"
	// VpsTaskTypeUpgradeVM captures enum value "upgradeVm"
	VpsTaskTypeUpgradeVM string = "upgradeVm"
)

// prop value enum
func (m *VpsTask) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsTaskTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsTask) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsTask) UnmarshalBinary(b []byte) error {
	var res VpsTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
