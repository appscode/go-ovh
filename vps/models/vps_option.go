// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpsOption Information about the options of a VPS Virtual Machine
// swagger:model vps.Option
type VpsOption struct {

	// The option name
	// Required: true
	// Read Only: true
	Option string `json:"option"`

	// The state of the option
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this vps option
func (m *VpsOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vpsOptionTypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["additionalDisk","automatedBackup","cpanel","ftpbackup","plesk","snapshot","veeam","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsOptionTypeOptionPropEnum = append(vpsOptionTypeOptionPropEnum, v)
	}
}

const (
	// VpsOptionOptionAdditionalDisk captures enum value "additionalDisk"
	VpsOptionOptionAdditionalDisk string = "additionalDisk"
	// VpsOptionOptionAutomatedBackup captures enum value "automatedBackup"
	VpsOptionOptionAutomatedBackup string = "automatedBackup"
	// VpsOptionOptionCpanel captures enum value "cpanel"
	VpsOptionOptionCpanel string = "cpanel"
	// VpsOptionOptionFtpbackup captures enum value "ftpbackup"
	VpsOptionOptionFtpbackup string = "ftpbackup"
	// VpsOptionOptionPlesk captures enum value "plesk"
	VpsOptionOptionPlesk string = "plesk"
	// VpsOptionOptionSnapshot captures enum value "snapshot"
	VpsOptionOptionSnapshot string = "snapshot"
	// VpsOptionOptionVeeam captures enum value "veeam"
	VpsOptionOptionVeeam string = "veeam"
	// VpsOptionOptionWindows captures enum value "windows"
	VpsOptionOptionWindows string = "windows"
)

// prop value enum
func (m *VpsOption) validateOptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsOptionTypeOptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsOption) validateOption(formats strfmt.Registry) error {

	if err := validate.RequiredString("option", "body", string(m.Option)); err != nil {
		return err
	}

	// value enum
	if err := m.validateOptionEnum("option", "body", m.Option); err != nil {
		return err
	}

	return nil
}

var vpsOptionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["released","subscribed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vpsOptionTypeStatePropEnum = append(vpsOptionTypeStatePropEnum, v)
	}
}

const (
	// VpsOptionStateReleased captures enum value "released"
	VpsOptionStateReleased string = "released"
	// VpsOptionStateSubscribed captures enum value "subscribed"
	VpsOptionStateSubscribed string = "subscribed"
)

// prop value enum
func (m *VpsOption) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vpsOptionTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VpsOption) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpsOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpsOption) UnmarshalBinary(b []byte) error {
	var res VpsOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
