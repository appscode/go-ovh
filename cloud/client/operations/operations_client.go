// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCloudProjectServiceNameACLAccountID deletes ACL

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameACLAccountID(params *DeleteCloudProjectServiceNameACLAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameACLAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameACLAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameACLAccountID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/acl/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameACLAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameACLAccountIDOK), nil

}

/*
DeleteCloudProjectServiceNameAlertingID deletes alerting

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameAlertingID(params *DeleteCloudProjectServiceNameAlertingIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameAlertingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameAlertingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameAlertingID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/alerting/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameAlertingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameAlertingIDOK), nil

}

/*
DeleteCloudProjectServiceNameIPLoadbalancingID deletes the import of your load balancing IP into open stack this does not delete the IP l b but close the access of it from open stack

BETA - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameIPLoadbalancingID(params *DeleteCloudProjectServiceNameIPLoadbalancingIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameIPLoadbalancingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameIPLoadbalancingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameIPLoadbalancingID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameIPLoadbalancingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameIPLoadbalancingIDOK), nil

}

/*
DeleteCloudProjectServiceNameInstanceGroupGroupID deletes a group

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameInstanceGroupGroupID(params *DeleteCloudProjectServiceNameInstanceGroupGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameInstanceGroupGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameInstanceGroupGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameInstanceGroupGroupID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/instance/group/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameInstanceGroupGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameInstanceGroupGroupIDOK), nil

}

/*
DeleteCloudProjectServiceNameInstanceInstanceID deletes an instance

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameInstanceInstanceID(params *DeleteCloudProjectServiceNameInstanceInstanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameInstanceInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameInstanceInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameInstanceInstanceID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameInstanceInstanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameInstanceInstanceIDOK), nil

}

/*
DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID deletes an interface

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID(params *DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDOK), nil

}

/*
DeleteCloudProjectServiceNameNetworkPrivateNetworkID deletes private network

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameNetworkPrivateNetworkID(params *DeleteCloudProjectServiceNameNetworkPrivateNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameNetworkPrivateNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameNetworkPrivateNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameNetworkPrivateNetworkID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameNetworkPrivateNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameNetworkPrivateNetworkIDOK), nil

}

/*
DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetID deletes a network subnet

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetID(params *DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameNetworkPrivateNetworkIDSubnetSubnetIDOK), nil

}

/*
DeleteCloudProjectServiceNameSnapshotSnapshotID deletes a snapshot

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameSnapshotSnapshotID(params *DeleteCloudProjectServiceNameSnapshotSnapshotIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameSnapshotSnapshotIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameSnapshotSnapshotIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameSnapshotSnapshotID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/snapshot/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameSnapshotSnapshotIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameSnapshotSnapshotIDOK), nil

}

/*
DeleteCloudProjectServiceNameSshkeyKeyID deletes SSH key

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameSshkeyKeyID(params *DeleteCloudProjectServiceNameSshkeyKeyIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameSshkeyKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameSshkeyKeyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameSshkeyKeyID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/sshkey/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameSshkeyKeyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameSshkeyKeyIDOK), nil

}

/*
DeleteCloudProjectServiceNameStorageContainerID deletes container

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameStorageContainerID(params *DeleteCloudProjectServiceNameStorageContainerIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameStorageContainerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameStorageContainerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameStorageContainerID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameStorageContainerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameStorageContainerIDOK), nil

}

/*
DeleteCloudProjectServiceNameStorageContainerIDCors deletes c o r s support on your container

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameStorageContainerIDCors(params *DeleteCloudProjectServiceNameStorageContainerIDCorsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameStorageContainerIDCorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameStorageContainerIDCorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameStorageContainerIDCors",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}/cors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameStorageContainerIDCorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameStorageContainerIDCorsOK), nil

}

/*
DeleteCloudProjectServiceNameUserUserID deletes user

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameUserUserID(params *DeleteCloudProjectServiceNameUserUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameUserUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameUserUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameUserUserID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameUserUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameUserUserIDOK), nil

}

/*
DeleteCloudProjectServiceNameVolumeSnapshotSnapshotID deletes a volume snapshot

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameVolumeSnapshotSnapshotID(params *DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameVolumeSnapshotSnapshotIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameVolumeSnapshotSnapshotID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/volume/snapshot/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameVolumeSnapshotSnapshotIDOK), nil

}

/*
DeleteCloudProjectServiceNameVolumeVolumeID deletes a volume

PRODUCTION - authentication required
*/
func (a *Client) DeleteCloudProjectServiceNameVolumeVolumeID(params *DeleteCloudProjectServiceNameVolumeVolumeIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudProjectServiceNameVolumeVolumeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudProjectServiceNameVolumeVolumeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudProjectServiceNameVolumeVolumeID",
		Method:             "DELETE",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudProjectServiceNameVolumeVolumeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudProjectServiceNameVolumeVolumeIDOK), nil

}

/*
DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionID creates a delete task for all files in session

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionID(params *DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionID",
		Method:             "DELETE",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK), nil

}

/*
GetCloud lists available services

DEPRECATED (see '/cloud/project') - authentication required
*/
func (a *Client) GetCloud(params *GetCloudParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloud",
		Method:             "GET",
		PathPattern:        "/cloud",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudOK), nil

}

/*
GetCloudCreateProjectInfo gets information about a cloud project creation

PRODUCTION - authentication required
*/
func (a *Client) GetCloudCreateProjectInfo(params *GetCloudCreateProjectInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudCreateProjectInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudCreateProjectInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudCreateProjectInfo",
		Method:             "GET",
		PathPattern:        "/cloud/createProjectInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudCreateProjectInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudCreateProjectInfoOK), nil

}

/*
GetCloudPrice gets services prices

PRODUCTION - authentication required
*/
func (a *Client) GetCloudPrice(params *GetCloudPriceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudPrice",
		Method:             "GET",
		PathPattern:        "/cloud/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudPriceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudPriceOK), nil

}

/*
GetCloudProject lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProject(params *GetCloudProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProject",
		Method:             "GET",
		PathPattern:        "/cloud/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectOK), nil

}

/*
GetCloudProjectServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceName(params *GetCloudProjectServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceName",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameOK), nil

}

/*
GetCloudProjectServiceNameACL gets ACL on your cloud project

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameACL(params *GetCloudProjectServiceNameACLParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameACLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameACL",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameACLOK), nil

}

/*
GetCloudProjectServiceNameACLAccountID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameACLAccountID(params *GetCloudProjectServiceNameACLAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameACLAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameACLAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameACLAccountID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/acl/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameACLAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameACLAccountIDOK), nil

}

/*
GetCloudProjectServiceNameAlerting manages alerts on your consumption

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameAlerting(params *GetCloudProjectServiceNameAlertingParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameAlertingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameAlertingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameAlerting",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/alerting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameAlertingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameAlertingOK), nil

}

/*
GetCloudProjectServiceNameAlertingID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameAlertingID(params *GetCloudProjectServiceNameAlertingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameAlertingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameAlertingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameAlertingID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/alerting/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameAlertingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameAlertingIDOK), nil

}

/*
GetCloudProjectServiceNameAlertingIDAlert sees alerts

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameAlertingIDAlert(params *GetCloudProjectServiceNameAlertingIDAlertParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameAlertingIDAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameAlertingIDAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameAlertingIDAlert",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/alerting/{id}/alert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameAlertingIDAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameAlertingIDAlertOK), nil

}

/*
GetCloudProjectServiceNameAlertingIDAlertAlertID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameAlertingIDAlertAlertID(params *GetCloudProjectServiceNameAlertingIDAlertAlertIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameAlertingIDAlertAlertIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameAlertingIDAlertAlertIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameAlertingIDAlertAlertID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/alerting/{id}/alert/{alertId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameAlertingIDAlertAlertIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameAlertingIDAlertAlertIDOK), nil

}

/*
GetCloudProjectServiceNameBill gets your project bills

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameBill(params *GetCloudProjectServiceNameBillParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameBillOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameBillParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameBill",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/bill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameBillReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameBillOK), nil

}

/*
GetCloudProjectServiceNameConsumption gets your project consumption

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameConsumption(params *GetCloudProjectServiceNameConsumptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameConsumptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameConsumptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameConsumption",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/consumption",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameConsumptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameConsumptionOK), nil

}

/*
GetCloudProjectServiceNameCredit gets your credit

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameCredit(params *GetCloudProjectServiceNameCreditParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameCreditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameCreditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameCredit",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/credit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameCreditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameCreditOK), nil

}

/*
GetCloudProjectServiceNameCreditID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameCreditID(params *GetCloudProjectServiceNameCreditIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameCreditIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameCreditIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameCreditID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/credit/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameCreditIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameCreditIDOK), nil

}

/*
GetCloudProjectServiceNameFlavor gets flavors

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameFlavor(params *GetCloudProjectServiceNameFlavorParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameFlavorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameFlavorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameFlavor",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/flavor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameFlavorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameFlavorOK), nil

}

/*
GetCloudProjectServiceNameFlavorFlavorID gets flavor

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameFlavorFlavorID(params *GetCloudProjectServiceNameFlavorFlavorIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameFlavorFlavorIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameFlavorFlavorIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameFlavorFlavorID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/flavor/{flavorId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameFlavorFlavorIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameFlavorFlavorIDOK), nil

}

/*
GetCloudProjectServiceNameForecast gets your consumption forecast

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameForecast(params *GetCloudProjectServiceNameForecastParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameForecastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameForecastParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameForecast",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/forecast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameForecastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameForecastOK), nil

}

/*
GetCloudProjectServiceNameIP gets ips

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameIP(params *GetCloudProjectServiceNameIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameIP",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameIPOK), nil

}

/*
GetCloudProjectServiceNameIPFailover gets failover ips

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameIPFailover(params *GetCloudProjectServiceNameIPFailoverParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameIPFailoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameIPFailoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameIPFailover",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/ip/failover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameIPFailoverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameIPFailoverOK), nil

}

/*
GetCloudProjectServiceNameIPFailoverID gets failover ip

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameIPFailoverID(params *GetCloudProjectServiceNameIPFailoverIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameIPFailoverIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameIPFailoverIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameIPFailoverID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/ip/failover/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameIPFailoverIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameIPFailoverIDOK), nil

}

/*
GetCloudProjectServiceNameIPLoadbalancing manageds imported IP l b in open stack

BETA - authentication required
*/
func (a *Client) GetCloudProjectServiceNameIPLoadbalancing(params *GetCloudProjectServiceNameIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameIPLoadbalancing",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameIPLoadbalancingOK), nil

}

/*
GetCloudProjectServiceNameIPLoadbalancingID gets this object properties

BETA - authentication required
*/
func (a *Client) GetCloudProjectServiceNameIPLoadbalancingID(params *GetCloudProjectServiceNameIPLoadbalancingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameIPLoadbalancingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameIPLoadbalancingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameIPLoadbalancingID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameIPLoadbalancingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameIPLoadbalancingIDOK), nil

}

/*
GetCloudProjectServiceNameImage gets images

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameImage(params *GetCloudProjectServiceNameImageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameImage",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameImageOK), nil

}

/*
GetCloudProjectServiceNameImageImageID gets image

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameImageImageID(params *GetCloudProjectServiceNameImageImageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameImageImageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameImageImageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameImageImageID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/image/{imageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameImageImageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameImageImageIDOK), nil

}

/*
GetCloudProjectServiceNameInstance gets instances

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstance(params *GetCloudProjectServiceNameInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstance",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceOK), nil

}

/*
GetCloudProjectServiceNameInstanceGroup gets the detail of a group

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceGroup(params *GetCloudProjectServiceNameInstanceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceGroup",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceGroupOK), nil

}

/*
GetCloudProjectServiceNameInstanceGroupGroupID gets all groups

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceGroupGroupID(params *GetCloudProjectServiceNameInstanceGroupGroupIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceGroupGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceGroupGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceGroupGroupID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/group/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceGroupGroupIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceGroupGroupIDOK), nil

}

/*
GetCloudProjectServiceNameInstanceInstanceID gets instance

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceInstanceID(params *GetCloudProjectServiceNameInstanceInstanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceInstanceID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceInstanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceInstanceIDOK), nil

}

/*
GetCloudProjectServiceNameInstanceInstanceIDInterface gets interfaces

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceInstanceIDInterface(params *GetCloudProjectServiceNameInstanceInstanceIDInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceInstanceIDInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceInstanceIDInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceInstanceIDInterface",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/interface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceInstanceIDInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceInstanceIDInterfaceOK), nil

}

/*
GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID gets interface

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID(params *GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/interface/{interfaceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceInstanceIDInterfaceInterfaceIDOK), nil

}

/*
GetCloudProjectServiceNameInstanceInstanceIDMonitoring returns many statistics about the virtual machine for a given period

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameInstanceInstanceIDMonitoring(params *GetCloudProjectServiceNameInstanceInstanceIDMonitoringParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameInstanceInstanceIDMonitoringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameInstanceInstanceIDMonitoringParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameInstanceInstanceIDMonitoring",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/monitoring",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameInstanceInstanceIDMonitoringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameInstanceInstanceIDMonitoringOK), nil

}

/*
GetCloudProjectServiceNameMigration gets planned migrations

BETA - authentication required
*/
func (a *Client) GetCloudProjectServiceNameMigration(params *GetCloudProjectServiceNameMigrationParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameMigrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameMigrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameMigration",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/migration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameMigrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameMigrationOK), nil

}

/*
GetCloudProjectServiceNameMigrationMigrationID gets planned migration

BETA - authentication required
*/
func (a *Client) GetCloudProjectServiceNameMigrationMigrationID(params *GetCloudProjectServiceNameMigrationMigrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameMigrationMigrationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameMigrationMigrationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameMigrationMigrationID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/migration/{migrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameMigrationMigrationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameMigrationMigrationIDOK), nil

}

/*
GetCloudProjectServiceNameNetworkPrivate gets private networks

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameNetworkPrivate(params *GetCloudProjectServiceNameNetworkPrivateParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameNetworkPrivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameNetworkPrivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameNetworkPrivate",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/network/private",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameNetworkPrivateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameNetworkPrivateOK), nil

}

/*
GetCloudProjectServiceNameNetworkPrivateNetworkID gets private network

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameNetworkPrivateNetworkID(params *GetCloudProjectServiceNameNetworkPrivateNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameNetworkPrivateNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameNetworkPrivateNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameNetworkPrivateNetworkID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameNetworkPrivateNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameNetworkPrivateNetworkIDOK), nil

}

/*
GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnet gets network subnets

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnet(params *GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameNetworkPrivateNetworkIDSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnet",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameNetworkPrivateNetworkIDSubnetOK), nil

}

/*
GetCloudProjectServiceNameNetworkPublic gets public networks

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameNetworkPublic(params *GetCloudProjectServiceNameNetworkPublicParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameNetworkPublicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameNetworkPublicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameNetworkPublic",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/network/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameNetworkPublicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameNetworkPublicOK), nil

}

/*
GetCloudProjectServiceNameQuota gets project quotas

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameQuota(params *GetCloudProjectServiceNameQuotaParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameQuota",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/quota",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameQuotaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameQuotaOK), nil

}

/*
GetCloudProjectServiceNameRegion gets regions

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameRegion(params *GetCloudProjectServiceNameRegionParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameRegion",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/region",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameRegionOK), nil

}

/*
GetCloudProjectServiceNameRegionRegionName gets region

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameRegionRegionName(params *GetCloudProjectServiceNameRegionRegionNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameRegionRegionNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameRegionRegionNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameRegionRegionName",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/region/{regionName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameRegionRegionNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameRegionRegionNameOK), nil

}

/*
GetCloudProjectServiceNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameServiceInfos(params *GetCloudProjectServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameServiceInfosOK), nil

}

/*
GetCloudProjectServiceNameSnapshot gets snapshots

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameSnapshot(params *GetCloudProjectServiceNameSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameSnapshot",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameSnapshotOK), nil

}

/*
GetCloudProjectServiceNameSnapshotSnapshotID gets snapshot details

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameSnapshotSnapshotID(params *GetCloudProjectServiceNameSnapshotSnapshotIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameSnapshotSnapshotIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameSnapshotSnapshotIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameSnapshotSnapshotID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/snapshot/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameSnapshotSnapshotIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameSnapshotSnapshotIDOK), nil

}

/*
GetCloudProjectServiceNameSshkey gets SSH keys

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameSshkey(params *GetCloudProjectServiceNameSshkeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameSshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameSshkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameSshkey",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/sshkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameSshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameSshkeyOK), nil

}

/*
GetCloudProjectServiceNameSshkeyKeyID gets SSH key

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameSshkeyKeyID(params *GetCloudProjectServiceNameSshkeyKeyIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameSshkeyKeyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameSshkeyKeyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameSshkeyKeyID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/sshkey/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameSshkeyKeyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameSshkeyKeyIDOK), nil

}

/*
GetCloudProjectServiceNameStorage gets storage containers

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameStorage(params *GetCloudProjectServiceNameStorageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameStorage",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameStorageOK), nil

}

/*
GetCloudProjectServiceNameStorageAccess accesses to storage API

DEPRECATED (see '/cloud/project/{serviceName}/storage/access') - authentication required
*/
func (a *Client) GetCloudProjectServiceNameStorageAccess(params *GetCloudProjectServiceNameStorageAccessParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameStorageAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameStorageAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameStorageAccess",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/storage/access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameStorageAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameStorageAccessOK), nil

}

/*
GetCloudProjectServiceNameStorageContainerID gets storage container

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameStorageContainerID(params *GetCloudProjectServiceNameStorageContainerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameStorageContainerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameStorageContainerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameStorageContainerID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameStorageContainerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameStorageContainerIDOK), nil

}

/*
GetCloudProjectServiceNameUsageCurrent gets current usage

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUsageCurrent(params *GetCloudProjectServiceNameUsageCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUsageCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUsageCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUsageCurrent",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/usage/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUsageCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUsageCurrentOK), nil

}

/*
GetCloudProjectServiceNameUsageForecast gets usage forecast

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUsageForecast(params *GetCloudProjectServiceNameUsageForecastParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUsageForecastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUsageForecastParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUsageForecast",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/usage/forecast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUsageForecastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUsageForecastOK), nil

}

/*
GetCloudProjectServiceNameUsageHistory usages information on your project

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUsageHistory(params *GetCloudProjectServiceNameUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUsageHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUsageHistory",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/usage/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUsageHistoryOK), nil

}

/*
GetCloudProjectServiceNameUsageHistoryUsageID usages information details

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUsageHistoryUsageID(params *GetCloudProjectServiceNameUsageHistoryUsageIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUsageHistoryUsageIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUsageHistoryUsageIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUsageHistoryUsageID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/usage/history/{usageId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUsageHistoryUsageIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUsageHistoryUsageIDOK), nil

}

/*
GetCloudProjectServiceNameUser gets all users

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUser(params *GetCloudProjectServiceNameUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUser",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUserOK), nil

}

/*
GetCloudProjectServiceNameUserUserID gets user details

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUserUserID(params *GetCloudProjectServiceNameUserUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUserUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUserUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUserUserID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUserUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUserUserIDOK), nil

}

/*
GetCloudProjectServiceNameUserUserIDOpenrc gets r c file of open stack

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUserUserIDOpenrc(params *GetCloudProjectServiceNameUserUserIDOpenrcParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUserUserIDOpenrcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUserUserIDOpenrcParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUserUserIDOpenrc",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}/openrc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUserUserIDOpenrcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUserUserIDOpenrcOK), nil

}

/*
GetCloudProjectServiceNameUserUserIDRclone gets rclone configuration file

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameUserUserIDRclone(params *GetCloudProjectServiceNameUserUserIDRcloneParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameUserUserIDRcloneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameUserUserIDRcloneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameUserUserIDRclone",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}/rclone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameUserUserIDRcloneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameUserUserIDRcloneOK), nil

}

/*
GetCloudProjectServiceNameVolume gets volumes

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameVolume(params *GetCloudProjectServiceNameVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameVolume",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameVolumeOK), nil

}

/*
GetCloudProjectServiceNameVolumeSnapshot gets volume snapshots

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameVolumeSnapshot(params *GetCloudProjectServiceNameVolumeSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameVolumeSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameVolumeSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameVolumeSnapshot",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/volume/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameVolumeSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameVolumeSnapshotOK), nil

}

/*
GetCloudProjectServiceNameVolumeSnapshotSnapshotID gets volume snapshot details

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameVolumeSnapshotSnapshotID(params *GetCloudProjectServiceNameVolumeSnapshotSnapshotIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameVolumeSnapshotSnapshotIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameVolumeSnapshotSnapshotIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameVolumeSnapshotSnapshotID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/volume/snapshot/{snapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameVolumeSnapshotSnapshotIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameVolumeSnapshotSnapshotIDOK), nil

}

/*
GetCloudProjectServiceNameVolumeVolumeID gets volume details

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameVolumeVolumeID(params *GetCloudProjectServiceNameVolumeVolumeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameVolumeVolumeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameVolumeVolumeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameVolumeVolumeID",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameVolumeVolumeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameVolumeVolumeIDOK), nil

}

/*
GetCloudProjectServiceNameVrack gets vrack where this project is associated

PRODUCTION - authentication required
*/
func (a *Client) GetCloudProjectServiceNameVrack(params *GetCloudProjectServiceNameVrackParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudProjectServiceNameVrackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProjectServiceNameVrackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudProjectServiceNameVrack",
		Method:             "GET",
		PathPattern:        "/cloud/project/{serviceName}/vrack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProjectServiceNameVrackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudProjectServiceNameVrackOK), nil

}

/*
GetCloudServiceNamePca lists available services

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePca(params *GetCloudServiceNamePcaParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePca",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceName gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceName(params *GetCloudServiceNamePcaPcaServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceName",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameBilling clouds archives billing items

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameBilling(params *GetCloudServiceNamePcaPcaServiceNameBillingParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameBillingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameBilling",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameBillingOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameBillingBillingID gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameBillingBillingID(params *GetCloudServiceNamePcaPcaServiceNameBillingBillingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameBillingBillingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameBillingBillingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameBillingBillingID",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/billing/{billingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameBillingBillingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameBillingBillingIDOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameServiceInfos gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameServiceInfos(params *GetCloudServiceNamePcaPcaServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameServiceInfosOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameSessions clouds archives sessions for account

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameSessions(params *GetCloudServiceNamePcaPcaServiceNameSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameSessions",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameSessionsOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameSessionsSessionID gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameSessionsSessionID(params *GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameSessionsSessionID",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFiles clouds archives files in session

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFiles(params *GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFiles",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileID gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileID(params *GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileID",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}/files/{fileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameSessionsSessionIDFilesFileIDOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameTasks clouds archives tasks for account

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameTasks(params *GetCloudServiceNamePcaPcaServiceNameTasksParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameTasks",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameTasksOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameTasksTaskID gets this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameTasksTaskID(params *GetCloudServiceNamePcaPcaServiceNameTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameTasksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameTasksTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameTasksTaskID",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameTasksTaskIDOK), nil

}

/*
GetCloudServiceNamePcaPcaServiceNameUsage views account current total sessions usage bytes

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) GetCloudServiceNamePcaPcaServiceNameUsage(params *GetCloudServiceNamePcaPcaServiceNameUsageParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudServiceNamePcaPcaServiceNameUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudServiceNamePcaPcaServiceNameUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudServiceNamePcaPcaServiceNameUsage",
		Method:             "GET",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudServiceNamePcaPcaServiceNameUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudServiceNamePcaPcaServiceNameUsageOK), nil

}

/*
GetCloudSubsidiaryPrice gets services prices for a subsidiary

PRODUCTION
*/
func (a *Client) GetCloudSubsidiaryPrice(params *GetCloudSubsidiaryPriceParams) (*GetCloudSubsidiaryPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudSubsidiaryPriceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCloudSubsidiaryPrice",
		Method:             "GET",
		PathPattern:        "/cloud/subsidiaryPrice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudSubsidiaryPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudSubsidiaryPriceOK), nil

}

/*
PostCloudCreateProject starts a new cloud project

PRODUCTION - authentication required
*/
func (a *Client) PostCloudCreateProject(params *PostCloudCreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudCreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudCreateProject",
		Method:             "POST",
		PathPattern:        "/cloud/createProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudCreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudCreateProjectOK), nil

}

/*
PostCloudProjectServiceNameACL creates new ACL

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameACL(params *PostCloudProjectServiceNameACLParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameACLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameACL",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameACLOK), nil

}

/*
PostCloudProjectServiceNameAlerting adds new alert

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameAlerting(params *PostCloudProjectServiceNameAlertingParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameAlertingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameAlertingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameAlerting",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/alerting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameAlertingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameAlertingOK), nil

}

/*
PostCloudProjectServiceNameCancel cancels project creation

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameCancel(params *PostCloudProjectServiceNameCancelParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameCancel",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameCancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameCancelOK), nil

}

/*
PostCloudProjectServiceNameChangeContact launches a contact change procedure

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameChangeContact(params *PostCloudProjectServiceNameChangeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameChangeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameChangeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameChangeContact",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/changeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameChangeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameChangeContactOK), nil

}

/*
PostCloudProjectServiceNameConfirmTermination confirms termination of your service

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameConfirmTermination(params *PostCloudProjectServiceNameConfirmTerminationParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameConfirmTerminationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameConfirmTerminationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameConfirmTermination",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/confirmTermination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameConfirmTerminationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameConfirmTerminationOK), nil

}

/*
PostCloudProjectServiceNameCredit adds credit to your project

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameCredit(params *PostCloudProjectServiceNameCreditParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameCreditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameCreditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameCredit",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/credit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameCreditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameCreditOK), nil

}

/*
PostCloudProjectServiceNameIPFailoverIDAttach attaches failover ip to an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameIPFailoverIDAttach(params *PostCloudProjectServiceNameIPFailoverIDAttachParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameIPFailoverIDAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameIPFailoverIDAttachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameIPFailoverIDAttach",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/ip/failover/{id}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameIPFailoverIDAttachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameIPFailoverIDAttachOK), nil

}

/*
PostCloudProjectServiceNameIPLoadbalancing imports an existing IP l b into open stack

BETA - authentication required
*/
func (a *Client) PostCloudProjectServiceNameIPLoadbalancing(params *PostCloudProjectServiceNameIPLoadbalancingParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameIPLoadbalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameIPLoadbalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameIPLoadbalancing",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameIPLoadbalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameIPLoadbalancingOK), nil

}

/*
PostCloudProjectServiceNameIPLoadbalancingIDRenew renews the import of your load balancing IP into openstack

BETA - authentication required
*/
func (a *Client) PostCloudProjectServiceNameIPLoadbalancingIDRenew(params *PostCloudProjectServiceNameIPLoadbalancingIDRenewParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameIPLoadbalancingIDRenewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameIPLoadbalancingIDRenewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameIPLoadbalancingIDRenew",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing/{id}/renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameIPLoadbalancingIDRenewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameIPLoadbalancingIDRenewOK), nil

}

/*
PostCloudProjectServiceNameIPLoadbalancingIDValidate validates the import of your load balancing IP into open stack

BETA - authentication required
*/
func (a *Client) PostCloudProjectServiceNameIPLoadbalancingIDValidate(params *PostCloudProjectServiceNameIPLoadbalancingIDValidateParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameIPLoadbalancingIDValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameIPLoadbalancingIDValidateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameIPLoadbalancingIDValidate",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/ipLoadbalancing/{id}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameIPLoadbalancingIDValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameIPLoadbalancingIDValidateOK), nil

}

/*
PostCloudProjectServiceNameInstance creates a new instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstance(params *PostCloudProjectServiceNameInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstance",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceOK), nil

}

/*
PostCloudProjectServiceNameInstanceBulk creates multiple instances

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceBulk(params *PostCloudProjectServiceNameInstanceBulkParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceBulkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceBulk",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/bulk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceBulkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceBulkOK), nil

}

/*
PostCloudProjectServiceNameInstanceGroup creates a group

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceGroup(params *PostCloudProjectServiceNameInstanceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceGroup",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceGroupOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBilling actives monthly billing on instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBilling(params *PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBillingParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBillingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBilling",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/activeMonthlyBilling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDActiveMonthlyBillingOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDApplicationAccess returns initial credentials of applications installed from public image

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDApplicationAccess(params *PostCloudProjectServiceNameInstanceInstanceIDApplicationAccessParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDApplicationAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDApplicationAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDApplicationAccess",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/applicationAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDApplicationAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDApplicationAccessOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDInterface creates interface on an instance and attached it to a network

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDInterface(params *PostCloudProjectServiceNameInstanceInstanceIDInterfaceParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDInterface",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/interface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDInterfaceOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDReboot reboots an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDReboot(params *PostCloudProjectServiceNameInstanceInstanceIDRebootParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDRebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDRebootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDReboot",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDRebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDRebootOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDReinstall reinstalls an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDReinstall(params *PostCloudProjectServiceNameInstanceInstanceIDReinstallParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDReinstallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDReinstallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDReinstall",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/reinstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDReinstallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDReinstallOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDRescueMode enables or disable rescue mode

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDRescueMode(params *PostCloudProjectServiceNameInstanceInstanceIDRescueModeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDRescueModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDRescueModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDRescueMode",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/rescueMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDRescueModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDRescueModeOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDResize migrates your instance to another flavor

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDResize(params *PostCloudProjectServiceNameInstanceInstanceIDResizeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDResizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDResizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDResize",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDResizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDResizeOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDResume resumes a suspended instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDResume(params *PostCloudProjectServiceNameInstanceInstanceIDResumeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDResumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDResume",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDResumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDResumeOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDSnapshot snapshots an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDSnapshot(params *PostCloudProjectServiceNameInstanceInstanceIDSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDSnapshot",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDSnapshotOK), nil

}

/*
PostCloudProjectServiceNameInstanceInstanceIDVnc gets v n c access to your instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameInstanceInstanceIDVnc(params *PostCloudProjectServiceNameInstanceInstanceIDVncParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameInstanceInstanceIDVncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameInstanceInstanceIDVncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameInstanceInstanceIDVnc",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}/vnc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameInstanceInstanceIDVncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameInstanceInstanceIDVncOK), nil

}

/*
PostCloudProjectServiceNameNetworkPrivate creates a new network

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameNetworkPrivate(params *PostCloudProjectServiceNameNetworkPrivateParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameNetworkPrivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameNetworkPrivateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameNetworkPrivate",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/network/private",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameNetworkPrivateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameNetworkPrivateOK), nil

}

/*
PostCloudProjectServiceNameNetworkPrivateNetworkIDRegion activates private network in a new region

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameNetworkPrivateNetworkIDRegion(params *PostCloudProjectServiceNameNetworkPrivateNetworkIDRegionParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameNetworkPrivateNetworkIDRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameNetworkPrivateNetworkIDRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameNetworkPrivateNetworkIDRegion",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}/region",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameNetworkPrivateNetworkIDRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameNetworkPrivateNetworkIDRegionOK), nil

}

/*
PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnet creates a new network subnet

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnet(params *PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameNetworkPrivateNetworkIDSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnet",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameNetworkPrivateNetworkIDSubnetOK), nil

}

/*
PostCloudProjectServiceNameRetain dos not expire the project and retain it you will have to pay for the resources you will use after using this call

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameRetain(params *PostCloudProjectServiceNameRetainParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameRetainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameRetainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameRetain",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/retain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameRetainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameRetainOK), nil

}

/*
PostCloudProjectServiceNameSshkey creates SSH key

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameSshkey(params *PostCloudProjectServiceNameSshkeyParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameSshkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameSshkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameSshkey",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/sshkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameSshkeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameSshkeyOK), nil

}

/*
PostCloudProjectServiceNameStorage creates container

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorage(params *PostCloudProjectServiceNameStorageParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorage",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageOK), nil

}

/*
PostCloudProjectServiceNameStorageAccess accesses to storage API

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorageAccess(params *PostCloudProjectServiceNameStorageAccessParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorageAccess",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage/access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageAccessOK), nil

}

/*
PostCloudProjectServiceNameStorageContainerIDCors adds c o r s support on your container

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorageContainerIDCors(params *PostCloudProjectServiceNameStorageContainerIDCorsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageContainerIDCorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageContainerIDCorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorageContainerIDCors",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}/cors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageContainerIDCorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageContainerIDCorsOK), nil

}

/*
PostCloudProjectServiceNameStorageContainerIDPublicURL gets a public temporary URL to access to one of your object

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorageContainerIDPublicURL(params *PostCloudProjectServiceNameStorageContainerIDPublicURLParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageContainerIDPublicURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageContainerIDPublicURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorageContainerIDPublicURL",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}/publicUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageContainerIDPublicURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageContainerIDPublicURLOK), nil

}

/*
PostCloudProjectServiceNameStorageContainerIDStatic deploys your container files as a static web site

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorageContainerIDStatic(params *PostCloudProjectServiceNameStorageContainerIDStaticParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageContainerIDStaticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageContainerIDStaticParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorageContainerIDStatic",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}/static",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageContainerIDStaticReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageContainerIDStaticOK), nil

}

/*
PostCloudProjectServiceNameStorageContainerIDUser creates openstack user with only access to this container

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameStorageContainerIDUser(params *PostCloudProjectServiceNameStorageContainerIDUserParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameStorageContainerIDUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameStorageContainerIDUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameStorageContainerIDUser",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/storage/{containerId}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameStorageContainerIDUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameStorageContainerIDUserOK), nil

}

/*
PostCloudProjectServiceNameTerminate terminates your service

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameTerminate(params *PostCloudProjectServiceNameTerminateParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameTerminateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameTerminate",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameTerminateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameTerminateOK), nil

}

/*
PostCloudProjectServiceNameUnleash requests more quota on your cloud project

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameUnleash(params *PostCloudProjectServiceNameUnleashParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameUnleashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameUnleashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameUnleash",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/unleash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameUnleashReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameUnleashOK), nil

}

/*
PostCloudProjectServiceNameUser creates user

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameUser(params *PostCloudProjectServiceNameUserParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameUser",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameUserOK), nil

}

/*
PostCloudProjectServiceNameUserUserIDRegeneratePassword regenerates user password

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameUserUserIDRegeneratePassword(params *PostCloudProjectServiceNameUserUserIDRegeneratePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameUserUserIDRegeneratePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameUserUserIDRegeneratePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameUserUserIDRegeneratePassword",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}/regeneratePassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameUserUserIDRegeneratePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameUserUserIDRegeneratePasswordOK), nil

}

/*
PostCloudProjectServiceNameUserUserIDToken gets token for user

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameUserUserIDToken(params *PostCloudProjectServiceNameUserUserIDTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameUserUserIDTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameUserUserIDTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameUserUserIDToken",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/user/{userId}/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameUserUserIDTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameUserUserIDTokenOK), nil

}

/*
PostCloudProjectServiceNameVolume creates a volume

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameVolume(params *PostCloudProjectServiceNameVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameVolume",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameVolumeOK), nil

}

/*
PostCloudProjectServiceNameVolumeVolumeIDAttach attaches a volume on an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameVolumeVolumeIDAttach(params *PostCloudProjectServiceNameVolumeVolumeIDAttachParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameVolumeVolumeIDAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameVolumeVolumeIDAttachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameVolumeVolumeIDAttach",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameVolumeVolumeIDAttachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameVolumeVolumeIDAttachOK), nil

}

/*
PostCloudProjectServiceNameVolumeVolumeIDDetach detaches a volume from an instance

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameVolumeVolumeIDDetach(params *PostCloudProjectServiceNameVolumeVolumeIDDetachParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameVolumeVolumeIDDetachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameVolumeVolumeIDDetachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameVolumeVolumeIDDetach",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameVolumeVolumeIDDetachReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameVolumeVolumeIDDetachOK), nil

}

/*
PostCloudProjectServiceNameVolumeVolumeIDSnapshot snapshots a volume

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameVolumeVolumeIDSnapshot(params *PostCloudProjectServiceNameVolumeVolumeIDSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameVolumeVolumeIDSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameVolumeVolumeIDSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameVolumeVolumeIDSnapshot",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}/snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameVolumeVolumeIDSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameVolumeVolumeIDSnapshotOK), nil

}

/*
PostCloudProjectServiceNameVolumeVolumeIDUpsize extends a volume

PRODUCTION - authentication required
*/
func (a *Client) PostCloudProjectServiceNameVolumeVolumeIDUpsize(params *PostCloudProjectServiceNameVolumeVolumeIDUpsizeParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudProjectServiceNameVolumeVolumeIDUpsizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudProjectServiceNameVolumeVolumeIDUpsizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudProjectServiceNameVolumeVolumeIDUpsize",
		Method:             "POST",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}/upsize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudProjectServiceNameVolumeVolumeIDUpsizeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudProjectServiceNameVolumeVolumeIDUpsizeOK), nil

}

/*
PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestore creates a restore task for session

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestore(params *PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestoreParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestore",
		Method:             "POST",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudServiceNamePcaPcaServiceNameSessionsSessionIDRestoreOK), nil

}

/*
PostCloudServiceNamePcaPcaServiceNameTasks creates a cloud archives task

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) PostCloudServiceNamePcaPcaServiceNameTasks(params *PostCloudServiceNamePcaPcaServiceNameTasksParams, authInfo runtime.ClientAuthInfoWriter) (*PostCloudServiceNamePcaPcaServiceNameTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCloudServiceNamePcaPcaServiceNameTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCloudServiceNamePcaPcaServiceNameTasks",
		Method:             "POST",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCloudServiceNamePcaPcaServiceNameTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCloudServiceNamePcaPcaServiceNameTasksOK), nil

}

/*
PutCloudProjectServiceName alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceName(params *PutCloudProjectServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceName",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameOK), nil

}

/*
PutCloudProjectServiceNameAlertingID alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceNameAlertingID(params *PutCloudProjectServiceNameAlertingIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameAlertingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameAlertingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameAlertingID",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/alerting/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameAlertingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameAlertingIDOK), nil

}

/*
PutCloudProjectServiceNameInstanceInstanceID alters an instance

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceNameInstanceInstanceID(params *PutCloudProjectServiceNameInstanceInstanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameInstanceInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameInstanceInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameInstanceInstanceID",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/instance/{instanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameInstanceInstanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameInstanceInstanceIDOK), nil

}

/*
PutCloudProjectServiceNameMigrationMigrationID updates planned migration

BETA - authentication required
*/
func (a *Client) PutCloudProjectServiceNameMigrationMigrationID(params *PutCloudProjectServiceNameMigrationMigrationIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameMigrationMigrationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameMigrationMigrationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameMigrationMigrationID",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/migration/{migrationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameMigrationMigrationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameMigrationMigrationIDOK), nil

}

/*
PutCloudProjectServiceNameNetworkPrivateNetworkID renames private network

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceNameNetworkPrivateNetworkID(params *PutCloudProjectServiceNameNetworkPrivateNetworkIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameNetworkPrivateNetworkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameNetworkPrivateNetworkIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameNetworkPrivateNetworkID",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/network/private/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameNetworkPrivateNetworkIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameNetworkPrivateNetworkIDOK), nil

}

/*
PutCloudProjectServiceNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceNameServiceInfos(params *PutCloudProjectServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameServiceInfosOK), nil

}

/*
PutCloudProjectServiceNameVolumeVolumeID updates a volume

PRODUCTION - authentication required
*/
func (a *Client) PutCloudProjectServiceNameVolumeVolumeID(params *PutCloudProjectServiceNameVolumeVolumeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudProjectServiceNameVolumeVolumeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudProjectServiceNameVolumeVolumeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudProjectServiceNameVolumeVolumeID",
		Method:             "PUT",
		PathPattern:        "/cloud/project/{serviceName}/volume/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudProjectServiceNameVolumeVolumeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudProjectServiceNameVolumeVolumeIDOK), nil

}

/*
PutCloudServiceNamePcaPcaServiceName alters this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) PutCloudServiceNamePcaPcaServiceName(params *PutCloudServiceNamePcaPcaServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudServiceNamePcaPcaServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudServiceNamePcaPcaServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudServiceNamePcaPcaServiceName",
		Method:             "PUT",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudServiceNamePcaPcaServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudServiceNamePcaPcaServiceNameOK), nil

}

/*
PutCloudServiceNamePcaPcaServiceNameServiceInfos alters this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) PutCloudServiceNamePcaPcaServiceNameServiceInfos(params *PutCloudServiceNamePcaPcaServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudServiceNamePcaPcaServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudServiceNamePcaPcaServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudServiceNamePcaPcaServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudServiceNamePcaPcaServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudServiceNamePcaPcaServiceNameServiceInfosOK), nil

}

/*
PutCloudServiceNamePcaPcaServiceNameSessionsSessionID alters this object properties

DEPRECATED (see '/cloud/project/{serviceName}/storage') - authentication required
*/
func (a *Client) PutCloudServiceNamePcaPcaServiceNameSessionsSessionID(params *PutCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCloudServiceNamePcaPcaServiceNameSessionsSessionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCloudServiceNamePcaPcaServiceNameSessionsSessionID",
		Method:             "PUT",
		PathPattern:        "/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCloudServiceNamePcaPcaServiceNameSessionsSessionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCloudServiceNamePcaPcaServiceNameSessionsSessionIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
