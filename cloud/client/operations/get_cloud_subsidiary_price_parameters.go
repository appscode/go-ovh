// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCloudSubsidiaryPriceParams creates a new GetCloudSubsidiaryPriceParams object
// with the default values initialized.
func NewGetCloudSubsidiaryPriceParams() *GetCloudSubsidiaryPriceParams {
	var ()
	return &GetCloudSubsidiaryPriceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudSubsidiaryPriceParamsWithTimeout creates a new GetCloudSubsidiaryPriceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCloudSubsidiaryPriceParamsWithTimeout(timeout time.Duration) *GetCloudSubsidiaryPriceParams {
	var ()
	return &GetCloudSubsidiaryPriceParams{

		timeout: timeout,
	}
}

// NewGetCloudSubsidiaryPriceParamsWithContext creates a new GetCloudSubsidiaryPriceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCloudSubsidiaryPriceParamsWithContext(ctx context.Context) *GetCloudSubsidiaryPriceParams {
	var ()
	return &GetCloudSubsidiaryPriceParams{

		Context: ctx,
	}
}

// NewGetCloudSubsidiaryPriceParamsWithHTTPClient creates a new GetCloudSubsidiaryPriceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCloudSubsidiaryPriceParamsWithHTTPClient(client *http.Client) *GetCloudSubsidiaryPriceParams {
	var ()
	return &GetCloudSubsidiaryPriceParams{
		HTTPClient: client,
	}
}

/*GetCloudSubsidiaryPriceParams contains all the parameters to send to the API endpoint
for the get cloud subsidiary price operation typically these are written to a http.Request
*/
type GetCloudSubsidiaryPriceParams struct {

	/*FlavorID*/
	FlavorID *string
	/*OvhSubsidiary*/
	OvhSubsidiary string
	/*Region*/
	Region *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithTimeout(timeout time.Duration) *GetCloudSubsidiaryPriceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithContext(ctx context.Context) *GetCloudSubsidiaryPriceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithHTTPClient(client *http.Client) *GetCloudSubsidiaryPriceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlavorID adds the flavorID to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithFlavorID(flavorID *string) *GetCloudSubsidiaryPriceParams {
	o.SetFlavorID(flavorID)
	return o
}

// SetFlavorID adds the flavorId to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetFlavorID(flavorID *string) {
	o.FlavorID = flavorID
}

// WithOvhSubsidiary adds the ovhSubsidiary to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithOvhSubsidiary(ovhSubsidiary string) *GetCloudSubsidiaryPriceParams {
	o.SetOvhSubsidiary(ovhSubsidiary)
	return o
}

// SetOvhSubsidiary adds the ovhSubsidiary to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetOvhSubsidiary(ovhSubsidiary string) {
	o.OvhSubsidiary = ovhSubsidiary
}

// WithRegion adds the region to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) WithRegion(region *string) *GetCloudSubsidiaryPriceParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the get cloud subsidiary price params
func (o *GetCloudSubsidiaryPriceParams) SetRegion(region *string) {
	o.Region = region
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudSubsidiaryPriceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FlavorID != nil {

		// query param flavorId
		var qrFlavorID string
		if o.FlavorID != nil {
			qrFlavorID = *o.FlavorID
		}
		qFlavorID := qrFlavorID
		if qFlavorID != "" {
			if err := r.SetQueryParam("flavorId", qFlavorID); err != nil {
				return err
			}
		}

	}

	// query param ovhSubsidiary
	qrOvhSubsidiary := o.OvhSubsidiary
	qOvhSubsidiary := qrOvhSubsidiary
	if qOvhSubsidiary != "" {
		if err := r.SetQueryParam("ovhSubsidiary", qOvhSubsidiary); err != nil {
			return err
		}
	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
