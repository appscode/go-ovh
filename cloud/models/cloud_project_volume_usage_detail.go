// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudProjectVolumeUsageDetail Volume usage
// swagger:model cloud.Project.VolumeUsageDetail
type CloudProjectVolumeUsageDetail struct {

	// price
	Price *OrderPrice `json:"price,omitempty"`

	// volume capacity
	VolumeCapacity *CloudProjectVolumeUsageDetailVolumeCapacity `json:"volumeCapacity,omitempty"`

	// Volume id
	VolumeID string `json:"volumeId,omitempty"`

	// Volume type
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this cloud project volume usage detail
func (m *CloudProjectVolumeUsageDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeCapacity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudProjectVolumeUsageDetail) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {

		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *CloudProjectVolumeUsageDetail) validateVolumeCapacity(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeCapacity) { // not required
		return nil
	}

	if m.VolumeCapacity != nil {

		if err := m.VolumeCapacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeCapacity")
			}
			return err
		}
	}

	return nil
}

var cloudProjectVolumeUsageDetailTypeVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["classic","high-speed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudProjectVolumeUsageDetailTypeVolumeTypePropEnum = append(cloudProjectVolumeUsageDetailTypeVolumeTypePropEnum, v)
	}
}

const (
	// CloudProjectVolumeUsageDetailVolumeTypeClassic captures enum value "classic"
	CloudProjectVolumeUsageDetailVolumeTypeClassic string = "classic"
	// CloudProjectVolumeUsageDetailVolumeTypeHighSpeed captures enum value "high-speed"
	CloudProjectVolumeUsageDetailVolumeTypeHighSpeed string = "high-speed"
)

// prop value enum
func (m *CloudProjectVolumeUsageDetail) validateVolumeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudProjectVolumeUsageDetailTypeVolumeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudProjectVolumeUsageDetail) validateVolumeType(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVolumeTypeEnum("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudProjectVolumeUsageDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudProjectVolumeUsageDetail) UnmarshalBinary(b []byte) error {
	var res CloudProjectVolumeUsageDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
