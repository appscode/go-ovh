// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudCredit Cloud credit
// swagger:model cloud.Credit
type CloudCredit struct {

	// available credit
	// Required: true
	AvailableCredit *OrderPrice `json:"available_credit"`

	// Credit bill id
	// Read Only: true
	Bill string `json:"bill,omitempty"`

	// Credit description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// Credit id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// Use credits on following products
	// Read Only: true
	Products []string `json:"products"`

	// total credit
	// Required: true
	TotalCredit *OrderPrice `json:"total_credit"`

	// used credit
	// Required: true
	UsedCredit *OrderPrice `json:"used_credit"`

	// validity
	Validity *CloudCommonVoucherValidity `json:"validity,omitempty"`

	// Voucher code
	// Read Only: true
	Voucher string `json:"voucher,omitempty"`
}

// Validate validates this cloud credit
func (m *CloudCredit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableCredit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotalCredit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsedCredit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCredit) validateAvailableCredit(formats strfmt.Registry) error {

	if err := validate.Required("available_credit", "body", m.AvailableCredit); err != nil {
		return err
	}

	if m.AvailableCredit != nil {

		if err := m.AvailableCredit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("available_credit")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCredit) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudCredit) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	return nil
}

func (m *CloudCredit) validateTotalCredit(formats strfmt.Registry) error {

	if err := validate.Required("total_credit", "body", m.TotalCredit); err != nil {
		return err
	}

	if m.TotalCredit != nil {

		if err := m.TotalCredit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_credit")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCredit) validateUsedCredit(formats strfmt.Registry) error {

	if err := validate.Required("used_credit", "body", m.UsedCredit); err != nil {
		return err
	}

	if m.UsedCredit != nil {

		if err := m.UsedCredit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("used_credit")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCredit) validateValidity(formats strfmt.Registry) error {

	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {

		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudCredit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudCredit) UnmarshalBinary(b []byte) error {
	var res CloudCredit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
