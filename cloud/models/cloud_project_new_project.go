// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudProjectNewProject New cloud project
// swagger:model cloud.Project.NewProject
type CloudProjectNewProject struct {

	// Agreement to valid
	Agreements []int64 `json:"agreements"`

	// credit
	Credit *CloudProjectNewProjectCredit `json:"credit,omitempty"`

	// Cloud project description
	Description string `json:"description,omitempty"`

	// Cloud project order id
	OrderID int64 `json:"orderId,omitempty"`

	// Cloud project
	Project string `json:"project,omitempty"`

	// Project creation status
	Status string `json:"status,omitempty"`
}

// Validate validates this cloud project new project
func (m *CloudProjectNewProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreements(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudProjectNewProject) validateAgreements(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreements) { // not required
		return nil
	}

	return nil
}

func (m *CloudProjectNewProject) validateCredit(formats strfmt.Registry) error {

	if swag.IsZero(m.Credit) { // not required
		return nil
	}

	if m.Credit != nil {

		if err := m.Credit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credit")
			}
			return err
		}
	}

	return nil
}

var cloudProjectNewProjectTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creating","ok","validationPending","waitingAgreementsValidation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudProjectNewProjectTypeStatusPropEnum = append(cloudProjectNewProjectTypeStatusPropEnum, v)
	}
}

const (
	// CloudProjectNewProjectStatusCreating captures enum value "creating"
	CloudProjectNewProjectStatusCreating string = "creating"
	// CloudProjectNewProjectStatusOk captures enum value "ok"
	CloudProjectNewProjectStatusOk string = "ok"
	// CloudProjectNewProjectStatusValidationPending captures enum value "validationPending"
	CloudProjectNewProjectStatusValidationPending string = "validationPending"
	// CloudProjectNewProjectStatusWaitingAgreementsValidation captures enum value "waitingAgreementsValidation"
	CloudProjectNewProjectStatusWaitingAgreementsValidation string = "waitingAgreementsValidation"
)

// prop value enum
func (m *CloudProjectNewProject) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudProjectNewProjectTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudProjectNewProject) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudProjectNewProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudProjectNewProject) UnmarshalBinary(b []byte) error {
	var res CloudProjectNewProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
