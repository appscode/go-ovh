// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudStorageContainerObject ContainerObject
// swagger:model cloud.Storage.ContainerObject
type CloudStorageContainerObject struct {

	// Object content type
	// Required: true
	// Read Only: true
	ContentType string `json:"contentType"`

	// Last modification date
	// Required: true
	// Read Only: true
	LastModified strfmt.DateTime `json:"lastModified"`

	// Object name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Object retrieval delay (when unsealing)
	// Required: true
	// Read Only: true
	RetrievalDelay int64 `json:"retrievalDelay"`

	// Object retrieval state
	// Required: true
	// Read Only: true
	RetrievalState string `json:"retrievalState"`

	// Object size
	// Required: true
	// Read Only: true
	Size int64 `json:"size"`
}

// Validate validates this cloud storage container object
func (m *CloudStorageContainerObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetrievalDelay(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetrievalState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudStorageContainerObject) validateContentType(formats strfmt.Registry) error {

	if err := validate.RequiredString("contentType", "body", string(m.ContentType)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerObject) validateLastModified(formats strfmt.Registry) error {

	if err := validate.Required("lastModified", "body", strfmt.DateTime(m.LastModified)); err != nil {
		return err
	}

	if err := validate.FormatOf("lastModified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerObject) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerObject) validateRetrievalDelay(formats strfmt.Registry) error {

	if err := validate.Required("retrievalDelay", "body", int64(m.RetrievalDelay)); err != nil {
		return err
	}

	return nil
}

var cloudStorageContainerObjectTypeRetrievalStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sealed","unsealing","unsealed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudStorageContainerObjectTypeRetrievalStatePropEnum = append(cloudStorageContainerObjectTypeRetrievalStatePropEnum, v)
	}
}

const (
	// CloudStorageContainerObjectRetrievalStateSealed captures enum value "sealed"
	CloudStorageContainerObjectRetrievalStateSealed string = "sealed"
	// CloudStorageContainerObjectRetrievalStateUnsealing captures enum value "unsealing"
	CloudStorageContainerObjectRetrievalStateUnsealing string = "unsealing"
	// CloudStorageContainerObjectRetrievalStateUnsealed captures enum value "unsealed"
	CloudStorageContainerObjectRetrievalStateUnsealed string = "unsealed"
)

// prop value enum
func (m *CloudStorageContainerObject) validateRetrievalStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudStorageContainerObjectTypeRetrievalStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudStorageContainerObject) validateRetrievalState(formats strfmt.Registry) error {

	if err := validate.RequiredString("retrievalState", "body", string(m.RetrievalState)); err != nil {
		return err
	}

	// value enum
	if err := m.validateRetrievalStateEnum("retrievalState", "body", m.RetrievalState); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerObject) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudStorageContainerObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudStorageContainerObject) UnmarshalBinary(b []byte) error {
	var res CloudStorageContainerObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
