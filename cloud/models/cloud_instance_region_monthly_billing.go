// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudInstanceRegionMonthlyBilling MonthlyBilling
// swagger:model cloud.InstanceRegion.MonthlyBilling
type CloudInstanceRegionMonthlyBilling struct {

	// Monthly billing activated since
	// Required: true
	// Read Only: true
	Since strfmt.DateTime `json:"since"`

	// Monthly billing status
	// Required: true
	// Read Only: true
	Status string `json:"status"`
}

// Validate validates this cloud instance region monthly billing
func (m *CloudInstanceRegionMonthlyBilling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSince(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudInstanceRegionMonthlyBilling) validateSince(formats strfmt.Registry) error {

	if err := validate.Required("since", "body", strfmt.DateTime(m.Since)); err != nil {
		return err
	}

	if err := validate.FormatOf("since", "body", "date-time", m.Since.String(), formats); err != nil {
		return err
	}

	return nil
}

var cloudInstanceRegionMonthlyBillingTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["activationPending","ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudInstanceRegionMonthlyBillingTypeStatusPropEnum = append(cloudInstanceRegionMonthlyBillingTypeStatusPropEnum, v)
	}
}

const (
	// CloudInstanceRegionMonthlyBillingStatusActivationPending captures enum value "activationPending"
	CloudInstanceRegionMonthlyBillingStatusActivationPending string = "activationPending"
	// CloudInstanceRegionMonthlyBillingStatusOk captures enum value "ok"
	CloudInstanceRegionMonthlyBillingStatusOk string = "ok"
)

// prop value enum
func (m *CloudInstanceRegionMonthlyBilling) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudInstanceRegionMonthlyBillingTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudInstanceRegionMonthlyBilling) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudInstanceRegionMonthlyBilling) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudInstanceRegionMonthlyBilling) UnmarshalBinary(b []byte) error {
	var res CloudInstanceRegionMonthlyBilling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
