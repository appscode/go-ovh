// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderPrice Price with it's currency and textual representation
// swagger:model order.Price
type OrderPrice struct {

	// currency code
	CurrencyCode string `json:"currencyCode,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this order price
func (m *OrderPrice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencyCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var orderPriceTypeCurrencyCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUD","CAD","CZK","EUR","GBP","LTL","MAD","N/A","PLN","SGD","TND","USD","XOF","points"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderPriceTypeCurrencyCodePropEnum = append(orderPriceTypeCurrencyCodePropEnum, v)
	}
}

const (
	// OrderPriceCurrencyCodeAUD captures enum value "AUD"
	OrderPriceCurrencyCodeAUD string = "AUD"
	// OrderPriceCurrencyCodeCAD captures enum value "CAD"
	OrderPriceCurrencyCodeCAD string = "CAD"
	// OrderPriceCurrencyCodeCZK captures enum value "CZK"
	OrderPriceCurrencyCodeCZK string = "CZK"
	// OrderPriceCurrencyCodeEUR captures enum value "EUR"
	OrderPriceCurrencyCodeEUR string = "EUR"
	// OrderPriceCurrencyCodeGBP captures enum value "GBP"
	OrderPriceCurrencyCodeGBP string = "GBP"
	// OrderPriceCurrencyCodeLTL captures enum value "LTL"
	OrderPriceCurrencyCodeLTL string = "LTL"
	// OrderPriceCurrencyCodeMAD captures enum value "MAD"
	OrderPriceCurrencyCodeMAD string = "MAD"
	// OrderPriceCurrencyCodeNA captures enum value "N/A"
	OrderPriceCurrencyCodeNA string = "N/A"
	// OrderPriceCurrencyCodePLN captures enum value "PLN"
	OrderPriceCurrencyCodePLN string = "PLN"
	// OrderPriceCurrencyCodeSGD captures enum value "SGD"
	OrderPriceCurrencyCodeSGD string = "SGD"
	// OrderPriceCurrencyCodeTND captures enum value "TND"
	OrderPriceCurrencyCodeTND string = "TND"
	// OrderPriceCurrencyCodeUSD captures enum value "USD"
	OrderPriceCurrencyCodeUSD string = "USD"
	// OrderPriceCurrencyCodeXOF captures enum value "XOF"
	OrderPriceCurrencyCodeXOF string = "XOF"
	// OrderPriceCurrencyCodePoints captures enum value "points"
	OrderPriceCurrencyCodePoints string = "points"
)

// prop value enum
func (m *OrderPrice) validateCurrencyCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderPriceTypeCurrencyCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrderPrice) validateCurrencyCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrencyCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyCodeEnum("currencyCode", "body", m.CurrencyCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderPrice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderPrice) UnmarshalBinary(b []byte) error {
	var res OrderPrice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
