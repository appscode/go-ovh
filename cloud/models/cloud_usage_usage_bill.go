// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudUsageUsageBill UsageBill
// swagger:model cloud.Usage.UsageBill
type CloudUsageUsageBill struct {

	// ID of the bill
	// Required: true
	// Read Only: true
	BillID string `json:"bill_id"`

	// Amount of credits used in this bill (not necessarily on part)
	// Required: true
	// Read Only: true
	Credit float64 `json:"credit"`

	// Amount of the bill that accounts for services for the usage period, credits not taken into account
	// Required: true
	// Read Only: true
	Part float64 `json:"part"`

	// Payment type
	// Required: true
	// Read Only: true
	PaymentType string `json:"payment_type"`

	// Total amount of the bill, credits not taken into account
	// Required: true
	// Read Only: true
	Total float64 `json:"total"`
}

// Validate validates this cloud usage usage bill
func (m *CloudUsageUsageBill) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredit(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudUsageUsageBill) validateBillID(formats strfmt.Registry) error {

	if err := validate.RequiredString("bill_id", "body", string(m.BillID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudUsageUsageBill) validateCredit(formats strfmt.Registry) error {

	if err := validate.Required("credit", "body", float64(m.Credit)); err != nil {
		return err
	}

	return nil
}

func (m *CloudUsageUsageBill) validatePart(formats strfmt.Registry) error {

	if err := validate.Required("part", "body", float64(m.Part)); err != nil {
		return err
	}

	return nil
}

var cloudUsageUsageBillTypePaymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pre","post"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudUsageUsageBillTypePaymentTypePropEnum = append(cloudUsageUsageBillTypePaymentTypePropEnum, v)
	}
}

const (
	// CloudUsageUsageBillPaymentTypePre captures enum value "pre"
	CloudUsageUsageBillPaymentTypePre string = "pre"
	// CloudUsageUsageBillPaymentTypePost captures enum value "post"
	CloudUsageUsageBillPaymentTypePost string = "post"
)

// prop value enum
func (m *CloudUsageUsageBill) validatePaymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudUsageUsageBillTypePaymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudUsageUsageBill) validatePaymentType(formats strfmt.Registry) error {

	if err := validate.RequiredString("payment_type", "body", string(m.PaymentType)); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentTypeEnum("payment_type", "body", m.PaymentType); err != nil {
		return err
	}

	return nil
}

func (m *CloudUsageUsageBill) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", float64(m.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudUsageUsageBill) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudUsageUsageBill) UnmarshalBinary(b []byte) error {
	var res CloudUsageUsageBill
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
