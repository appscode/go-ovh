// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudAuthenticationOpenstackToken OpenstackToken
// swagger:model cloud.Authentication.OpenstackToken
type CloudAuthenticationOpenstackToken struct {

	// catalog
	// Required: true
	Catalog CloudAuthenticationOpenstackTokenCatalog `json:"catalog"`

	// expires at
	// Required: true
	// Read Only: true
	ExpiresAt strfmt.DateTime `json:"expires_at"`

	// issued at
	// Required: true
	// Read Only: true
	IssuedAt strfmt.DateTime `json:"issued_at"`

	// methods
	// Required: true
	// Read Only: true
	Methods []string `json:"methods"`

	// project
	// Required: true
	Project *CloudAuthenticationTokenProject `json:"project"`

	// roles
	// Required: true
	Roles CloudAuthenticationOpenstackTokenRoles `json:"roles"`

	// user
	// Required: true
	User *CloudAuthenticationUserToken `json:"user"`
}

// Validate validates this cloud authentication openstack token
func (m *CloudAuthenticationOpenstackToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIssuedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethods(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateCatalog(formats strfmt.Registry) error {

	if err := validate.Required("catalog", "body", m.Catalog); err != nil {
		return err
	}

	if err := m.Catalog.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("catalog")
		}
		return err
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", strfmt.DateTime(m.ExpiresAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateIssuedAt(formats strfmt.Registry) error {

	if err := validate.Required("issued_at", "body", strfmt.DateTime(m.IssuedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("issued_at", "body", "date-time", m.IssuedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateMethods(formats strfmt.Registry) error {

	if err := validate.Required("methods", "body", m.Methods); err != nil {
		return err
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("project", "body", m.Project); err != nil {
		return err
	}

	if m.Project != nil {

		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateRoles(formats strfmt.Registry) error {

	if err := validate.Required("roles", "body", m.Roles); err != nil {
		return err
	}

	if err := m.Roles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("roles")
		}
		return err
	}

	return nil
}

func (m *CloudAuthenticationOpenstackToken) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudAuthenticationOpenstackToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudAuthenticationOpenstackToken) UnmarshalBinary(b []byte) error {
	var res CloudAuthenticationOpenstackToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
