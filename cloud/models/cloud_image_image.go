// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudImageImage Image
// swagger:model cloud.Image.Image
type CloudImageImage struct {

	// Image creation date
	// Required: true
	// Read Only: true
	CreationDate string `json:"creationDate"`

	// Image usable only for this type of flavor if not null
	// Read Only: true
	FlavorType string `json:"flavorType,omitempty"`

	// Image id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Minimum disks required to use image
	// Required: true
	// Read Only: true
	MinDisk int64 `json:"minDisk"`

	// Minimum RAM required to use image
	// Required: true
	// Read Only: true
	MinRAM int64 `json:"minRam"`

	// Image name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Image region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Image size (in GiB)
	// Required: true
	// Read Only: true
	Size float64 `json:"size"`

	// Image status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Tags about the image
	// Read Only: true
	Tags []string `json:"tags"`

	// Image type
	// Required: true
	// Read Only: true
	Type string `json:"type"`

	// User to connect with
	// Required: true
	// Read Only: true
	User string `json:"user"`

	// Image visibility
	// Required: true
	// Read Only: true
	Visibility string `json:"visibility"`
}

// Validate validates this cloud image image
func (m *CloudImageImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinDisk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinRAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudImageImage) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.RequiredString("creationDate", "body", string(m.CreationDate)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateMinDisk(formats strfmt.Registry) error {

	if err := validate.Required("minDisk", "body", int64(m.MinDisk)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateMinRAM(formats strfmt.Registry) error {

	if err := validate.Required("minRam", "body", int64(m.MinRAM)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", float64(m.Size)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	return nil
}

func (m *CloudImageImage) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateUser(formats strfmt.Registry) error {

	if err := validate.RequiredString("user", "body", string(m.User)); err != nil {
		return err
	}

	return nil
}

func (m *CloudImageImage) validateVisibility(formats strfmt.Registry) error {

	if err := validate.RequiredString("visibility", "body", string(m.Visibility)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudImageImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudImageImage) UnmarshalBinary(b []byte) error {
	var res CloudImageImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
