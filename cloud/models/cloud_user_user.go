// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudUserUser User
// swagger:model cloud.User.User
type CloudUserUser struct {

	// User creation date
	// Required: true
	// Read Only: true
	CreationDate strfmt.DateTime `json:"creationDate"`

	// User description
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// User id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// User status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Username
	// Required: true
	// Read Only: true
	Username string `json:"username"`
}

// Validate validates this cloud user user
func (m *CloudUserUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudUserUser) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudUserUser) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *CloudUserUser) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

var cloudUserUserTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creating","ok","deleting","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudUserUserTypeStatusPropEnum = append(cloudUserUserTypeStatusPropEnum, v)
	}
}

const (
	// CloudUserUserStatusCreating captures enum value "creating"
	CloudUserUserStatusCreating string = "creating"
	// CloudUserUserStatusOk captures enum value "ok"
	CloudUserUserStatusOk string = "ok"
	// CloudUserUserStatusDeleting captures enum value "deleting"
	CloudUserUserStatusDeleting string = "deleting"
	// CloudUserUserStatusDeleted captures enum value "deleted"
	CloudUserUserStatusDeleted string = "deleted"
)

// prop value enum
func (m *CloudUserUser) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudUserUserTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudUserUser) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CloudUserUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.RequiredString("username", "body", string(m.Username)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudUserUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudUserUser) UnmarshalBinary(b []byte) error {
	var res CloudUserUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
