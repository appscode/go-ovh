// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudFlavorFlavor Flavor
// swagger:model cloud.Flavor.Flavor
type CloudFlavorFlavor struct {

	// Available in stock
	// Required: true
	// Read Only: true
	Available bool `json:"available"`

	// Number of disks
	// Required: true
	// Read Only: true
	Disk int64 `json:"disk"`

	// Flavor id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Max capacity of inbound traffic in Mbit/s
	// Read Only: true
	InboundBandwidth int64 `json:"inboundBandwidth,omitempty"`

	// Flavor name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// OS to install on
	// Required: true
	// Read Only: true
	OsType string `json:"osType"`

	// Max capacity of outbound traffic in Mbit/s
	// Read Only: true
	OutboundBandwidth int64 `json:"outboundBandwidth,omitempty"`

	// Ram quantity (Gio)
	// Required: true
	// Read Only: true
	RAM int64 `json:"ram"`

	// Flavor region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Flavor type
	// Required: true
	// Read Only: true
	Type string `json:"type"`

	// Number of VCPUs
	// Required: true
	// Read Only: true
	Vcpus int64 `json:"vcpus"`
}

// Validate validates this cloud flavor flavor
func (m *CloudFlavorFlavor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcpus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudFlavorFlavor) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", bool(m.Available)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateDisk(formats strfmt.Registry) error {

	if err := validate.Required("disk", "body", int64(m.Disk)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateOsType(formats strfmt.Registry) error {

	if err := validate.RequiredString("osType", "body", string(m.OsType)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateRAM(formats strfmt.Registry) error {

	if err := validate.Required("ram", "body", int64(m.RAM)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *CloudFlavorFlavor) validateVcpus(formats strfmt.Registry) error {

	if err := validate.Required("vcpus", "body", int64(m.Vcpus)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudFlavorFlavor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudFlavorFlavor) UnmarshalBinary(b []byte) error {
	var res CloudFlavorFlavor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
