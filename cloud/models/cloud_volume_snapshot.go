// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudVolumeSnapshot Snapshot
// swagger:model cloud.Volume.Snapshot
type CloudVolumeSnapshot struct {

	// Snapshot creation date
	// Required: true
	// Read Only: true
	CreationDate strfmt.DateTime `json:"creationDate"`

	// Snapshot description
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Snapshot id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Snapshot name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Snapshot region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Snapshot size
	// Required: true
	// Read Only: true
	Size int64 `json:"size"`

	// Snapshot status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Volume source id
	// Required: true
	// Read Only: true
	VolumeID string `json:"volumeId"`
}

// Validate validates this cloud volume snapshot
func (m *CloudVolumeSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudVolumeSnapshot) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

var cloudVolumeSnapshotTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creating","available","deleting","error","error_deleting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudVolumeSnapshotTypeStatusPropEnum = append(cloudVolumeSnapshotTypeStatusPropEnum, v)
	}
}

const (
	// CloudVolumeSnapshotStatusCreating captures enum value "creating"
	CloudVolumeSnapshotStatusCreating string = "creating"
	// CloudVolumeSnapshotStatusAvailable captures enum value "available"
	CloudVolumeSnapshotStatusAvailable string = "available"
	// CloudVolumeSnapshotStatusDeleting captures enum value "deleting"
	CloudVolumeSnapshotStatusDeleting string = "deleting"
	// CloudVolumeSnapshotStatusError captures enum value "error"
	CloudVolumeSnapshotStatusError string = "error"
	// CloudVolumeSnapshotStatusErrorDeleting captures enum value "error_deleting"
	CloudVolumeSnapshotStatusErrorDeleting string = "error_deleting"
)

// prop value enum
func (m *CloudVolumeSnapshot) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudVolumeSnapshotTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudVolumeSnapshot) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeSnapshot) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.RequiredString("volumeId", "body", string(m.VolumeID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudVolumeSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudVolumeSnapshot) UnmarshalBinary(b []byte) error {
	var res CloudVolumeSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
