// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PcaBilling cloud archives billing
// swagger:model pca.Billing
type PcaBilling struct {

	// Billing action is billed.
	// Required: true
	// Read Only: true
	Billed bool `json:"billed"`

	// Date and time the operation took place
	// Required: true
	// Read Only: true
	Date strfmt.DateTime `json:"date"`

	// Billing id
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// Quantity of bytes for operation
	// Required: true
	// Read Only: true
	Quantity int64 `json:"quantity"`

	// Billing reference name
	// Required: true
	// Read Only: true
	Reference string `json:"reference"`

	// Total usage after operation
	// Required: true
	// Read Only: true
	Total int64 `json:"total"`
}

// Validate validates this pca billing
func (m *PcaBilling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBilled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PcaBilling) validateBilled(formats strfmt.Registry) error {

	if err := validate.Required("billed", "body", bool(m.Billed)); err != nil {
		return err
	}

	return nil
}

func (m *PcaBilling) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PcaBilling) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PcaBilling) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", int64(m.Quantity)); err != nil {
		return err
	}

	return nil
}

var pcaBillingTypeReferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["backup","delete","restore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pcaBillingTypeReferencePropEnum = append(pcaBillingTypeReferencePropEnum, v)
	}
}

const (
	// PcaBillingReferenceBackup captures enum value "backup"
	PcaBillingReferenceBackup string = "backup"
	// PcaBillingReferenceDelete captures enum value "delete"
	PcaBillingReferenceDelete string = "delete"
	// PcaBillingReferenceRestore captures enum value "restore"
	PcaBillingReferenceRestore string = "restore"
)

// prop value enum
func (m *PcaBilling) validateReferenceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pcaBillingTypeReferencePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PcaBilling) validateReference(formats strfmt.Registry) error {

	if err := validate.RequiredString("reference", "body", string(m.Reference)); err != nil {
		return err
	}

	// value enum
	if err := m.validateReferenceEnum("reference", "body", m.Reference); err != nil {
		return err
	}

	return nil
}

func (m *PcaBilling) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", int64(m.Total)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PcaBilling) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PcaBilling) UnmarshalBinary(b []byte) error {
	var res PcaBilling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
