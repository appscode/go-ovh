// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PcaTask cloud archives tasks
// swagger:model pca.Task
type PcaTask struct {

	// Task comments
	// Read Only: true
	Comment string `json:"comment,omitempty"`

	// Task function
	// Required: true
	// Read Only: true
	Function string `json:"function"`

	// Task ID
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Host used for task
	// Read Only: true
	IPAddress string `json:"ipAddress,omitempty"`

	// Task login
	// Required: true
	// Read Only: true
	Login string `json:"login"`

	// Task status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Task date
	// Required: true
	// Read Only: true
	TodoDate strfmt.DateTime `json:"todoDate"`
}

// Validate validates this pca task
func (m *PcaTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTodoDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pcaTaskTypeFunctionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["createUser","delete","restore","setPassword","setSessionName","setSshKey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pcaTaskTypeFunctionPropEnum = append(pcaTaskTypeFunctionPropEnum, v)
	}
}

const (
	// PcaTaskFunctionCreateUser captures enum value "createUser"
	PcaTaskFunctionCreateUser string = "createUser"
	// PcaTaskFunctionDelete captures enum value "delete"
	PcaTaskFunctionDelete string = "delete"
	// PcaTaskFunctionRestore captures enum value "restore"
	PcaTaskFunctionRestore string = "restore"
	// PcaTaskFunctionSetPassword captures enum value "setPassword"
	PcaTaskFunctionSetPassword string = "setPassword"
	// PcaTaskFunctionSetSessionName captures enum value "setSessionName"
	PcaTaskFunctionSetSessionName string = "setSessionName"
	// PcaTaskFunctionSetSSHKey captures enum value "setSshKey"
	PcaTaskFunctionSetSSHKey string = "setSshKey"
)

// prop value enum
func (m *PcaTask) validateFunctionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pcaTaskTypeFunctionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PcaTask) validateFunction(formats strfmt.Registry) error {

	if err := validate.RequiredString("function", "body", string(m.Function)); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionEnum("function", "body", m.Function); err != nil {
		return err
	}

	return nil
}

func (m *PcaTask) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PcaTask) validateLogin(formats strfmt.Registry) error {

	if err := validate.RequiredString("login", "body", string(m.Login)); err != nil {
		return err
	}

	return nil
}

var pcaTaskTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cancelled","deleted","doing","doingBackup","doingDelete","doingRestore","done","error","failedDelete","failedRestore","new","tagging","toBackup","toDelete","toRestore","todo"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pcaTaskTypeStatusPropEnum = append(pcaTaskTypeStatusPropEnum, v)
	}
}

const (
	// PcaTaskStatusCancelled captures enum value "cancelled"
	PcaTaskStatusCancelled string = "cancelled"
	// PcaTaskStatusDeleted captures enum value "deleted"
	PcaTaskStatusDeleted string = "deleted"
	// PcaTaskStatusDoing captures enum value "doing"
	PcaTaskStatusDoing string = "doing"
	// PcaTaskStatusDoingBackup captures enum value "doingBackup"
	PcaTaskStatusDoingBackup string = "doingBackup"
	// PcaTaskStatusDoingDelete captures enum value "doingDelete"
	PcaTaskStatusDoingDelete string = "doingDelete"
	// PcaTaskStatusDoingRestore captures enum value "doingRestore"
	PcaTaskStatusDoingRestore string = "doingRestore"
	// PcaTaskStatusDone captures enum value "done"
	PcaTaskStatusDone string = "done"
	// PcaTaskStatusError captures enum value "error"
	PcaTaskStatusError string = "error"
	// PcaTaskStatusFailedDelete captures enum value "failedDelete"
	PcaTaskStatusFailedDelete string = "failedDelete"
	// PcaTaskStatusFailedRestore captures enum value "failedRestore"
	PcaTaskStatusFailedRestore string = "failedRestore"
	// PcaTaskStatusNew captures enum value "new"
	PcaTaskStatusNew string = "new"
	// PcaTaskStatusTagging captures enum value "tagging"
	PcaTaskStatusTagging string = "tagging"
	// PcaTaskStatusToBackup captures enum value "toBackup"
	PcaTaskStatusToBackup string = "toBackup"
	// PcaTaskStatusToDelete captures enum value "toDelete"
	PcaTaskStatusToDelete string = "toDelete"
	// PcaTaskStatusToRestore captures enum value "toRestore"
	PcaTaskStatusToRestore string = "toRestore"
	// PcaTaskStatusTodo captures enum value "todo"
	PcaTaskStatusTodo string = "todo"
)

// prop value enum
func (m *PcaTask) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pcaTaskTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PcaTask) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PcaTask) validateTodoDate(formats strfmt.Registry) error {

	if err := validate.Required("todoDate", "body", strfmt.DateTime(m.TodoDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("todoDate", "body", "date-time", m.TodoDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PcaTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PcaTask) UnmarshalBinary(b []byte) error {
	var res PcaTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
