// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudQuotaInstanceQuotas InstanceQuotas
// swagger:model cloud.Quota.InstanceQuotas
type CloudQuotaInstanceQuotas struct {

	// Maximum total cores allowed in your project
	// Required: true
	// Read Only: true
	MaxCores int64 `json:"maxCores"`

	// Maximum total cores allowed in your project
	// Required: true
	// Read Only: true
	MaxInstances int64 `json:"maxInstances"`

	// max Ram
	// Required: true
	// Read Only: true
	MaxRAM int64 `json:"maxRam"`

	// Current used cores number
	// Required: true
	// Read Only: true
	UsedCores int64 `json:"usedCores"`

	// Current used instances
	// Required: true
	// Read Only: true
	UsedInstances int64 `json:"usedInstances"`

	// Current used ram
	// Required: true
	// Read Only: true
	UsedRAM int64 `json:"usedRAM"`
}

// Validate validates this cloud quota instance quotas
func (m *CloudQuotaInstanceQuotas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxCores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxInstances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxRAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsedCores(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsedInstances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsedRAM(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudQuotaInstanceQuotas) validateMaxCores(formats strfmt.Registry) error {

	if err := validate.Required("maxCores", "body", int64(m.MaxCores)); err != nil {
		return err
	}

	return nil
}

func (m *CloudQuotaInstanceQuotas) validateMaxInstances(formats strfmt.Registry) error {

	if err := validate.Required("maxInstances", "body", int64(m.MaxInstances)); err != nil {
		return err
	}

	return nil
}

func (m *CloudQuotaInstanceQuotas) validateMaxRAM(formats strfmt.Registry) error {

	if err := validate.Required("maxRam", "body", int64(m.MaxRAM)); err != nil {
		return err
	}

	return nil
}

func (m *CloudQuotaInstanceQuotas) validateUsedCores(formats strfmt.Registry) error {

	if err := validate.Required("usedCores", "body", int64(m.UsedCores)); err != nil {
		return err
	}

	return nil
}

func (m *CloudQuotaInstanceQuotas) validateUsedInstances(formats strfmt.Registry) error {

	if err := validate.Required("usedInstances", "body", int64(m.UsedInstances)); err != nil {
		return err
	}

	return nil
}

func (m *CloudQuotaInstanceQuotas) validateUsedRAM(formats strfmt.Registry) error {

	if err := validate.Required("usedRAM", "body", int64(m.UsedRAM)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudQuotaInstanceQuotas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudQuotaInstanceQuotas) UnmarshalBinary(b []byte) error {
	var res CloudQuotaInstanceQuotas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
