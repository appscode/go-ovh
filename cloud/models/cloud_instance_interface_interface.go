// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudInstanceInterfaceInterface Interface
// swagger:model cloud.InstanceInterface.Interface
type CloudInstanceInterfaceInterface struct {

	// fixed ips
	// Required: true
	FixedIps CloudInstanceInterfaceInterfaceFixedIps `json:"fixedIps"`

	// Interface unique identifier
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Mac address
	// Required: true
	// Read Only: true
	MacAddress string `json:"macAddress"`

	// Network id
	// Required: true
	// Read Only: true
	NetworkID string `json:"networkId"`

	// Openstack state
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// Network type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this cloud instance interface interface
func (m *CloudInstanceInterfaceInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFixedIps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudInstanceInterfaceInterface) validateFixedIps(formats strfmt.Registry) error {

	if err := validate.Required("fixedIps", "body", m.FixedIps); err != nil {
		return err
	}

	if err := m.FixedIps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fixedIps")
		}
		return err
	}

	return nil
}

func (m *CloudInstanceInterfaceInterface) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstanceInterfaceInterface) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("macAddress", "body", string(m.MacAddress)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstanceInterfaceInterface) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.RequiredString("networkId", "body", string(m.NetworkID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstanceInterfaceInterface) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstanceInterfaceInterface) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudInstanceInterfaceInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudInstanceInterfaceInterface) UnmarshalBinary(b []byte) error {
	var res CloudInstanceInterfaceInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
