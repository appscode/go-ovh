// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudNetworkNetwork Network
// swagger:model cloud.Network.Network
type CloudNetworkNetwork struct {

	// Network id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Network name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// regions
	// Required: true
	Regions CloudNetworkNetworkRegions `json:"regions"`

	// Network status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Network type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// Network VLAN id
	// Required: true
	// Read Only: true
	VlanID int64 `json:"vlanId"`
}

// Validate validates this cloud network network
func (m *CloudNetworkNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudNetworkNetwork) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudNetworkNetwork) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudNetworkNetwork) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	if err := m.Regions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("regions")
		}
		return err
	}

	return nil
}

var cloudNetworkNetworkTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUILDING","ACTIVE","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudNetworkNetworkTypeStatusPropEnum = append(cloudNetworkNetworkTypeStatusPropEnum, v)
	}
}

const (
	// CloudNetworkNetworkStatusBUILDING captures enum value "BUILDING"
	CloudNetworkNetworkStatusBUILDING string = "BUILDING"
	// CloudNetworkNetworkStatusACTIVE captures enum value "ACTIVE"
	CloudNetworkNetworkStatusACTIVE string = "ACTIVE"
	// CloudNetworkNetworkStatusDELETING captures enum value "DELETING"
	CloudNetworkNetworkStatusDELETING string = "DELETING"
)

// prop value enum
func (m *CloudNetworkNetwork) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudNetworkNetworkTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudNetworkNetwork) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var cloudNetworkNetworkTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudNetworkNetworkTypeTypePropEnum = append(cloudNetworkNetworkTypeTypePropEnum, v)
	}
}

const (
	// CloudNetworkNetworkTypePublic captures enum value "public"
	CloudNetworkNetworkTypePublic string = "public"
	// CloudNetworkNetworkTypePrivate captures enum value "private"
	CloudNetworkNetworkTypePrivate string = "private"
)

// prop value enum
func (m *CloudNetworkNetwork) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudNetworkNetworkTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudNetworkNetwork) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CloudNetworkNetwork) validateVlanID(formats strfmt.Registry) error {

	if err := validate.Required("vlanId", "body", int64(m.VlanID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudNetworkNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudNetworkNetwork) UnmarshalBinary(b []byte) error {
	var res CloudNetworkNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
