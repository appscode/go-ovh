// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudReservedStock Stock
// swagger:model cloud.Reserved.Stock
type CloudReservedStock struct {

	// Error message, if any
	// Required: true
	// Read Only: true
	Error string `json:"error"`

	// Flavor id
	// Required: true
	// Read Only: true
	FlavorID string `json:"flavorId"`

	// Flavor name
	// Required: true
	// Read Only: true
	FlavorName string `json:"flavorName"`

	// Number of available instances
	// Required: true
	// Read Only: true
	Quantity int64 `json:"quantity"`
}

// Validate validates this cloud reserved stock
func (m *CloudReservedStock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlavorID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlavorName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudReservedStock) validateError(formats strfmt.Registry) error {

	if err := validate.RequiredString("error", "body", string(m.Error)); err != nil {
		return err
	}

	return nil
}

func (m *CloudReservedStock) validateFlavorID(formats strfmt.Registry) error {

	if err := validate.RequiredString("flavorId", "body", string(m.FlavorID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudReservedStock) validateFlavorName(formats strfmt.Registry) error {

	if err := validate.RequiredString("flavorName", "body", string(m.FlavorName)); err != nil {
		return err
	}

	return nil
}

func (m *CloudReservedStock) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", int64(m.Quantity)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudReservedStock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudReservedStock) UnmarshalBinary(b []byte) error {
	var res CloudReservedStock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
