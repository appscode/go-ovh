// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudInstancegroupInstanceGroup InstanceGroup
// swagger:model cloud.Instancegroup.InstanceGroup
type CloudInstancegroupInstanceGroup struct {

	// Instance group id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Instances ids
	// Required: true
	// Read Only: true
	InstanceIds []string `json:"instance_ids"`

	// Instance group name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Instance group type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this cloud instancegroup instance group
func (m *CloudInstancegroupInstanceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudInstancegroupInstanceGroup) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstancegroupInstanceGroup) validateInstanceIds(formats strfmt.Registry) error {

	if err := validate.Required("instance_ids", "body", m.InstanceIds); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstancegroupInstanceGroup) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudInstancegroupInstanceGroup) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

var cloudInstancegroupInstanceGroupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["affinity","anti-affinity"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudInstancegroupInstanceGroupTypeTypePropEnum = append(cloudInstancegroupInstanceGroupTypeTypePropEnum, v)
	}
}

const (
	// CloudInstancegroupInstanceGroupTypeAffinity captures enum value "affinity"
	CloudInstancegroupInstanceGroupTypeAffinity string = "affinity"
	// CloudInstancegroupInstanceGroupTypeAntiAffinity captures enum value "anti-affinity"
	CloudInstancegroupInstanceGroupTypeAntiAffinity string = "anti-affinity"
)

// prop value enum
func (m *CloudInstancegroupInstanceGroup) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudInstancegroupInstanceGroupTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudInstancegroupInstanceGroup) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudInstancegroupInstanceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudInstancegroupInstanceGroup) UnmarshalBinary(b []byte) error {
	var res CloudInstancegroupInstanceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
