// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudVolumeVolume Volume
// swagger:model cloud.Volume.Volume
type CloudVolumeVolume struct {

	// Volume attached to instances id
	// Required: true
	// Read Only: true
	AttachedTo []string `json:"attachedTo"`

	// Volume bootable
	// Required: true
	// Read Only: true
	Bootable bool `json:"bootable"`

	// Volume creation date
	// Required: true
	// Read Only: true
	CreationDate strfmt.DateTime `json:"creationDate"`

	// Volume description
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Volume id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Volume name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// Volume region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Volume size (in GB)
	// Required: true
	// Read Only: true
	Size int64 `json:"size"`

	// Volume status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// Volume type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this cloud volume volume
func (m *CloudVolumeVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBootable(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudVolumeVolume) validateAttachedTo(formats strfmt.Registry) error {

	if err := validate.Required("attachedTo", "body", m.AttachedTo); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateBootable(formats strfmt.Registry) error {

	if err := validate.Required("bootable", "body", bool(m.Bootable)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

func (m *CloudVolumeVolume) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

var cloudVolumeVolumeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["classic","high-speed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudVolumeVolumeTypeTypePropEnum = append(cloudVolumeVolumeTypeTypePropEnum, v)
	}
}

const (
	// CloudVolumeVolumeTypeClassic captures enum value "classic"
	CloudVolumeVolumeTypeClassic string = "classic"
	// CloudVolumeVolumeTypeHighSpeed captures enum value "high-speed"
	CloudVolumeVolumeTypeHighSpeed string = "high-speed"
)

// prop value enum
func (m *CloudVolumeVolume) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudVolumeVolumeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudVolumeVolume) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudVolumeVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudVolumeVolume) UnmarshalBinary(b []byte) error {
	var res CloudVolumeVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
