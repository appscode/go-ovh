// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudIPFailoverIP FailoverIp
// swagger:model cloud.Ip.FailoverIp
type CloudIPFailoverIP struct {

	// IP block
	// Read Only: true
	Block string `json:"block,omitempty"`

	// Ip continent
	// Read Only: true
	ContinentCode string `json:"continentCode,omitempty"`

	// Ip location
	// Read Only: true
	Geoloc string `json:"geoloc,omitempty"`

	// Ip id
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Ip
	// Read Only: true
	IP string `json:"ip,omitempty"`

	// Current operation progress in percent
	// Required: true
	// Read Only: true
	Progress int64 `json:"progress"`

	// Instance where ip is routed to
	// Required: true
	// Read Only: true
	RoutedTo string `json:"routedTo"`

	// Ip status
	// Required: true
	// Read Only: true
	Status string `json:"status"`

	// IP sub type
	// Required: true
	// Read Only: true
	SubType string `json:"subType"`
}

// Validate validates this cloud Ip failover Ip
func (m *CloudIPFailoverIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoutedTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudIPFailoverIP) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIPFailoverIP) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", int64(m.Progress)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIPFailoverIP) validateRoutedTo(formats strfmt.Registry) error {

	if err := validate.RequiredString("routedTo", "body", string(m.RoutedTo)); err != nil {
		return err
	}

	return nil
}

var cloudIpFailoverIpTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","operationPending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudIpFailoverIpTypeStatusPropEnum = append(cloudIpFailoverIpTypeStatusPropEnum, v)
	}
}

const (
	// CloudIPFailoverIPStatusOk captures enum value "ok"
	CloudIPFailoverIPStatusOk string = "ok"
	// CloudIPFailoverIPStatusOperationPending captures enum value "operationPending"
	CloudIPFailoverIPStatusOperationPending string = "operationPending"
)

// prop value enum
func (m *CloudIPFailoverIP) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudIpFailoverIpTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudIPFailoverIP) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(m.Status)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var cloudIpFailoverIpTypeSubTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cloud","ovh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudIpFailoverIpTypeSubTypePropEnum = append(cloudIpFailoverIpTypeSubTypePropEnum, v)
	}
}

const (
	// CloudIPFailoverIPSubTypeCloud captures enum value "cloud"
	CloudIPFailoverIPSubTypeCloud string = "cloud"
	// CloudIPFailoverIPSubTypeOvh captures enum value "ovh"
	CloudIPFailoverIPSubTypeOvh string = "ovh"
)

// prop value enum
func (m *CloudIPFailoverIP) validateSubTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudIpFailoverIpTypeSubTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudIPFailoverIP) validateSubType(formats strfmt.Registry) error {

	if err := validate.RequiredString("subType", "body", string(m.SubType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateSubTypeEnum("subType", "body", m.SubType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudIPFailoverIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudIPFailoverIP) UnmarshalBinary(b []byte) error {
	var res CloudIPFailoverIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
