// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudStorageContainerDetail ContainerDetail
// swagger:model cloud.Storage.ContainerDetail
type CloudStorageContainerDetail struct {

	// Whether this is an archive container or not
	// Required: true
	// Read Only: true
	Archive bool `json:"archive"`

	// Origins allowed to make Cross Origin Requests
	// Required: true
	// Read Only: true
	Cors []string `json:"cors"`

	// Container name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// objects
	// Required: true
	Objects CloudStorageContainerDetailObjects `json:"objects"`

	// Public container
	// Required: true
	// Read Only: true
	Public bool `json:"public"`

	// Container region
	// Required: true
	// Read Only: true
	Region string `json:"region"`

	// Container static URL
	// Required: true
	// Read Only: true
	StaticURL string `json:"staticUrl"`

	// Total bytes stored
	// Required: true
	// Read Only: true
	StoredBytes int64 `json:"storedBytes"`

	// Total objects stored
	// Required: true
	// Read Only: true
	StoredObjects int64 `json:"storedObjects"`
}

// Validate validates this cloud storage container detail
func (m *CloudStorageContainerDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchive(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjects(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStaticURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStoredBytes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStoredObjects(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudStorageContainerDetail) validateArchive(formats strfmt.Registry) error {

	if err := validate.Required("archive", "body", bool(m.Archive)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateCors(formats strfmt.Registry) error {

	if err := validate.Required("cors", "body", m.Cors); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateObjects(formats strfmt.Registry) error {

	if err := validate.Required("objects", "body", m.Objects); err != nil {
		return err
	}

	if err := m.Objects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("objects")
		}
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("public", "body", bool(m.Public)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateRegion(formats strfmt.Registry) error {

	if err := validate.RequiredString("region", "body", string(m.Region)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateStaticURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("staticUrl", "body", string(m.StaticURL)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateStoredBytes(formats strfmt.Registry) error {

	if err := validate.Required("storedBytes", "body", int64(m.StoredBytes)); err != nil {
		return err
	}

	return nil
}

func (m *CloudStorageContainerDetail) validateStoredObjects(formats strfmt.Registry) error {

	if err := validate.Required("storedObjects", "body", int64(m.StoredObjects)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudStorageContainerDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudStorageContainerDetail) UnmarshalBinary(b []byte) error {
	var res CloudStorageContainerDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
