// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PcaSession cloud archives sessions
// swagger:model pca.Session
type PcaSession struct {

	// Session end date
	// Read Only: true
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// Session ID
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// This is your login
	// Required: true
	// Read Only: true
	Login string `json:"login"`

	// Session friendly name
	Name string `json:"name,omitempty"`

	// Session size, in bytes
	// Required: true
	// Read Only: true
	Size int64 `json:"size"`

	// IP session was made from
	// Read Only: true
	SrcIP string `json:"srcIp,omitempty"`

	// Session start date
	// Required: true
	// Read Only: true
	StartDate strfmt.DateTime `json:"startDate"`

	// Session state
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this pca session
func (m *PcaSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PcaSession) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *PcaSession) validateLogin(formats strfmt.Registry) error {

	if err := validate.RequiredString("login", "body", string(m.Login)); err != nil {
		return err
	}

	return nil
}

func (m *PcaSession) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

func (m *PcaSession) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", strfmt.DateTime(m.StartDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var pcaSessionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["doing","doingBackup","doingDelete","doingRestore","done","error","failedDelete","failedRestore","new","tagging","toBackup","toDelete","toRestore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pcaSessionTypeStatePropEnum = append(pcaSessionTypeStatePropEnum, v)
	}
}

const (
	// PcaSessionStateDoing captures enum value "doing"
	PcaSessionStateDoing string = "doing"
	// PcaSessionStateDoingBackup captures enum value "doingBackup"
	PcaSessionStateDoingBackup string = "doingBackup"
	// PcaSessionStateDoingDelete captures enum value "doingDelete"
	PcaSessionStateDoingDelete string = "doingDelete"
	// PcaSessionStateDoingRestore captures enum value "doingRestore"
	PcaSessionStateDoingRestore string = "doingRestore"
	// PcaSessionStateDone captures enum value "done"
	PcaSessionStateDone string = "done"
	// PcaSessionStateError captures enum value "error"
	PcaSessionStateError string = "error"
	// PcaSessionStateFailedDelete captures enum value "failedDelete"
	PcaSessionStateFailedDelete string = "failedDelete"
	// PcaSessionStateFailedRestore captures enum value "failedRestore"
	PcaSessionStateFailedRestore string = "failedRestore"
	// PcaSessionStateNew captures enum value "new"
	PcaSessionStateNew string = "new"
	// PcaSessionStateTagging captures enum value "tagging"
	PcaSessionStateTagging string = "tagging"
	// PcaSessionStateToBackup captures enum value "toBackup"
	PcaSessionStateToBackup string = "toBackup"
	// PcaSessionStateToDelete captures enum value "toDelete"
	PcaSessionStateToDelete string = "toDelete"
	// PcaSessionStateToRestore captures enum value "toRestore"
	PcaSessionStateToRestore string = "toRestore"
)

// prop value enum
func (m *PcaSession) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pcaSessionTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PcaSession) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PcaSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PcaSession) UnmarshalBinary(b []byte) error {
	var res PcaSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
