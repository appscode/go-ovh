// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLoadBalancingIP Your load balancing IP
// swagger:model ip.LoadBalancingIp
type IPLoadBalancingIP struct {

	// Your IP load balancing
	// Required: true
	// Read Only: true
	IPLoadBalancing string `json:"ipLoadBalancing"`

	// The internal name of your IP load balancing
	// Required: true
	// Read Only: true
	ServiceName string `json:"serviceName"`

	// Ssl activation state
	// Required: true
	// Read Only: true
	Ssl string `json:"ssl"`

	// Current state of your IP
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// The type of stickiness currently in place on your Ip LoadBalancing
	// Required: true
	// Read Only: true
	Stickiness string `json:"stickiness"`

	// Location where your service is
	// Required: true
	// Read Only: true
	Zone []string `json:"zone"`
}

// Validate validates this ip load balancing Ip
func (m *IPLoadBalancingIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPLoadBalancing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSsl(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStickiness(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLoadBalancingIP) validateIPLoadBalancing(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipLoadBalancing", "body", string(m.IPLoadBalancing)); err != nil {
		return err
	}

	return nil
}

func (m *IPLoadBalancingIP) validateServiceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("serviceName", "body", string(m.ServiceName)); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingIpTypeSslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["customer","none","ovh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingIpTypeSslPropEnum = append(ipLoadBalancingIpTypeSslPropEnum, v)
	}
}

const (
	// IPLoadBalancingIPSslCustomer captures enum value "customer"
	IPLoadBalancingIPSslCustomer string = "customer"
	// IPLoadBalancingIPSslNone captures enum value "none"
	IPLoadBalancingIPSslNone string = "none"
	// IPLoadBalancingIPSslOvh captures enum value "ovh"
	IPLoadBalancingIPSslOvh string = "ovh"
)

// prop value enum
func (m *IPLoadBalancingIP) validateSslEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingIpTypeSslPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingIP) validateSsl(formats strfmt.Registry) error {

	if err := validate.RequiredString("ssl", "body", string(m.Ssl)); err != nil {
		return err
	}

	// value enum
	if err := m.validateSslEnum("ssl", "body", m.Ssl); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingIpTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blacklisted","deleted","free","ok","quarantined","suspended"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingIpTypeStatePropEnum = append(ipLoadBalancingIpTypeStatePropEnum, v)
	}
}

const (
	// IPLoadBalancingIPStateBlacklisted captures enum value "blacklisted"
	IPLoadBalancingIPStateBlacklisted string = "blacklisted"
	// IPLoadBalancingIPStateDeleted captures enum value "deleted"
	IPLoadBalancingIPStateDeleted string = "deleted"
	// IPLoadBalancingIPStateFree captures enum value "free"
	IPLoadBalancingIPStateFree string = "free"
	// IPLoadBalancingIPStateOk captures enum value "ok"
	IPLoadBalancingIPStateOk string = "ok"
	// IPLoadBalancingIPStateQuarantined captures enum value "quarantined"
	IPLoadBalancingIPStateQuarantined string = "quarantined"
	// IPLoadBalancingIPStateSuspended captures enum value "suspended"
	IPLoadBalancingIPStateSuspended string = "suspended"
)

// prop value enum
func (m *IPLoadBalancingIP) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingIpTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingIP) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingIpTypeStickinessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cookie","none","sourceIp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingIpTypeStickinessPropEnum = append(ipLoadBalancingIpTypeStickinessPropEnum, v)
	}
}

const (
	// IPLoadBalancingIPStickinessCookie captures enum value "cookie"
	IPLoadBalancingIPStickinessCookie string = "cookie"
	// IPLoadBalancingIPStickinessNone captures enum value "none"
	IPLoadBalancingIPStickinessNone string = "none"
	// IPLoadBalancingIPStickinessSourceIP captures enum value "sourceIp"
	IPLoadBalancingIPStickinessSourceIP string = "sourceIp"
)

// prop value enum
func (m *IPLoadBalancingIP) validateStickinessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingIpTypeStickinessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingIP) validateStickiness(formats strfmt.Registry) error {

	if err := validate.RequiredString("stickiness", "body", string(m.Stickiness)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStickinessEnum("stickiness", "body", m.Stickiness); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingIpZoneItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bhs","gra","rbx","sbg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingIpZoneItemsEnum = append(ipLoadBalancingIpZoneItemsEnum, v)
	}
}

func (m *IPLoadBalancingIP) validateZoneItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingIpZoneItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingIP) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	for i := 0; i < len(m.Zone); i++ {

		// value enum
		if err := m.validateZoneItemsEnum("zone"+"."+strconv.Itoa(i), "body", m.Zone[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLoadBalancingIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLoadBalancingIP) UnmarshalBinary(b []byte) error {
	var res IPLoadBalancingIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
