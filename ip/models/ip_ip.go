// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPIP Your IP
// swagger:model ip.Ip
type IPIP struct {

	// can be terminated
	// Required: true
	// Read Only: true
	CanBeTerminated bool `json:"canBeTerminated"`

	// country
	// Read Only: true
	Country string `json:"country,omitempty"`

	// Custom description on your ip
	Description string `json:"description,omitempty"`

	// ip
	// Required: true
	// Read Only: true
	IP string `json:"ip"`

	// IP block organisation Id
	// Read Only: true
	OrganisationID string `json:"organisationId,omitempty"`

	// routed to
	RoutedTo *IPRoutedTo `json:"routedTo,omitempty"`

	// type
	// Required: true
	// Read Only: true
	Type string `json:"type"`
}

// Validate validates this ip Ip
func (m *IPIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanBeTerminated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRoutedTo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPIP) validateCanBeTerminated(formats strfmt.Registry) error {

	if err := validate.Required("canBeTerminated", "body", bool(m.CanBeTerminated)); err != nil {
		return err
	}

	return nil
}

var ipIpTypeCountryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ac","ad","ae","af","ag","ai","al","am","an","ao","aq","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bl","bm","bn","bo","bq","br","bs","bt","bv","bw","by","bz","ca","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cs","cu","cv","cw","cx","cy","cz","de","dj","dk","dm","do","dz","ec","ee","eg","eh","er","es","et","fc","fd","fi","fj","fk","fm","fo","fr","fx","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gs","gt","gu","gw","gy","hk","hm","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","it","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mf","mg","mh","mk","ml","mm","mn","mo","mp","mq","mr","ms","mt","mu","mv","mw","mx","my","mz","na","nc","ne","nf","ng","ni","nl","no","np","nr","nu","nz","om","pa","pe","pf","pg","ph","pk","pl","pm","pn","pr","ps","pt","pw","py","qa","qc","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","sv","sx","sy","sz","tc","td","tf","tg","th","tj","tk","tl","tm","tn","to","tp","tr","tt","tv","tw","tz","ua","ug","uk","um","us","uy","uz","va","vc","ve","vg","vi","vn","vu","we","wf","ws","ye","yt","yu","za","zm","zw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipIpTypeCountryPropEnum = append(ipIpTypeCountryPropEnum, v)
	}
}

const (
	// IPIPCountryAc captures enum value "ac"
	IPIPCountryAc string = "ac"
	// IPIPCountryAd captures enum value "ad"
	IPIPCountryAd string = "ad"
	// IPIPCountryAe captures enum value "ae"
	IPIPCountryAe string = "ae"
	// IPIPCountryAf captures enum value "af"
	IPIPCountryAf string = "af"
	// IPIPCountryAg captures enum value "ag"
	IPIPCountryAg string = "ag"
	// IPIPCountryAi captures enum value "ai"
	IPIPCountryAi string = "ai"
	// IPIPCountryAl captures enum value "al"
	IPIPCountryAl string = "al"
	// IPIPCountryAm captures enum value "am"
	IPIPCountryAm string = "am"
	// IPIPCountryAn captures enum value "an"
	IPIPCountryAn string = "an"
	// IPIPCountryAo captures enum value "ao"
	IPIPCountryAo string = "ao"
	// IPIPCountryAq captures enum value "aq"
	IPIPCountryAq string = "aq"
	// IPIPCountryAr captures enum value "ar"
	IPIPCountryAr string = "ar"
	// IPIPCountryAs captures enum value "as"
	IPIPCountryAs string = "as"
	// IPIPCountryAt captures enum value "at"
	IPIPCountryAt string = "at"
	// IPIPCountryAu captures enum value "au"
	IPIPCountryAu string = "au"
	// IPIPCountryAw captures enum value "aw"
	IPIPCountryAw string = "aw"
	// IPIPCountryAx captures enum value "ax"
	IPIPCountryAx string = "ax"
	// IPIPCountryAz captures enum value "az"
	IPIPCountryAz string = "az"
	// IPIPCountryBa captures enum value "ba"
	IPIPCountryBa string = "ba"
	// IPIPCountryBb captures enum value "bb"
	IPIPCountryBb string = "bb"
	// IPIPCountryBd captures enum value "bd"
	IPIPCountryBd string = "bd"
	// IPIPCountryBe captures enum value "be"
	IPIPCountryBe string = "be"
	// IPIPCountryBf captures enum value "bf"
	IPIPCountryBf string = "bf"
	// IPIPCountryBg captures enum value "bg"
	IPIPCountryBg string = "bg"
	// IPIPCountryBh captures enum value "bh"
	IPIPCountryBh string = "bh"
	// IPIPCountryBi captures enum value "bi"
	IPIPCountryBi string = "bi"
	// IPIPCountryBj captures enum value "bj"
	IPIPCountryBj string = "bj"
	// IPIPCountryBl captures enum value "bl"
	IPIPCountryBl string = "bl"
	// IPIPCountryBm captures enum value "bm"
	IPIPCountryBm string = "bm"
	// IPIPCountryBn captures enum value "bn"
	IPIPCountryBn string = "bn"
	// IPIPCountryBo captures enum value "bo"
	IPIPCountryBo string = "bo"
	// IPIPCountryBq captures enum value "bq"
	IPIPCountryBq string = "bq"
	// IPIPCountryBr captures enum value "br"
	IPIPCountryBr string = "br"
	// IPIPCountryBs captures enum value "bs"
	IPIPCountryBs string = "bs"
	// IPIPCountryBt captures enum value "bt"
	IPIPCountryBt string = "bt"
	// IPIPCountryBv captures enum value "bv"
	IPIPCountryBv string = "bv"
	// IPIPCountryBw captures enum value "bw"
	IPIPCountryBw string = "bw"
	// IPIPCountryBy captures enum value "by"
	IPIPCountryBy string = "by"
	// IPIPCountryBz captures enum value "bz"
	IPIPCountryBz string = "bz"
	// IPIPCountryCa captures enum value "ca"
	IPIPCountryCa string = "ca"
	// IPIPCountryCc captures enum value "cc"
	IPIPCountryCc string = "cc"
	// IPIPCountryCd captures enum value "cd"
	IPIPCountryCd string = "cd"
	// IPIPCountryCf captures enum value "cf"
	IPIPCountryCf string = "cf"
	// IPIPCountryCg captures enum value "cg"
	IPIPCountryCg string = "cg"
	// IPIPCountryCh captures enum value "ch"
	IPIPCountryCh string = "ch"
	// IPIPCountryCi captures enum value "ci"
	IPIPCountryCi string = "ci"
	// IPIPCountryCk captures enum value "ck"
	IPIPCountryCk string = "ck"
	// IPIPCountryCl captures enum value "cl"
	IPIPCountryCl string = "cl"
	// IPIPCountryCm captures enum value "cm"
	IPIPCountryCm string = "cm"
	// IPIPCountryCn captures enum value "cn"
	IPIPCountryCn string = "cn"
	// IPIPCountryCo captures enum value "co"
	IPIPCountryCo string = "co"
	// IPIPCountryCr captures enum value "cr"
	IPIPCountryCr string = "cr"
	// IPIPCountryCs captures enum value "cs"
	IPIPCountryCs string = "cs"
	// IPIPCountryCu captures enum value "cu"
	IPIPCountryCu string = "cu"
	// IPIPCountryCv captures enum value "cv"
	IPIPCountryCv string = "cv"
	// IPIPCountryCw captures enum value "cw"
	IPIPCountryCw string = "cw"
	// IPIPCountryCx captures enum value "cx"
	IPIPCountryCx string = "cx"
	// IPIPCountryCy captures enum value "cy"
	IPIPCountryCy string = "cy"
	// IPIPCountryCz captures enum value "cz"
	IPIPCountryCz string = "cz"
	// IPIPCountryDe captures enum value "de"
	IPIPCountryDe string = "de"
	// IPIPCountryDj captures enum value "dj"
	IPIPCountryDj string = "dj"
	// IPIPCountryDk captures enum value "dk"
	IPIPCountryDk string = "dk"
	// IPIPCountryDm captures enum value "dm"
	IPIPCountryDm string = "dm"
	// IPIPCountryDo captures enum value "do"
	IPIPCountryDo string = "do"
	// IPIPCountryDz captures enum value "dz"
	IPIPCountryDz string = "dz"
	// IPIPCountryEc captures enum value "ec"
	IPIPCountryEc string = "ec"
	// IPIPCountryEe captures enum value "ee"
	IPIPCountryEe string = "ee"
	// IPIPCountryEg captures enum value "eg"
	IPIPCountryEg string = "eg"
	// IPIPCountryEh captures enum value "eh"
	IPIPCountryEh string = "eh"
	// IPIPCountryEr captures enum value "er"
	IPIPCountryEr string = "er"
	// IPIPCountryEs captures enum value "es"
	IPIPCountryEs string = "es"
	// IPIPCountryEt captures enum value "et"
	IPIPCountryEt string = "et"
	// IPIPCountryFc captures enum value "fc"
	IPIPCountryFc string = "fc"
	// IPIPCountryFd captures enum value "fd"
	IPIPCountryFd string = "fd"
	// IPIPCountryFi captures enum value "fi"
	IPIPCountryFi string = "fi"
	// IPIPCountryFj captures enum value "fj"
	IPIPCountryFj string = "fj"
	// IPIPCountryFk captures enum value "fk"
	IPIPCountryFk string = "fk"
	// IPIPCountryFm captures enum value "fm"
	IPIPCountryFm string = "fm"
	// IPIPCountryFo captures enum value "fo"
	IPIPCountryFo string = "fo"
	// IPIPCountryFr captures enum value "fr"
	IPIPCountryFr string = "fr"
	// IPIPCountryFx captures enum value "fx"
	IPIPCountryFx string = "fx"
	// IPIPCountryGa captures enum value "ga"
	IPIPCountryGa string = "ga"
	// IPIPCountryGb captures enum value "gb"
	IPIPCountryGb string = "gb"
	// IPIPCountryGd captures enum value "gd"
	IPIPCountryGd string = "gd"
	// IPIPCountryGe captures enum value "ge"
	IPIPCountryGe string = "ge"
	// IPIPCountryGf captures enum value "gf"
	IPIPCountryGf string = "gf"
	// IPIPCountryGg captures enum value "gg"
	IPIPCountryGg string = "gg"
	// IPIPCountryGh captures enum value "gh"
	IPIPCountryGh string = "gh"
	// IPIPCountryGi captures enum value "gi"
	IPIPCountryGi string = "gi"
	// IPIPCountryGl captures enum value "gl"
	IPIPCountryGl string = "gl"
	// IPIPCountryGm captures enum value "gm"
	IPIPCountryGm string = "gm"
	// IPIPCountryGn captures enum value "gn"
	IPIPCountryGn string = "gn"
	// IPIPCountryGp captures enum value "gp"
	IPIPCountryGp string = "gp"
	// IPIPCountryGq captures enum value "gq"
	IPIPCountryGq string = "gq"
	// IPIPCountryGr captures enum value "gr"
	IPIPCountryGr string = "gr"
	// IPIPCountryGs captures enum value "gs"
	IPIPCountryGs string = "gs"
	// IPIPCountryGt captures enum value "gt"
	IPIPCountryGt string = "gt"
	// IPIPCountryGu captures enum value "gu"
	IPIPCountryGu string = "gu"
	// IPIPCountryGw captures enum value "gw"
	IPIPCountryGw string = "gw"
	// IPIPCountryGy captures enum value "gy"
	IPIPCountryGy string = "gy"
	// IPIPCountryHk captures enum value "hk"
	IPIPCountryHk string = "hk"
	// IPIPCountryHm captures enum value "hm"
	IPIPCountryHm string = "hm"
	// IPIPCountryHn captures enum value "hn"
	IPIPCountryHn string = "hn"
	// IPIPCountryHr captures enum value "hr"
	IPIPCountryHr string = "hr"
	// IPIPCountryHt captures enum value "ht"
	IPIPCountryHt string = "ht"
	// IPIPCountryHu captures enum value "hu"
	IPIPCountryHu string = "hu"
	// IPIPCountryID captures enum value "id"
	IPIPCountryID string = "id"
	// IPIPCountryIe captures enum value "ie"
	IPIPCountryIe string = "ie"
	// IPIPCountryIl captures enum value "il"
	IPIPCountryIl string = "il"
	// IPIPCountryIm captures enum value "im"
	IPIPCountryIm string = "im"
	// IPIPCountryIn captures enum value "in"
	IPIPCountryIn string = "in"
	// IPIPCountryIo captures enum value "io"
	IPIPCountryIo string = "io"
	// IPIPCountryIq captures enum value "iq"
	IPIPCountryIq string = "iq"
	// IPIPCountryIr captures enum value "ir"
	IPIPCountryIr string = "ir"
	// IPIPCountryIs captures enum value "is"
	IPIPCountryIs string = "is"
	// IPIPCountryIt captures enum value "it"
	IPIPCountryIt string = "it"
	// IPIPCountryJe captures enum value "je"
	IPIPCountryJe string = "je"
	// IPIPCountryJm captures enum value "jm"
	IPIPCountryJm string = "jm"
	// IPIPCountryJo captures enum value "jo"
	IPIPCountryJo string = "jo"
	// IPIPCountryJp captures enum value "jp"
	IPIPCountryJp string = "jp"
	// IPIPCountryKe captures enum value "ke"
	IPIPCountryKe string = "ke"
	// IPIPCountryKg captures enum value "kg"
	IPIPCountryKg string = "kg"
	// IPIPCountryKh captures enum value "kh"
	IPIPCountryKh string = "kh"
	// IPIPCountryKi captures enum value "ki"
	IPIPCountryKi string = "ki"
	// IPIPCountryKm captures enum value "km"
	IPIPCountryKm string = "km"
	// IPIPCountryKn captures enum value "kn"
	IPIPCountryKn string = "kn"
	// IPIPCountryKp captures enum value "kp"
	IPIPCountryKp string = "kp"
	// IPIPCountryKr captures enum value "kr"
	IPIPCountryKr string = "kr"
	// IPIPCountryKw captures enum value "kw"
	IPIPCountryKw string = "kw"
	// IPIPCountryKy captures enum value "ky"
	IPIPCountryKy string = "ky"
	// IPIPCountryKz captures enum value "kz"
	IPIPCountryKz string = "kz"
	// IPIPCountryLa captures enum value "la"
	IPIPCountryLa string = "la"
	// IPIPCountryLb captures enum value "lb"
	IPIPCountryLb string = "lb"
	// IPIPCountryLc captures enum value "lc"
	IPIPCountryLc string = "lc"
	// IPIPCountryLi captures enum value "li"
	IPIPCountryLi string = "li"
	// IPIPCountryLk captures enum value "lk"
	IPIPCountryLk string = "lk"
	// IPIPCountryLr captures enum value "lr"
	IPIPCountryLr string = "lr"
	// IPIPCountryLs captures enum value "ls"
	IPIPCountryLs string = "ls"
	// IPIPCountryLt captures enum value "lt"
	IPIPCountryLt string = "lt"
	// IPIPCountryLu captures enum value "lu"
	IPIPCountryLu string = "lu"
	// IPIPCountryLv captures enum value "lv"
	IPIPCountryLv string = "lv"
	// IPIPCountryLy captures enum value "ly"
	IPIPCountryLy string = "ly"
	// IPIPCountryMa captures enum value "ma"
	IPIPCountryMa string = "ma"
	// IPIPCountryMc captures enum value "mc"
	IPIPCountryMc string = "mc"
	// IPIPCountryMd captures enum value "md"
	IPIPCountryMd string = "md"
	// IPIPCountryMe captures enum value "me"
	IPIPCountryMe string = "me"
	// IPIPCountryMf captures enum value "mf"
	IPIPCountryMf string = "mf"
	// IPIPCountryMg captures enum value "mg"
	IPIPCountryMg string = "mg"
	// IPIPCountryMh captures enum value "mh"
	IPIPCountryMh string = "mh"
	// IPIPCountryMk captures enum value "mk"
	IPIPCountryMk string = "mk"
	// IPIPCountryMl captures enum value "ml"
	IPIPCountryMl string = "ml"
	// IPIPCountryMm captures enum value "mm"
	IPIPCountryMm string = "mm"
	// IPIPCountryMn captures enum value "mn"
	IPIPCountryMn string = "mn"
	// IPIPCountryMo captures enum value "mo"
	IPIPCountryMo string = "mo"
	// IPIPCountryMp captures enum value "mp"
	IPIPCountryMp string = "mp"
	// IPIPCountryMq captures enum value "mq"
	IPIPCountryMq string = "mq"
	// IPIPCountryMr captures enum value "mr"
	IPIPCountryMr string = "mr"
	// IPIPCountryMs captures enum value "ms"
	IPIPCountryMs string = "ms"
	// IPIPCountryMt captures enum value "mt"
	IPIPCountryMt string = "mt"
	// IPIPCountryMu captures enum value "mu"
	IPIPCountryMu string = "mu"
	// IPIPCountryMv captures enum value "mv"
	IPIPCountryMv string = "mv"
	// IPIPCountryMw captures enum value "mw"
	IPIPCountryMw string = "mw"
	// IPIPCountryMx captures enum value "mx"
	IPIPCountryMx string = "mx"
	// IPIPCountryMy captures enum value "my"
	IPIPCountryMy string = "my"
	// IPIPCountryMz captures enum value "mz"
	IPIPCountryMz string = "mz"
	// IPIPCountryNa captures enum value "na"
	IPIPCountryNa string = "na"
	// IPIPCountryNc captures enum value "nc"
	IPIPCountryNc string = "nc"
	// IPIPCountryNe captures enum value "ne"
	IPIPCountryNe string = "ne"
	// IPIPCountryNf captures enum value "nf"
	IPIPCountryNf string = "nf"
	// IPIPCountryNg captures enum value "ng"
	IPIPCountryNg string = "ng"
	// IPIPCountryNi captures enum value "ni"
	IPIPCountryNi string = "ni"
	// IPIPCountryNl captures enum value "nl"
	IPIPCountryNl string = "nl"
	// IPIPCountryNo captures enum value "no"
	IPIPCountryNo string = "no"
	// IPIPCountryNp captures enum value "np"
	IPIPCountryNp string = "np"
	// IPIPCountryNr captures enum value "nr"
	IPIPCountryNr string = "nr"
	// IPIPCountryNu captures enum value "nu"
	IPIPCountryNu string = "nu"
	// IPIPCountryNz captures enum value "nz"
	IPIPCountryNz string = "nz"
	// IPIPCountryOm captures enum value "om"
	IPIPCountryOm string = "om"
	// IPIPCountryPa captures enum value "pa"
	IPIPCountryPa string = "pa"
	// IPIPCountryPe captures enum value "pe"
	IPIPCountryPe string = "pe"
	// IPIPCountryPf captures enum value "pf"
	IPIPCountryPf string = "pf"
	// IPIPCountryPg captures enum value "pg"
	IPIPCountryPg string = "pg"
	// IPIPCountryPh captures enum value "ph"
	IPIPCountryPh string = "ph"
	// IPIPCountryPk captures enum value "pk"
	IPIPCountryPk string = "pk"
	// IPIPCountryPl captures enum value "pl"
	IPIPCountryPl string = "pl"
	// IPIPCountryPm captures enum value "pm"
	IPIPCountryPm string = "pm"
	// IPIPCountryPn captures enum value "pn"
	IPIPCountryPn string = "pn"
	// IPIPCountryPr captures enum value "pr"
	IPIPCountryPr string = "pr"
	// IPIPCountryPs captures enum value "ps"
	IPIPCountryPs string = "ps"
	// IPIPCountryPt captures enum value "pt"
	IPIPCountryPt string = "pt"
	// IPIPCountryPw captures enum value "pw"
	IPIPCountryPw string = "pw"
	// IPIPCountryPy captures enum value "py"
	IPIPCountryPy string = "py"
	// IPIPCountryQa captures enum value "qa"
	IPIPCountryQa string = "qa"
	// IPIPCountryQc captures enum value "qc"
	IPIPCountryQc string = "qc"
	// IPIPCountryRe captures enum value "re"
	IPIPCountryRe string = "re"
	// IPIPCountryRo captures enum value "ro"
	IPIPCountryRo string = "ro"
	// IPIPCountryRs captures enum value "rs"
	IPIPCountryRs string = "rs"
	// IPIPCountryRu captures enum value "ru"
	IPIPCountryRu string = "ru"
	// IPIPCountryRw captures enum value "rw"
	IPIPCountryRw string = "rw"
	// IPIPCountrySa captures enum value "sa"
	IPIPCountrySa string = "sa"
	// IPIPCountrySb captures enum value "sb"
	IPIPCountrySb string = "sb"
	// IPIPCountrySc captures enum value "sc"
	IPIPCountrySc string = "sc"
	// IPIPCountrySd captures enum value "sd"
	IPIPCountrySd string = "sd"
	// IPIPCountrySe captures enum value "se"
	IPIPCountrySe string = "se"
	// IPIPCountrySg captures enum value "sg"
	IPIPCountrySg string = "sg"
	// IPIPCountrySh captures enum value "sh"
	IPIPCountrySh string = "sh"
	// IPIPCountrySi captures enum value "si"
	IPIPCountrySi string = "si"
	// IPIPCountrySj captures enum value "sj"
	IPIPCountrySj string = "sj"
	// IPIPCountrySk captures enum value "sk"
	IPIPCountrySk string = "sk"
	// IPIPCountrySl captures enum value "sl"
	IPIPCountrySl string = "sl"
	// IPIPCountrySm captures enum value "sm"
	IPIPCountrySm string = "sm"
	// IPIPCountrySn captures enum value "sn"
	IPIPCountrySn string = "sn"
	// IPIPCountrySo captures enum value "so"
	IPIPCountrySo string = "so"
	// IPIPCountrySr captures enum value "sr"
	IPIPCountrySr string = "sr"
	// IPIPCountrySs captures enum value "ss"
	IPIPCountrySs string = "ss"
	// IPIPCountrySt captures enum value "st"
	IPIPCountrySt string = "st"
	// IPIPCountrySv captures enum value "sv"
	IPIPCountrySv string = "sv"
	// IPIPCountrySx captures enum value "sx"
	IPIPCountrySx string = "sx"
	// IPIPCountrySy captures enum value "sy"
	IPIPCountrySy string = "sy"
	// IPIPCountrySz captures enum value "sz"
	IPIPCountrySz string = "sz"
	// IPIPCountryTc captures enum value "tc"
	IPIPCountryTc string = "tc"
	// IPIPCountryTd captures enum value "td"
	IPIPCountryTd string = "td"
	// IPIPCountryTf captures enum value "tf"
	IPIPCountryTf string = "tf"
	// IPIPCountryTg captures enum value "tg"
	IPIPCountryTg string = "tg"
	// IPIPCountryTh captures enum value "th"
	IPIPCountryTh string = "th"
	// IPIPCountryTj captures enum value "tj"
	IPIPCountryTj string = "tj"
	// IPIPCountryTk captures enum value "tk"
	IPIPCountryTk string = "tk"
	// IPIPCountryTl captures enum value "tl"
	IPIPCountryTl string = "tl"
	// IPIPCountryTm captures enum value "tm"
	IPIPCountryTm string = "tm"
	// IPIPCountryTn captures enum value "tn"
	IPIPCountryTn string = "tn"
	// IPIPCountryTo captures enum value "to"
	IPIPCountryTo string = "to"
	// IPIPCountryTp captures enum value "tp"
	IPIPCountryTp string = "tp"
	// IPIPCountryTr captures enum value "tr"
	IPIPCountryTr string = "tr"
	// IPIPCountryTt captures enum value "tt"
	IPIPCountryTt string = "tt"
	// IPIPCountryTv captures enum value "tv"
	IPIPCountryTv string = "tv"
	// IPIPCountryTw captures enum value "tw"
	IPIPCountryTw string = "tw"
	// IPIPCountryTz captures enum value "tz"
	IPIPCountryTz string = "tz"
	// IPIPCountryUa captures enum value "ua"
	IPIPCountryUa string = "ua"
	// IPIPCountryUg captures enum value "ug"
	IPIPCountryUg string = "ug"
	// IPIPCountryUk captures enum value "uk"
	IPIPCountryUk string = "uk"
	// IPIPCountryUm captures enum value "um"
	IPIPCountryUm string = "um"
	// IPIPCountryUs captures enum value "us"
	IPIPCountryUs string = "us"
	// IPIPCountryUy captures enum value "uy"
	IPIPCountryUy string = "uy"
	// IPIPCountryUz captures enum value "uz"
	IPIPCountryUz string = "uz"
	// IPIPCountryVa captures enum value "va"
	IPIPCountryVa string = "va"
	// IPIPCountryVc captures enum value "vc"
	IPIPCountryVc string = "vc"
	// IPIPCountryVe captures enum value "ve"
	IPIPCountryVe string = "ve"
	// IPIPCountryVg captures enum value "vg"
	IPIPCountryVg string = "vg"
	// IPIPCountryVi captures enum value "vi"
	IPIPCountryVi string = "vi"
	// IPIPCountryVn captures enum value "vn"
	IPIPCountryVn string = "vn"
	// IPIPCountryVu captures enum value "vu"
	IPIPCountryVu string = "vu"
	// IPIPCountryWe captures enum value "we"
	IPIPCountryWe string = "we"
	// IPIPCountryWf captures enum value "wf"
	IPIPCountryWf string = "wf"
	// IPIPCountryWs captures enum value "ws"
	IPIPCountryWs string = "ws"
	// IPIPCountryYe captures enum value "ye"
	IPIPCountryYe string = "ye"
	// IPIPCountryYt captures enum value "yt"
	IPIPCountryYt string = "yt"
	// IPIPCountryYu captures enum value "yu"
	IPIPCountryYu string = "yu"
	// IPIPCountryZa captures enum value "za"
	IPIPCountryZa string = "za"
	// IPIPCountryZm captures enum value "zm"
	IPIPCountryZm string = "zm"
	// IPIPCountryZw captures enum value "zw"
	IPIPCountryZw string = "zw"
)

// prop value enum
func (m *IPIP) validateCountryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipIpTypeCountryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPIP) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *IPIP) validateIP(formats strfmt.Registry) error {

	if err := validate.RequiredString("ip", "body", string(m.IP)); err != nil {
		return err
	}

	return nil
}

func (m *IPIP) validateRoutedTo(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutedTo) { // not required
		return nil
	}

	if m.RoutedTo != nil {

		if err := m.RoutedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routedTo")
			}
			return err
		}
	}

	return nil
}

var ipIpTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cdn","cloud","dedicated","failover","hosted_ssl","housing","loadBalancing","mail","overthebox","pcc","pci","private","vpn","vps","vrack","xdsl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipIpTypeTypePropEnum = append(ipIpTypeTypePropEnum, v)
	}
}

const (
	// IPIPTypeCdn captures enum value "cdn"
	IPIPTypeCdn string = "cdn"
	// IPIPTypeCloud captures enum value "cloud"
	IPIPTypeCloud string = "cloud"
	// IPIPTypeDedicated captures enum value "dedicated"
	IPIPTypeDedicated string = "dedicated"
	// IPIPTypeFailover captures enum value "failover"
	IPIPTypeFailover string = "failover"
	// IPIPTypeHostedSsl captures enum value "hosted_ssl"
	IPIPTypeHostedSsl string = "hosted_ssl"
	// IPIPTypeHousing captures enum value "housing"
	IPIPTypeHousing string = "housing"
	// IPIPTypeLoadBalancing captures enum value "loadBalancing"
	IPIPTypeLoadBalancing string = "loadBalancing"
	// IPIPTypeMail captures enum value "mail"
	IPIPTypeMail string = "mail"
	// IPIPTypeOverthebox captures enum value "overthebox"
	IPIPTypeOverthebox string = "overthebox"
	// IPIPTypePcc captures enum value "pcc"
	IPIPTypePcc string = "pcc"
	// IPIPTypePci captures enum value "pci"
	IPIPTypePci string = "pci"
	// IPIPTypePrivate captures enum value "private"
	IPIPTypePrivate string = "private"
	// IPIPTypeVpn captures enum value "vpn"
	IPIPTypeVpn string = "vpn"
	// IPIPTypeVps captures enum value "vps"
	IPIPTypeVps string = "vps"
	// IPIPTypeVrack captures enum value "vrack"
	IPIPTypeVrack string = "vrack"
	// IPIPTypeXdsl captures enum value "xdsl"
	IPIPTypeXdsl string = "xdsl"
)

// prop value enum
func (m *IPIP) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipIpTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPIP) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPIP) UnmarshalBinary(b []byte) error {
	var res IPIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
