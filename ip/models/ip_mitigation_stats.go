// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IPMitigationStats Traffic statistics in and out on a mitigated ip
// swagger:model ip.MitigationStats
type IPMitigationStats struct {

	// in
	In *IPMitigationTraffic `json:"in,omitempty"`

	// out
	Out *IPMitigationTraffic `json:"out,omitempty"`

	// Traffic timestamp
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this ip mitigation stats
func (m *IPMitigationStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOut(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPMitigationStats) validateIn(formats strfmt.Registry) error {

	if swag.IsZero(m.In) { // not required
		return nil
	}

	if m.In != nil {

		if err := m.In.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in")
			}
			return err
		}
	}

	return nil
}

func (m *IPMitigationStats) validateOut(formats strfmt.Registry) error {

	if swag.IsZero(m.Out) { // not required
		return nil
	}

	if m.Out != nil {

		if err := m.Out.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("out")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPMitigationStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPMitigationStats) UnmarshalBinary(b []byte) error {
	var res IPMitigationStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
