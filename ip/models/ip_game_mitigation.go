// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPGameMitigation GAME Anti-DDoS
// swagger:model ip.GameMitigation
type IPGameMitigation struct {

	// Firewall mode : in UDP, only allow traffic matching your rules (as well as established traffic). If not enabled, traffic to ports not defined in your rules will be permited. TCP traffic is unaffected by this.
	FirewallModeEnabled bool `json:"firewallModeEnabled,omitempty"`

	// ip on game
	// Required: true
	// Read Only: true
	IPOnGame string `json:"ipOnGame"`

	// state
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this ip game mitigation
func (m *IPGameMitigation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPOnGame(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPGameMitigation) validateIPOnGame(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipOnGame", "body", string(m.IPOnGame)); err != nil {
		return err
	}

	return nil
}

var ipGameMitigationTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["firewallModeDisablePending","firewallModeEnablePending","ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipGameMitigationTypeStatePropEnum = append(ipGameMitigationTypeStatePropEnum, v)
	}
}

const (
	// IPGameMitigationStateFirewallModeDisablePending captures enum value "firewallModeDisablePending"
	IPGameMitigationStateFirewallModeDisablePending string = "firewallModeDisablePending"
	// IPGameMitigationStateFirewallModeEnablePending captures enum value "firewallModeEnablePending"
	IPGameMitigationStateFirewallModeEnablePending string = "firewallModeEnablePending"
	// IPGameMitigationStateOk captures enum value "ok"
	IPGameMitigationStateOk string = "ok"
)

// prop value enum
func (m *IPGameMitigation) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipGameMitigationTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPGameMitigation) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPGameMitigation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPGameMitigation) UnmarshalBinary(b []byte) error {
	var res IPGameMitigation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
