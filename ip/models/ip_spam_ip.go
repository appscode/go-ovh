// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPSpamIP Your IP spam stats
// swagger:model ip.SpamIp
type IPSpamIP struct {

	// Last date the ip was blocked
	// Required: true
	// Read Only: true
	Date strfmt.DateTime `json:"date"`

	// IP address which is sending spam
	// Required: true
	// Read Only: true
	IPSpamming string `json:"ipSpamming"`

	// Current state of the ip
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// Time (in seconds) while the IP will be blocked
	// Required: true
	// Read Only: true
	Time int64 `json:"time"`
}

// Validate validates this ip spam Ip
func (m *IPSpamIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPSpamming(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPSpamIP) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IPSpamIP) validateIPSpamming(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipSpamming", "body", string(m.IPSpamming)); err != nil {
		return err
	}

	return nil
}

var ipSpamIpTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blockedForSpam","unblocked","unblocking"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipSpamIpTypeStatePropEnum = append(ipSpamIpTypeStatePropEnum, v)
	}
}

const (
	// IPSpamIPStateBlockedForSpam captures enum value "blockedForSpam"
	IPSpamIPStateBlockedForSpam string = "blockedForSpam"
	// IPSpamIPStateUnblocked captures enum value "unblocked"
	IPSpamIPStateUnblocked string = "unblocked"
	// IPSpamIPStateUnblocking captures enum value "unblocking"
	IPSpamIPStateUnblocking string = "unblocking"
)

// prop value enum
func (m *IPSpamIP) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipSpamIpTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPSpamIP) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *IPSpamIP) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", int64(m.Time)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPSpamIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPSpamIP) UnmarshalBinary(b []byte) error {
	var res IPSpamIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
