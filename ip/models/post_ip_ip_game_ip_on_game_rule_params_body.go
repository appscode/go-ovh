// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIPIPGameIPOnGameRuleParamsBody post Ip Ip game Ip on game rule params body
// swagger:model postIpIpGameIpOnGameRuleParamsBody
type PostIPIPGameIPOnGameRuleParamsBody struct {

	// ports
	// Required: true
	Ports *ComplexTypeRangeLong `json:"ports"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`
}

// Validate validates this post Ip Ip game Ip on game rule params body
func (m *PostIPIPGameIPOnGameRuleParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostIPIPGameIPOnGameRuleParamsBody) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	if m.Ports != nil {

		if err := m.Ports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ports")
			}
			return err
		}
	}

	return nil
}

var postIpIpGameIpOnGameRuleParamsBodyTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["arkSurvivalEvolved","arma","gtaMultiTheftAutoSanAndreas","gtaSanAndreasMultiplayerMod","hl2Source","minecraftPocketEdition","minecraftQuery","mumble","other","rust","teamspeak2","teamspeak3","trackmaniaShootmania"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpIpGameIpOnGameRuleParamsBodyTypeProtocolPropEnum = append(postIpIpGameIpOnGameRuleParamsBodyTypeProtocolPropEnum, v)
	}
}

const (
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolArkSurvivalEvolved captures enum value "arkSurvivalEvolved"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolArkSurvivalEvolved string = "arkSurvivalEvolved"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolArma captures enum value "arma"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolArma string = "arma"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolGtaMultiTheftAutoSanAndreas captures enum value "gtaMultiTheftAutoSanAndreas"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolGtaMultiTheftAutoSanAndreas string = "gtaMultiTheftAutoSanAndreas"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolGtaSanAndreasMultiplayerMod captures enum value "gtaSanAndreasMultiplayerMod"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolGtaSanAndreasMultiplayerMod string = "gtaSanAndreasMultiplayerMod"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolHl2Source captures enum value "hl2Source"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolHl2Source string = "hl2Source"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolMinecraftPocketEdition captures enum value "minecraftPocketEdition"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolMinecraftPocketEdition string = "minecraftPocketEdition"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolMinecraftQuery captures enum value "minecraftQuery"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolMinecraftQuery string = "minecraftQuery"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolMumble captures enum value "mumble"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolMumble string = "mumble"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolOther captures enum value "other"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolOther string = "other"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolRust captures enum value "rust"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolRust string = "rust"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolTeamspeak2 captures enum value "teamspeak2"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolTeamspeak2 string = "teamspeak2"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolTeamspeak3 captures enum value "teamspeak3"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolTeamspeak3 string = "teamspeak3"
	// PostIPIPGameIPOnGameRuleParamsBodyProtocolTrackmaniaShootmania captures enum value "trackmaniaShootmania"
	PostIPIPGameIPOnGameRuleParamsBodyProtocolTrackmaniaShootmania string = "trackmaniaShootmania"
)

// prop value enum
func (m *PostIPIPGameIPOnGameRuleParamsBody) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpIpGameIpOnGameRuleParamsBodyTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPIPGameIPOnGameRuleParamsBody) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIPIPGameIPOnGameRuleParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIPIPGameIPOnGameRuleParamsBody) UnmarshalBinary(b []byte) error {
	var res PostIPIPGameIPOnGameRuleParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
