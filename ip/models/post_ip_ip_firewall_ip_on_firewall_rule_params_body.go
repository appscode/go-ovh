// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIPIPFirewallIPOnFirewallRuleParamsBody post Ip Ip firewall Ip on firewall rule params body
// swagger:model postIpIpFirewallIpOnFirewallRuleParamsBody
type PostIPIPFirewallIPOnFirewallRuleParamsBody struct {

	// action
	// Required: true
	Action *string `json:"action"`

	// destination port
	DestinationPort int64 `json:"destinationPort,omitempty"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// sequence
	// Required: true
	Sequence *int64 `json:"sequence"`

	// source
	Source string `json:"source,omitempty"`

	// source port
	SourcePort int64 `json:"sourcePort,omitempty"`

	// tcp option
	TCPOption *IPFirewallOptionTCP `json:"tcpOption,omitempty"`
}

// Validate validates this post Ip Ip firewall Ip on firewall rule params body
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTCPOption(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postIpIpFirewallIpOnFirewallRuleParamsBodyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny","permit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpIpFirewallIpOnFirewallRuleParamsBodyTypeActionPropEnum = append(postIpIpFirewallIpOnFirewallRuleParamsBodyTypeActionPropEnum, v)
	}
}

const (
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyActionDeny captures enum value "deny"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyActionDeny string = "deny"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyActionPermit captures enum value "permit"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyActionPermit string = "permit"
)

// prop value enum
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpIpFirewallIpOnFirewallRuleParamsBodyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var postIpIpFirewallIpOnFirewallRuleParamsBodyTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ah","esp","gre","icmp","ipv4","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpIpFirewallIpOnFirewallRuleParamsBodyTypeProtocolPropEnum = append(postIpIpFirewallIpOnFirewallRuleParamsBodyTypeProtocolPropEnum, v)
	}
}

const (
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolAh captures enum value "ah"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolAh string = "ah"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolEsp captures enum value "esp"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolEsp string = "esp"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolGre captures enum value "gre"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolGre string = "gre"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolIcmp captures enum value "icmp"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolIcmp string = "icmp"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolIPV4 captures enum value "ipv4"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolIPV4 string = "ipv4"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolTCP captures enum value "tcp"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolTCP string = "tcp"
	// PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolUDP captures enum value "udp"
	PostIPIPFirewallIPOnFirewallRuleParamsBodyProtocolUDP string = "udp"
)

// prop value enum
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIpIpFirewallIpOnFirewallRuleParamsBodyTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

var postIpIpFirewallIpOnFirewallRuleParamsBodyTypeSequencePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,10,11,12,13,14,15,16,17,18,19,2,3,4,5,6,7,8,9]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIpIpFirewallIpOnFirewallRuleParamsBodyTypeSequencePropEnum = append(postIpIpFirewallIpOnFirewallRuleParamsBodyTypeSequencePropEnum, v)
	}
}

// prop value enum
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateSequenceEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, postIpIpFirewallIpOnFirewallRuleParamsBodyTypeSequencePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("sequence", "body", m.Sequence); err != nil {
		return err
	}

	// value enum
	if err := m.validateSequenceEnum("sequence", "body", *m.Sequence); err != nil {
		return err
	}

	return nil
}

func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) validateTCPOption(formats strfmt.Registry) error {

	if swag.IsZero(m.TCPOption) { // not required
		return nil
	}

	if m.TCPOption != nil {

		if err := m.TCPOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcpOption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIPIPFirewallIPOnFirewallRuleParamsBody) UnmarshalBinary(b []byte) error {
	var res PostIPIPFirewallIPOnFirewallRuleParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
