// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPGameMitigationRule Rule on ip:ports
// swagger:model ip.GameMitigationRule
type IPGameMitigationRule struct {

	// ID of the rule
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// ports
	// Required: true
	Ports *IPGameMitigationRulePorts `json:"ports"`

	// protocol
	// Required: true
	// Read Only: true
	Protocol string `json:"protocol"`

	// Current state of your rule
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this ip game mitigation rule
func (m *IPGameMitigationRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPGameMitigationRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *IPGameMitigationRule) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	if m.Ports != nil {

		if err := m.Ports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ports")
			}
			return err
		}
	}

	return nil
}

var ipGameMitigationRuleTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["arkSurvivalEvolved","arma","gtaMultiTheftAutoSanAndreas","gtaSanAndreasMultiplayerMod","hl2Source","minecraftPocketEdition","minecraftQuery","mumble","other","rust","teamspeak2","teamspeak3","trackmaniaShootmania"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipGameMitigationRuleTypeProtocolPropEnum = append(ipGameMitigationRuleTypeProtocolPropEnum, v)
	}
}

const (
	// IPGameMitigationRuleProtocolArkSurvivalEvolved captures enum value "arkSurvivalEvolved"
	IPGameMitigationRuleProtocolArkSurvivalEvolved string = "arkSurvivalEvolved"
	// IPGameMitigationRuleProtocolArma captures enum value "arma"
	IPGameMitigationRuleProtocolArma string = "arma"
	// IPGameMitigationRuleProtocolGtaMultiTheftAutoSanAndreas captures enum value "gtaMultiTheftAutoSanAndreas"
	IPGameMitigationRuleProtocolGtaMultiTheftAutoSanAndreas string = "gtaMultiTheftAutoSanAndreas"
	// IPGameMitigationRuleProtocolGtaSanAndreasMultiplayerMod captures enum value "gtaSanAndreasMultiplayerMod"
	IPGameMitigationRuleProtocolGtaSanAndreasMultiplayerMod string = "gtaSanAndreasMultiplayerMod"
	// IPGameMitigationRuleProtocolHl2Source captures enum value "hl2Source"
	IPGameMitigationRuleProtocolHl2Source string = "hl2Source"
	// IPGameMitigationRuleProtocolMinecraftPocketEdition captures enum value "minecraftPocketEdition"
	IPGameMitigationRuleProtocolMinecraftPocketEdition string = "minecraftPocketEdition"
	// IPGameMitigationRuleProtocolMinecraftQuery captures enum value "minecraftQuery"
	IPGameMitigationRuleProtocolMinecraftQuery string = "minecraftQuery"
	// IPGameMitigationRuleProtocolMumble captures enum value "mumble"
	IPGameMitigationRuleProtocolMumble string = "mumble"
	// IPGameMitigationRuleProtocolOther captures enum value "other"
	IPGameMitigationRuleProtocolOther string = "other"
	// IPGameMitigationRuleProtocolRust captures enum value "rust"
	IPGameMitigationRuleProtocolRust string = "rust"
	// IPGameMitigationRuleProtocolTeamspeak2 captures enum value "teamspeak2"
	IPGameMitigationRuleProtocolTeamspeak2 string = "teamspeak2"
	// IPGameMitigationRuleProtocolTeamspeak3 captures enum value "teamspeak3"
	IPGameMitigationRuleProtocolTeamspeak3 string = "teamspeak3"
	// IPGameMitigationRuleProtocolTrackmaniaShootmania captures enum value "trackmaniaShootmania"
	IPGameMitigationRuleProtocolTrackmaniaShootmania string = "trackmaniaShootmania"
)

// prop value enum
func (m *IPGameMitigationRule) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipGameMitigationRuleTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPGameMitigationRule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("protocol", "body", string(m.Protocol)); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

var ipGameMitigationRuleTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["createRulePending","deleteRulePending","ok"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipGameMitigationRuleTypeStatePropEnum = append(ipGameMitigationRuleTypeStatePropEnum, v)
	}
}

const (
	// IPGameMitigationRuleStateCreateRulePending captures enum value "createRulePending"
	IPGameMitigationRuleStateCreateRulePending string = "createRulePending"
	// IPGameMitigationRuleStateDeleteRulePending captures enum value "deleteRulePending"
	IPGameMitigationRuleStateDeleteRulePending string = "deleteRulePending"
	// IPGameMitigationRuleStateOk captures enum value "ok"
	IPGameMitigationRuleStateOk string = "ok"
)

// prop value enum
func (m *IPGameMitigationRule) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipGameMitigationRuleTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPGameMitigationRule) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPGameMitigationRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPGameMitigationRule) UnmarshalBinary(b []byte) error {
	var res IPGameMitigationRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
