// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPFirewallNetworkRule Rule on ip
// swagger:model ip.FirewallNetworkRule
type IPFirewallNetworkRule struct {

	// Action on this rule
	// Required: true
	// Read Only: true
	Action string `json:"action"`

	// creation date
	// Required: true
	// Read Only: true
	CreationDate strfmt.DateTime `json:"creationDate"`

	// Destination ip for your rule
	// Required: true
	// Read Only: true
	Destination string `json:"destination"`

	// Destination port range for your rule. Only with TCP/UDP protocol
	// Read Only: true
	DestinationPort string `json:"destinationPort,omitempty"`

	// Fragments option
	// Read Only: true
	Fragments *bool `json:"fragments,omitempty"`

	// Network protocol
	// Required: true
	// Read Only: true
	Protocol string `json:"protocol"`

	// rule
	// Required: true
	// Read Only: true
	Rule string `json:"rule"`

	// sequence
	// Required: true
	// Read Only: true
	Sequence int64 `json:"sequence"`

	// Source ip for your rule
	// Required: true
	// Read Only: true
	Source string `json:"source"`

	// Source port range for your rule. Only with TCP/UDP protocol
	// Read Only: true
	SourcePort string `json:"sourcePort,omitempty"`

	// Current state of your rule
	// Required: true
	// Read Only: true
	State string `json:"state"`

	// TCP option on your rule
	// Read Only: true
	TCPOption string `json:"tcpOption,omitempty"`
}

// Validate validates this ip firewall network rule
func (m *IPFirewallNetworkRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipFirewallNetworkRuleTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny","permit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipFirewallNetworkRuleTypeActionPropEnum = append(ipFirewallNetworkRuleTypeActionPropEnum, v)
	}
}

const (
	// IPFirewallNetworkRuleActionDeny captures enum value "deny"
	IPFirewallNetworkRuleActionDeny string = "deny"
	// IPFirewallNetworkRuleActionPermit captures enum value "permit"
	IPFirewallNetworkRuleActionPermit string = "permit"
)

// prop value enum
func (m *IPFirewallNetworkRule) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipFirewallNetworkRuleTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPFirewallNetworkRule) validateAction(formats strfmt.Registry) error {

	if err := validate.RequiredString("action", "body", string(m.Action)); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *IPFirewallNetworkRule) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IPFirewallNetworkRule) validateDestination(formats strfmt.Registry) error {

	if err := validate.RequiredString("destination", "body", string(m.Destination)); err != nil {
		return err
	}

	return nil
}

var ipFirewallNetworkRuleTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ah","esp","gre","icmp","ipv4","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipFirewallNetworkRuleTypeProtocolPropEnum = append(ipFirewallNetworkRuleTypeProtocolPropEnum, v)
	}
}

const (
	// IPFirewallNetworkRuleProtocolAh captures enum value "ah"
	IPFirewallNetworkRuleProtocolAh string = "ah"
	// IPFirewallNetworkRuleProtocolEsp captures enum value "esp"
	IPFirewallNetworkRuleProtocolEsp string = "esp"
	// IPFirewallNetworkRuleProtocolGre captures enum value "gre"
	IPFirewallNetworkRuleProtocolGre string = "gre"
	// IPFirewallNetworkRuleProtocolIcmp captures enum value "icmp"
	IPFirewallNetworkRuleProtocolIcmp string = "icmp"
	// IPFirewallNetworkRuleProtocolIPV4 captures enum value "ipv4"
	IPFirewallNetworkRuleProtocolIPV4 string = "ipv4"
	// IPFirewallNetworkRuleProtocolTCP captures enum value "tcp"
	IPFirewallNetworkRuleProtocolTCP string = "tcp"
	// IPFirewallNetworkRuleProtocolUDP captures enum value "udp"
	IPFirewallNetworkRuleProtocolUDP string = "udp"
)

// prop value enum
func (m *IPFirewallNetworkRule) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipFirewallNetworkRuleTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPFirewallNetworkRule) validateProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("protocol", "body", string(m.Protocol)); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *IPFirewallNetworkRule) validateRule(formats strfmt.Registry) error {

	if err := validate.RequiredString("rule", "body", string(m.Rule)); err != nil {
		return err
	}

	return nil
}

func (m *IPFirewallNetworkRule) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("sequence", "body", int64(m.Sequence)); err != nil {
		return err
	}

	return nil
}

func (m *IPFirewallNetworkRule) validateSource(formats strfmt.Registry) error {

	if err := validate.RequiredString("source", "body", string(m.Source)); err != nil {
		return err
	}

	return nil
}

var ipFirewallNetworkRuleTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creationPending","ok","removalPending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipFirewallNetworkRuleTypeStatePropEnum = append(ipFirewallNetworkRuleTypeStatePropEnum, v)
	}
}

const (
	// IPFirewallNetworkRuleStateCreationPending captures enum value "creationPending"
	IPFirewallNetworkRuleStateCreationPending string = "creationPending"
	// IPFirewallNetworkRuleStateOk captures enum value "ok"
	IPFirewallNetworkRuleStateOk string = "ok"
	// IPFirewallNetworkRuleStateRemovalPending captures enum value "removalPending"
	IPFirewallNetworkRuleStateRemovalPending string = "removalPending"
)

// prop value enum
func (m *IPFirewallNetworkRule) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipFirewallNetworkRuleTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPFirewallNetworkRule) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPFirewallNetworkRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPFirewallNetworkRule) UnmarshalBinary(b []byte) error {
	var res IPFirewallNetworkRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
