// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPLoadBalancingBackendIP Backends attached to your IP load balancing
// swagger:model ip.LoadBalancingBackendIp
type IPLoadBalancingBackendIP struct {

	// IP of your backend
	// Required: true
	// Read Only: true
	Backend string `json:"backend"`

	// If the backend has been configured as backup, this field contains the ip of the main backend
	// Read Only: true
	MainBackendIP string `json:"mainBackendIp,omitempty"`

	// Probe used for your backend
	Probe string `json:"probe,omitempty"`

	// Weight of the backend on its zone, must be between 1 and 100, default is 8
	// Required: true
	// Read Only: true
	Weight int64 `json:"weight"`

	// Location where your service is
	// Required: true
	// Read Only: true
	Zone string `json:"zone"`
}

// Validate validates this ip load balancing backend Ip
func (m *IPLoadBalancingBackendIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackend(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProbe(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPLoadBalancingBackendIP) validateBackend(formats strfmt.Registry) error {

	if err := validate.RequiredString("backend", "body", string(m.Backend)); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingBackendIpTypeProbePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","icmp","none","oco"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingBackendIpTypeProbePropEnum = append(ipLoadBalancingBackendIpTypeProbePropEnum, v)
	}
}

const (
	// IPLoadBalancingBackendIPProbeHTTP captures enum value "http"
	IPLoadBalancingBackendIPProbeHTTP string = "http"
	// IPLoadBalancingBackendIPProbeIcmp captures enum value "icmp"
	IPLoadBalancingBackendIPProbeIcmp string = "icmp"
	// IPLoadBalancingBackendIPProbeNone captures enum value "none"
	IPLoadBalancingBackendIPProbeNone string = "none"
	// IPLoadBalancingBackendIPProbeOco captures enum value "oco"
	IPLoadBalancingBackendIPProbeOco string = "oco"
)

// prop value enum
func (m *IPLoadBalancingBackendIP) validateProbeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingBackendIpTypeProbePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingBackendIP) validateProbe(formats strfmt.Registry) error {

	if swag.IsZero(m.Probe) { // not required
		return nil
	}

	// value enum
	if err := m.validateProbeEnum("probe", "body", m.Probe); err != nil {
		return err
	}

	return nil
}

func (m *IPLoadBalancingBackendIP) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", int64(m.Weight)); err != nil {
		return err
	}

	return nil
}

var ipLoadBalancingBackendIpTypeZonePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bhs","gra","rbx","sbg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipLoadBalancingBackendIpTypeZonePropEnum = append(ipLoadBalancingBackendIpTypeZonePropEnum, v)
	}
}

const (
	// IPLoadBalancingBackendIPZoneBhs captures enum value "bhs"
	IPLoadBalancingBackendIPZoneBhs string = "bhs"
	// IPLoadBalancingBackendIPZoneGra captures enum value "gra"
	IPLoadBalancingBackendIPZoneGra string = "gra"
	// IPLoadBalancingBackendIPZoneRbx captures enum value "rbx"
	IPLoadBalancingBackendIPZoneRbx string = "rbx"
	// IPLoadBalancingBackendIPZoneSbg captures enum value "sbg"
	IPLoadBalancingBackendIPZoneSbg string = "sbg"
)

// prop value enum
func (m *IPLoadBalancingBackendIP) validateZoneEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipLoadBalancingBackendIpTypeZonePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPLoadBalancingBackendIP) validateZone(formats strfmt.Registry) error {

	if err := validate.RequiredString("zone", "body", string(m.Zone)); err != nil {
		return err
	}

	// value enum
	if err := m.validateZoneEnum("zone", "body", m.Zone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPLoadBalancingBackendIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPLoadBalancingBackendIP) UnmarshalBinary(b []byte) error {
	var res IPLoadBalancingBackendIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
