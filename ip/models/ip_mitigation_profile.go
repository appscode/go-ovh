// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPMitigationProfile Mitigation profile for your ip
// swagger:model ip.MitigationProfile
type IPMitigationProfile struct {

	// Delay to wait before remove ip from auto mitigation after an attack
	AutoMitigationTimeOut int64 `json:"autoMitigationTimeOut,omitempty"`

	// ip mitigation profile
	// Required: true
	// Read Only: true
	IPMitigationProfile string `json:"ipMitigationProfile"`

	// Current state of your mitigation profile
	// Required: true
	// Read Only: true
	State string `json:"state"`
}

// Validate validates this ip mitigation profile
func (m *IPMitigationProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoMitigationTimeOut(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPMitigationProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipMitigationProfileTypeAutoMitigationTimeOutPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,15,1560,360,60]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipMitigationProfileTypeAutoMitigationTimeOutPropEnum = append(ipMitigationProfileTypeAutoMitigationTimeOutPropEnum, v)
	}
}

// prop value enum
func (m *IPMitigationProfile) validateAutoMitigationTimeOutEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, ipMitigationProfileTypeAutoMitigationTimeOutPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPMitigationProfile) validateAutoMitigationTimeOut(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoMitigationTimeOut) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoMitigationTimeOutEnum("autoMitigationTimeOut", "body", m.AutoMitigationTimeOut); err != nil {
		return err
	}

	return nil
}

func (m *IPMitigationProfile) validateIPMitigationProfile(formats strfmt.Registry) error {

	if err := validate.RequiredString("ipMitigationProfile", "body", string(m.IPMitigationProfile)); err != nil {
		return err
	}

	return nil
}

var ipMitigationProfileTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","tasksPending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipMitigationProfileTypeStatePropEnum = append(ipMitigationProfileTypeStatePropEnum, v)
	}
}

const (
	// IPMitigationProfileStateOk captures enum value "ok"
	IPMitigationProfileStateOk string = "ok"
	// IPMitigationProfileStateTasksPending captures enum value "tasksPending"
	IPMitigationProfileStateTasksPending string = "tasksPending"
)

// prop value enum
func (m *IPMitigationProfile) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ipMitigationProfileTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IPMitigationProfile) validateState(formats strfmt.Registry) error {

	if err := validate.RequiredString("state", "body", string(m.State)); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPMitigationProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPMitigationProfile) UnmarshalBinary(b []byte) error {
	var res IPMitigationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
