// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteIPIPDelegationTarget deletes a target for reverse delegation on ipv6 subnet

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPDelegationTarget(params *DeleteIPIPDelegationTargetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPDelegationTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPDelegationTargetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPDelegationTarget",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/delegation/{target}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPDelegationTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPDelegationTargetOK), nil

}

/*
DeleteIPIPFirewallIPOnFirewall antis d d o s option delete IP and rules from firewall

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPFirewallIPOnFirewall(params *DeleteIPIPFirewallIPOnFirewallParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPFirewallIPOnFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPFirewallIPOnFirewallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPFirewallIPOnFirewall",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPFirewallIPOnFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPFirewallIPOnFirewallOK), nil

}

/*
DeleteIPIPFirewallIPOnFirewallRuleSequence antis d d o s option delete rule

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPFirewallIPOnFirewallRuleSequence(params *DeleteIPIPFirewallIPOnFirewallRuleSequenceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPFirewallIPOnFirewallRuleSequenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPFirewallIPOnFirewallRuleSequenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPFirewallIPOnFirewallRuleSequence",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPFirewallIPOnFirewallRuleSequenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPFirewallIPOnFirewallRuleSequenceOK), nil

}

/*
DeleteIPIPGameIPOnGameRuleID deletes rule

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPGameIPOnGameRuleID(params *DeleteIPIPGameIPOnGameRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPGameIPOnGameRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPGameIPOnGameRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPGameIPOnGameRuleID",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPGameIPOnGameRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPGameIPOnGameRuleIDOK), nil

}

/*
DeleteIPIPMitigationIPOnMitigation antis d d o s option delete IP from mitigation

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPMitigationIPOnMitigation(params *DeleteIPIPMitigationIPOnMitigationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPMitigationIPOnMitigationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPMitigationIPOnMitigationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPMitigationIPOnMitigation",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/mitigation/{ipOnMitigation}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPMitigationIPOnMitigationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPMitigationIPOnMitigationOK), nil

}

/*
DeleteIPIPMitigationProfilesIPMitigationProfile deletes mitigation profile

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPMitigationProfilesIPMitigationProfile(params *DeleteIPIPMitigationProfilesIPMitigationProfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPMitigationProfilesIPMitigationProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPMitigationProfilesIPMitigationProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPMitigationProfilesIPMitigationProfile",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/mitigationProfiles/{ipMitigationProfile}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPMitigationProfilesIPMitigationProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPMitigationProfilesIPMitigationProfileOK), nil

}

/*
DeleteIPIPReverseIPReverse deletes a reverse on one IP

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPIPReverseIPReverse(params *DeleteIPIPReverseIPReverseParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPIPReverseIPReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPIPReverseIPReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPIPReverseIPReverse",
		Method:             "DELETE",
		PathPattern:        "/ip/{ip}/reverse/{ipReverse}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPIPReverseIPReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPIPReverseIPReverseOK), nil

}

/*
DeleteIPLoadBalancingServiceNameBackendBackend removes a backend IP

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadBalancingServiceNameBackendBackend(params *DeleteIPLoadBalancingServiceNameBackendBackendParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadBalancingServiceNameBackendBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadBalancingServiceNameBackendBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadBalancingServiceNameBackendBackend",
		Method:             "DELETE",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend/{backend}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadBalancingServiceNameBackendBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadBalancingServiceNameBackendBackendOK), nil

}

/*
DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPort deletes a port redirection

PRODUCTION - authentication required
*/
func (a *Client) DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPort(params *DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPortParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPLoadBalancingServiceNamePortsRedirectionSrcPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPort",
		Method:             "DELETE",
		PathPattern:        "/ip/loadBalancing/{serviceName}/portsRedirection/{srcPort}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIPLoadBalancingServiceNamePortsRedirectionSrcPortOK), nil

}

/*
GetIP yours o v h ips

PRODUCTION - authentication required
*/
func (a *Client) GetIP(params *GetIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIP",
		Method:             "GET",
		PathPattern:        "/ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPOK), nil

}

/*
GetIPIP gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIP(params *GetIPIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIP",
		Method:             "GET",
		PathPattern:        "/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPOK), nil

}

/*
GetIPIPAntihack antis hack blocked IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPAntihack(params *GetIPIPAntihackParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPAntihackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPAntihackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPAntihack",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/antihack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPAntihackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPAntihackOK), nil

}

/*
GetIPIPAntihackIPBlocked gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPAntihackIPBlocked(params *GetIPIPAntihackIPBlockedParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPAntihackIPBlockedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPAntihackIPBlockedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPAntihackIPBlocked",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/antihack/{ipBlocked}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPAntihackIPBlockedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPAntihackIPBlockedOK), nil

}

/*
GetIPIPArp as r p blocked IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPArp(params *GetIPIPArpParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPArpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPArpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPArp",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/arp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPArpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPArpOK), nil

}

/*
GetIPIPArpIPBlocked gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPArpIPBlocked(params *GetIPIPArpIPBlockedParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPArpIPBlockedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPArpIPBlockedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPArpIPBlocked",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/arp/{ipBlocked}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPArpIPBlockedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPArpIPBlockedOK), nil

}

/*
GetIPIPDelegation reverses delegation on ipv6 subnet

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPDelegation(params *GetIPIPDelegationParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPDelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPDelegationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPDelegation",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/delegation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPDelegationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPDelegationOK), nil

}

/*
GetIPIPDelegationTarget gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPDelegationTarget(params *GetIPIPDelegationTargetParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPDelegationTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPDelegationTargetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPDelegationTarget",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/delegation/{target}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPDelegationTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPDelegationTargetOK), nil

}

/*
GetIPIPFirewall Ips under firewall

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPFirewall(params *GetIPIPFirewallParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPFirewallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPFirewall",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPFirewallOK), nil

}

/*
GetIPIPFirewallIPOnFirewall gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPFirewallIPOnFirewall(params *GetIPIPFirewallIPOnFirewallParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPFirewallIPOnFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPFirewallIPOnFirewallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPFirewallIPOnFirewall",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPFirewallIPOnFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPFirewallIPOnFirewallOK), nil

}

/*
GetIPIPFirewallIPOnFirewallRule rules for this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPFirewallIPOnFirewallRule(params *GetIPIPFirewallIPOnFirewallRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPFirewallIPOnFirewallRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPFirewallIPOnFirewallRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPFirewallIPOnFirewallRule",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPFirewallIPOnFirewallRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPFirewallIPOnFirewallRuleOK), nil

}

/*
GetIPIPFirewallIPOnFirewallRuleSequence gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPFirewallIPOnFirewallRuleSequence(params *GetIPIPFirewallIPOnFirewallRuleSequenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPFirewallIPOnFirewallRuleSequenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPFirewallIPOnFirewallRuleSequenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPFirewallIPOnFirewallRuleSequence",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}/rule/{sequence}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPFirewallIPOnFirewallRuleSequenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPFirewallIPOnFirewallRuleSequenceOK), nil

}

/*
GetIPIPGame Ips under game anti ddos

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPGame(params *GetIPIPGameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPGameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPGame",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/game",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPGameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPGameOK), nil

}

/*
GetIPIPGameIPOnGame gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPGameIPOnGame(params *GetIPIPGameIPOnGameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPGameIPOnGameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPGameIPOnGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPGameIPOnGame",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPGameIPOnGameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPGameIPOnGameOK), nil

}

/*
GetIPIPGameIPOnGameRule ids of rules configured for this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPGameIPOnGameRule(params *GetIPIPGameIPOnGameRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPGameIPOnGameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPGameIPOnGameRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPGameIPOnGameRule",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPGameIPOnGameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPGameIPOnGameRuleOK), nil

}

/*
GetIPIPGameIPOnGameRuleID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPGameIPOnGameRuleID(params *GetIPIPGameIPOnGameRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPGameIPOnGameRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPGameIPOnGameRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPGameIPOnGameRuleID",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}/rule/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPGameIPOnGameRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPGameIPOnGameRuleIDOK), nil

}

/*
GetIPIPLicenseCloudLinux clouds linux licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseCloudLinux(params *GetIPIPLicenseCloudLinuxParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseCloudLinuxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseCloudLinuxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseCloudLinux",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/cloudLinux",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseCloudLinuxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseCloudLinuxOK), nil

}

/*
GetIPIPLicenseCpanel cpanels licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseCpanel(params *GetIPIPLicenseCpanelParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseCpanelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseCpanelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseCpanel",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/cpanel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseCpanelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseCpanelOK), nil

}

/*
GetIPIPLicenseDirectadmin directs admin licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseDirectadmin(params *GetIPIPLicenseDirectadminParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseDirectadminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseDirectadminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseDirectadmin",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/directadmin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseDirectadminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseDirectadminOK), nil

}

/*
GetIPIPLicensePlesk plesks licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicensePlesk(params *GetIPIPLicensePleskParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicensePleskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicensePleskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicensePlesk",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/plesk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicensePleskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicensePleskOK), nil

}

/*
GetIPIPLicenseSqlserver SQLs server licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseSqlserver(params *GetIPIPLicenseSqlserverParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseSqlserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseSqlserverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseSqlserver",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/sqlserver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseSqlserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseSqlserverOK), nil

}

/*
GetIPIPLicenseVirtuozzo virtuozzos licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseVirtuozzo(params *GetIPIPLicenseVirtuozzoParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseVirtuozzoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseVirtuozzoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseVirtuozzo",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/virtuozzo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseVirtuozzoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseVirtuozzoOK), nil

}

/*
GetIPIPLicenseWindows windows licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseWindows(params *GetIPIPLicenseWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseWindows",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/windows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseWindowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseWindowsOK), nil

}

/*
GetIPIPLicenseWorklight works light licenses associated to this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPLicenseWorklight(params *GetIPIPLicenseWorklightParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPLicenseWorklightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPLicenseWorklightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPLicenseWorklight",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/license/worklight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPLicenseWorklightReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPLicenseWorklightOK), nil

}

/*
GetIPIPMigrationToken gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMigrationToken(params *GetIPIPMigrationTokenParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMigrationTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMigrationTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMigrationToken",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/migrationToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMigrationTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMigrationTokenOK), nil

}

/*
GetIPIPMitigation Ips under mitigation

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigation(params *GetIPIPMitigationParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigation",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationOK), nil

}

/*
GetIPIPMitigationIPOnMitigation gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigationIPOnMitigation(params *GetIPIPMitigationIPOnMitigationParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationIPOnMitigationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationIPOnMitigationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigationIPOnMitigation",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigation/{ipOnMitigation}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationIPOnMitigationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationIPOnMitigationOK), nil

}

/*
GetIPIPMitigationIPOnMitigationStats antis d d o s option get statistics about your traffic in and out during this mitigation

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigationIPOnMitigationStats(params *GetIPIPMitigationIPOnMitigationStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationIPOnMitigationStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationIPOnMitigationStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigationIPOnMitigationStats",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigation/{ipOnMitigation}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationIPOnMitigationStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationIPOnMitigationStatsOK), nil

}

/*
GetIPIPMitigationIPOnMitigationTopStream antis d d o s option get top stream on your ip on a specific timestamp

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigationIPOnMitigationTopStream(params *GetIPIPMitigationIPOnMitigationTopStreamParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationIPOnMitigationTopStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationIPOnMitigationTopStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigationIPOnMitigationTopStream",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigation/{ipOnMitigation}/topStream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationIPOnMitigationTopStreamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationIPOnMitigationTopStreamOK), nil

}

/*
GetIPIPMitigationProfiles manages mitigation profile on your ips

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigationProfiles(params *GetIPIPMitigationProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigationProfiles",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigationProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationProfilesOK), nil

}

/*
GetIPIPMitigationProfilesIPMitigationProfile gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPMitigationProfilesIPMitigationProfile(params *GetIPIPMitigationProfilesIPMitigationProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMitigationProfilesIPMitigationProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMitigationProfilesIPMitigationProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMitigationProfilesIPMitigationProfile",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/mitigationProfiles/{ipMitigationProfile}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMitigationProfilesIPMitigationProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMitigationProfilesIPMitigationProfileOK), nil

}

/*
GetIPIPMove lists services available as a destination

BETA - authentication required
*/
func (a *Client) GetIPIPMove(params *GetIPIPMoveParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPMove",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPMoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPMoveOK), nil

}

/*
GetIPIPPhishing Ips under anti phishing

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPPhishing(params *GetIPIPPhishingParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPPhishingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPPhishingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPPhishing",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/phishing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPPhishingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPPhishingOK), nil

}

/*
GetIPIPPhishingID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPPhishingID(params *GetIPIPPhishingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPPhishingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPPhishingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPPhishingID",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/phishing/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPPhishingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPPhishingIDOK), nil

}

/*
GetIPIPReverse reverses on your ip

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPReverse(params *GetIPIPReverseParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPReverse",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/reverse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPReverseOK), nil

}

/*
GetIPIPReverseIPReverse gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPReverseIPReverse(params *GetIPIPReverseIPReverseParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPReverseIPReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPReverseIPReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPReverseIPReverse",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/reverse/{ipReverse}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPReverseIPReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPReverseIPReverseOK), nil

}

/*
GetIPIPRipe gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPRipe(params *GetIPIPRipeParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPRipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPRipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPRipe",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/ripe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPRipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPRipeOK), nil

}

/*
GetIPIPSpam Ips spamming

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPSpam(params *GetIPIPSpamParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPSpamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPSpamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPSpam",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/spam",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPSpamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPSpamOK), nil

}

/*
GetIPIPSpamIPSpamming gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPSpamIPSpamming(params *GetIPIPSpamIPSpammingParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPSpamIPSpammingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPSpamIPSpammingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPSpamIPSpamming",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/spam/{ipSpamming}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPSpamIPSpammingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPSpamIPSpammingOK), nil

}

/*
GetIPIPSpamIPSpammingStats gets statistics about the email traffic

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPSpamIPSpammingStats(params *GetIPIPSpamIPSpammingStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPSpamIPSpammingStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPSpamIPSpammingStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPSpamIPSpammingStats",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/spam/{ipSpamming}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPSpamIPSpammingStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPSpamIPSpammingStatsOK), nil

}

/*
GetIPIPTask IPs tasks

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPTask(params *GetIPIPTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPTask",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPTaskOK), nil

}

/*
GetIPIPTaskTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPIPTaskTaskID(params *GetIPIPTaskTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPIPTaskTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPIPTaskTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPIPTaskTaskID",
		Method:             "GET",
		PathPattern:        "/ip/{ip}/task/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPIPTaskTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPIPTaskTaskIDOK), nil

}

/*
GetIPLoadBalancing lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancing(params *GetIPLoadBalancingParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancing",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingOK), nil

}

/*
GetIPLoadBalancingServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceName(params *GetIPLoadBalancingServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceName",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameOK), nil

}

/*
GetIPLoadBalancingServiceNameAllowedBackends lists of backends you can attach to your IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameAllowedBackends(params *GetIPLoadBalancingServiceNameAllowedBackendsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameAllowedBackendsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameAllowedBackendsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameAllowedBackends",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/allowedBackends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameAllowedBackendsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameAllowedBackendsOK), nil

}

/*
GetIPLoadBalancingServiceNameBackend backends for this IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameBackend(params *GetIPLoadBalancingServiceNameBackendParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameBackend",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameBackendOK), nil

}

/*
GetIPLoadBalancingServiceNameBackendBackend gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameBackendBackend(params *GetIPLoadBalancingServiceNameBackendBackendParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameBackendBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameBackendBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameBackendBackend",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend/{backend}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameBackendBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameBackendBackendOK), nil

}

/*
GetIPLoadBalancingServiceNameInternalNatIP Ips subnet used by o v h to nat requests on your ip lb to your backends you must ensure that your backends are not part of a network that overlap with this one

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameInternalNatIP(params *GetIPLoadBalancingServiceNameInternalNatIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameInternalNatIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameInternalNatIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameInternalNatIP",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/internalNatIp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameInternalNatIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameInternalNatIPOK), nil

}

/*
GetIPLoadBalancingServiceNamePortsRedirection gets all src port

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNamePortsRedirection(params *GetIPLoadBalancingServiceNamePortsRedirectionParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNamePortsRedirectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNamePortsRedirectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNamePortsRedirection",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/portsRedirection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNamePortsRedirectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNamePortsRedirectionOK), nil

}

/*
GetIPLoadBalancingServiceNamePortsRedirectionSrcPort gets the value for the given src port

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNamePortsRedirectionSrcPort(params *GetIPLoadBalancingServiceNamePortsRedirectionSrcPortParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNamePortsRedirectionSrcPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNamePortsRedirectionSrcPortParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNamePortsRedirectionSrcPort",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/portsRedirection/{srcPort}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNamePortsRedirectionSrcPortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNamePortsRedirectionSrcPortOK), nil

}

/*
GetIPLoadBalancingServiceNameProbeIP Ips subnet used to send probes to your backends

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameProbeIP(params *GetIPLoadBalancingServiceNameProbeIPParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameProbeIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameProbeIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameProbeIP",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/probeIp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameProbeIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameProbeIPOK), nil

}

/*
GetIPLoadBalancingServiceNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameServiceInfos(params *GetIPLoadBalancingServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameServiceInfosOK), nil

}

/*
GetIPLoadBalancingServiceNameTask tasks list associated with this IP

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameTask(params *GetIPLoadBalancingServiceNameTaskParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameTask",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameTaskOK), nil

}

/*
GetIPLoadBalancingServiceNameTaskTaskID gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetIPLoadBalancingServiceNameTaskTaskID(params *GetIPLoadBalancingServiceNameTaskTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPLoadBalancingServiceNameTaskTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPLoadBalancingServiceNameTaskTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPLoadBalancingServiceNameTaskTaskID",
		Method:             "GET",
		PathPattern:        "/ip/loadBalancing/{serviceName}/task/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPLoadBalancingServiceNameTaskTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPLoadBalancingServiceNameTaskTaskIDOK), nil

}

/*
GetIPService lists available services

BETA - authentication required
*/
func (a *Client) GetIPService(params *GetIPServiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPService",
		Method:             "GET",
		PathPattern:        "/ip/service",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPServiceOK), nil

}

/*
GetIPServiceServiceName gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPServiceServiceName(params *GetIPServiceServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPServiceServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPServiceServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPServiceServiceName",
		Method:             "GET",
		PathPattern:        "/ip/service/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPServiceServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPServiceServiceNameOK), nil

}

/*
GetIPServiceServiceNameServiceInfos gets this object properties

BETA - authentication required
*/
func (a *Client) GetIPServiceServiceNameServiceInfos(params *GetIPServiceServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPServiceServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPServiceServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIPServiceServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/ip/service/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPServiceServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPServiceServiceNameServiceInfosOK), nil

}

/*
PostIPIPAntihackIPBlockedUnblock unblocks this IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPAntihackIPBlockedUnblock(params *PostIPIPAntihackIPBlockedUnblockParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPAntihackIPBlockedUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPAntihackIPBlockedUnblockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPAntihackIPBlockedUnblock",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/antihack/{ipBlocked}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPAntihackIPBlockedUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPAntihackIPBlockedUnblockOK), nil

}

/*
PostIPIPArpIPBlockedUnblock unblocks this IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPArpIPBlockedUnblock(params *PostIPIPArpIPBlockedUnblockParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPArpIPBlockedUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPArpIPBlockedUnblockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPArpIPBlockedUnblock",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/arp/{ipBlocked}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPArpIPBlockedUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPArpIPBlockedUnblockOK), nil

}

/*
PostIPIPChangeOrg changes organisation of this IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPChangeOrg(params *PostIPIPChangeOrgParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPChangeOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPChangeOrgParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPChangeOrg",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/changeOrg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPChangeOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPChangeOrgOK), nil

}

/*
PostIPIPDelegation adds target for reverse delegation on ipv6 subnet

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPDelegation(params *PostIPIPDelegationParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPDelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPDelegationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPDelegation",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/delegation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPDelegationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPDelegationOK), nil

}

/*
PostIPIPFirewall antis d d o s option add new IP on firewall

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPFirewall(params *PostIPIPFirewallParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPFirewallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPFirewall",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/firewall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPFirewallOK), nil

}

/*
PostIPIPFirewallIPOnFirewallRule antis d d o s option add new rule on your IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPFirewallIPOnFirewallRule(params *PostIPIPFirewallIPOnFirewallRuleParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPFirewallIPOnFirewallRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPFirewallIPOnFirewallRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPFirewallIPOnFirewallRule",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPFirewallIPOnFirewallRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPFirewallIPOnFirewallRuleOK), nil

}

/*
PostIPIPGameIPOnGameRule adds new rule on your IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPGameIPOnGameRule(params *PostIPIPGameIPOnGameRuleParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPGameIPOnGameRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPGameIPOnGameRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPGameIPOnGameRule",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}/rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPGameIPOnGameRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPGameIPOnGameRuleOK), nil

}

/*
PostIPIPMigrationToken generates a migration token

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPMigrationToken(params *PostIPIPMigrationTokenParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPMigrationTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPMigrationTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPMigrationToken",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/migrationToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPMigrationTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPMigrationTokenOK), nil

}

/*
PostIPIPMitigation antis d d o s option add new IP on permanent mitigation

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPMitigation(params *PostIPIPMitigationParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPMitigationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPMitigationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPMitigation",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/mitigation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPMitigationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPMitigationOK), nil

}

/*
PostIPIPMitigationProfiles creates new profile for one of your ip

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPMitigationProfiles(params *PostIPIPMitigationProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPMitigationProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPMitigationProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPMitigationProfiles",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/mitigationProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPMitigationProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPMitigationProfilesOK), nil

}

/*
PostIPIPMove moves this IP to another service

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPMove(params *PostIPIPMoveParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPMoveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPMoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPMove",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPMoveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPMoveOK), nil

}

/*
PostIPIPPark parks this IP

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPPark(params *PostIPIPParkParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPParkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPParkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPPark",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/park",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPParkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPParkOK), nil

}

/*
PostIPIPReverse adds reverse on an ip

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPReverse(params *PostIPIPReverseParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPReverse",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/reverse",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPReverseOK), nil

}

/*
PostIPIPSpamIPSpammingUnblock releases the ip from anti spam system

PRODUCTION - authentication required
*/
func (a *Client) PostIPIPSpamIPSpammingUnblock(params *PostIPIPSpamIPSpammingUnblockParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPSpamIPSpammingUnblockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPSpamIPSpammingUnblockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPSpamIPSpammingUnblock",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/spam/{ipSpamming}/unblock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPSpamIPSpammingUnblockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPSpamIPSpammingUnblockOK), nil

}

/*
PostIPIPTerminate deletes a failover IP

DEPRECATED (see '/ip/service/{serviceName}/terminate') - authentication required
*/
func (a *Client) PostIPIPTerminate(params *PostIPIPTerminateParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPIPTerminateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPIPTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPIPTerminate",
		Method:             "POST",
		PathPattern:        "/ip/{ip}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPIPTerminateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPIPTerminateOK), nil

}

/*
PostIPLoadBalancingServiceNameBackend adds a new backend on your IP load balancing

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameBackend(params *PostIPLoadBalancingServiceNameBackendParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameBackend",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameBackendOK), nil

}

/*
PostIPLoadBalancingServiceNameBackendBackendBackupState sets or unset the backend as a backup of another backend requests will be directed to the backup only if the main backend is in probe fail

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameBackendBackendBackupState(params *PostIPLoadBalancingServiceNameBackendBackendBackupStateParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameBackendBackendBackupStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameBackendBackendBackupStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameBackendBackendBackupState",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend/{backend}/backupState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameBackendBackendBackupStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameBackendBackendBackupStateOK), nil

}

/*
PostIPLoadBalancingServiceNameBackendBackendSetWeight sets the weight of a backend for instance if backend a has a weight of 8 and backup b was a weight of 16 backend b will receive twice more connections as backend a backends must be on the same p o p for the weight parameter to take effect between them

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameBackendBackendSetWeight(params *PostIPLoadBalancingServiceNameBackendBackendSetWeightParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameBackendBackendSetWeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameBackendBackendSetWeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameBackendBackendSetWeight",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend/{backend}/setWeight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameBackendBackendSetWeightReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameBackendBackendSetWeightOK), nil

}

/*
PostIPLoadBalancingServiceNameImportCustomSsl imports your own ssl certificate on your IP load balancing ssl option is needed to use this url

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameImportCustomSsl(params *PostIPLoadBalancingServiceNameImportCustomSslParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameImportCustomSslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameImportCustomSslParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameImportCustomSsl",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/importCustomSsl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameImportCustomSslReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameImportCustomSslOK), nil

}

/*
PostIPLoadBalancingServiceNamePortsRedirection adds a new port redirection

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNamePortsRedirection(params *PostIPLoadBalancingServiceNamePortsRedirectionParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNamePortsRedirectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNamePortsRedirectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNamePortsRedirection",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/portsRedirection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNamePortsRedirectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNamePortsRedirectionOK), nil

}

/*
PostIPLoadBalancingServiceNameRestoreSsl restores o v h ssl certificate on your IP load balancing ssl option is needed to use this url a d c v mail will be sent to postmaster at your domain abc

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameRestoreSsl(params *PostIPLoadBalancingServiceNameRestoreSslParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameRestoreSslOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameRestoreSslParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameRestoreSsl",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/restoreSsl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameRestoreSslReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameRestoreSslOK), nil

}

/*
PostIPLoadBalancingServiceNameStickiness sets stickiness type ip source will stick clients to a backend by their source ip cookie will stick them by inserting a cookie none is to set no stickiness

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameStickiness(params *PostIPLoadBalancingServiceNameStickinessParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameStickinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameStickinessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameStickiness",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/stickiness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameStickinessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameStickinessOK), nil

}

/*
PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPI switches to ip loadbalancing next gen API benefits additionnals probes d d o s protection

PRODUCTION - authentication required
*/
func (a *Client) PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPI(params *PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPIParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPI",
		Method:             "POST",
		PathPattern:        "/ip/loadBalancing/{serviceName}/switchToIplbNextGenerationApi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPLoadBalancingServiceNameSwitchToIPLBNextGenerationAPIOK), nil

}

/*
PostIPServiceServiceNameChangeContact launches a contact change procedure

BETA - authentication required
*/
func (a *Client) PostIPServiceServiceNameChangeContact(params *PostIPServiceServiceNameChangeContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPServiceServiceNameChangeContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPServiceServiceNameChangeContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPServiceServiceNameChangeContact",
		Method:             "POST",
		PathPattern:        "/ip/service/{serviceName}/changeContact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPServiceServiceNameChangeContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPServiceServiceNameChangeContactOK), nil

}

/*
PostIPServiceServiceNameConfirmTermination confirms termination of your service

BETA - authentication required
*/
func (a *Client) PostIPServiceServiceNameConfirmTermination(params *PostIPServiceServiceNameConfirmTerminationParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPServiceServiceNameConfirmTerminationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPServiceServiceNameConfirmTerminationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPServiceServiceNameConfirmTermination",
		Method:             "POST",
		PathPattern:        "/ip/service/{serviceName}/confirmTermination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPServiceServiceNameConfirmTerminationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPServiceServiceNameConfirmTerminationOK), nil

}

/*
PostIPServiceServiceNameTerminate terminates your service

BETA - authentication required
*/
func (a *Client) PostIPServiceServiceNameTerminate(params *PostIPServiceServiceNameTerminateParams, authInfo runtime.ClientAuthInfoWriter) (*PostIPServiceServiceNameTerminateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPServiceServiceNameTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIPServiceServiceNameTerminate",
		Method:             "POST",
		PathPattern:        "/ip/service/{serviceName}/terminate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIPServiceServiceNameTerminateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIPServiceServiceNameTerminateOK), nil

}

/*
PutIPIP alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIP(params *PutIPIPParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIP",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPOK), nil

}

/*
PutIPIPFirewallIPOnFirewall alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIPFirewallIPOnFirewall(params *PutIPIPFirewallIPOnFirewallParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPFirewallIPOnFirewallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPFirewallIPOnFirewallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIPFirewallIPOnFirewall",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}/firewall/{ipOnFirewall}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPFirewallIPOnFirewallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPFirewallIPOnFirewallOK), nil

}

/*
PutIPIPGameIPOnGame alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIPGameIPOnGame(params *PutIPIPGameIPOnGameParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPGameIPOnGameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPGameIPOnGameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIPGameIPOnGame",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}/game/{ipOnGame}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPGameIPOnGameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPGameIPOnGameOK), nil

}

/*
PutIPIPMitigationIPOnMitigation alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIPMitigationIPOnMitigation(params *PutIPIPMitigationIPOnMitigationParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPMitigationIPOnMitigationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPMitigationIPOnMitigationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIPMitigationIPOnMitigation",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}/mitigation/{ipOnMitigation}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPMitigationIPOnMitigationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPMitigationIPOnMitigationOK), nil

}

/*
PutIPIPMitigationProfilesIPMitigationProfile alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIPMitigationProfilesIPMitigationProfile(params *PutIPIPMitigationProfilesIPMitigationProfileParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPMitigationProfilesIPMitigationProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPMitigationProfilesIPMitigationProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIPMitigationProfilesIPMitigationProfile",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}/mitigationProfiles/{ipMitigationProfile}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPMitigationProfilesIPMitigationProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPMitigationProfilesIPMitigationProfileOK), nil

}

/*
PutIPIPRipe alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPIPRipe(params *PutIPIPRipeParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPIPRipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPIPRipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPIPRipe",
		Method:             "PUT",
		PathPattern:        "/ip/{ip}/ripe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPIPRipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPIPRipeOK), nil

}

/*
PutIPLoadBalancingServiceNameBackendBackend alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadBalancingServiceNameBackendBackend(params *PutIPLoadBalancingServiceNameBackendBackendParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadBalancingServiceNameBackendBackendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadBalancingServiceNameBackendBackendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadBalancingServiceNameBackendBackend",
		Method:             "PUT",
		PathPattern:        "/ip/loadBalancing/{serviceName}/backend/{backend}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadBalancingServiceNameBackendBackendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadBalancingServiceNameBackendBackendOK), nil

}

/*
PutIPLoadBalancingServiceNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutIPLoadBalancingServiceNameServiceInfos(params *PutIPLoadBalancingServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPLoadBalancingServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPLoadBalancingServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPLoadBalancingServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/ip/loadBalancing/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPLoadBalancingServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPLoadBalancingServiceNameServiceInfosOK), nil

}

/*
PutIPServiceServiceName alters this object properties

BETA - authentication required
*/
func (a *Client) PutIPServiceServiceName(params *PutIPServiceServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutIPServiceServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPServiceServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIPServiceServiceName",
		Method:             "PUT",
		PathPattern:        "/ip/service/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIPServiceServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIPServiceServiceNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
