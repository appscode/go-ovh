// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIPIPLicenseVirtuozzoParams creates a new GetIPIPLicenseVirtuozzoParams object
// with the default values initialized.
func NewGetIPIPLicenseVirtuozzoParams() *GetIPIPLicenseVirtuozzoParams {
	var ()
	return &GetIPIPLicenseVirtuozzoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPIPLicenseVirtuozzoParamsWithTimeout creates a new GetIPIPLicenseVirtuozzoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPIPLicenseVirtuozzoParamsWithTimeout(timeout time.Duration) *GetIPIPLicenseVirtuozzoParams {
	var ()
	return &GetIPIPLicenseVirtuozzoParams{

		timeout: timeout,
	}
}

// NewGetIPIPLicenseVirtuozzoParamsWithContext creates a new GetIPIPLicenseVirtuozzoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPIPLicenseVirtuozzoParamsWithContext(ctx context.Context) *GetIPIPLicenseVirtuozzoParams {
	var ()
	return &GetIPIPLicenseVirtuozzoParams{

		Context: ctx,
	}
}

// NewGetIPIPLicenseVirtuozzoParamsWithHTTPClient creates a new GetIPIPLicenseVirtuozzoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPIPLicenseVirtuozzoParamsWithHTTPClient(client *http.Client) *GetIPIPLicenseVirtuozzoParams {
	var ()
	return &GetIPIPLicenseVirtuozzoParams{
		HTTPClient: client,
	}
}

/*GetIPIPLicenseVirtuozzoParams contains all the parameters to send to the API endpoint
for the get IP IP license virtuozzo operation typically these are written to a http.Request
*/
type GetIPIPLicenseVirtuozzoParams struct {

	/*IP*/
	IP string
	/*IPAddress*/
	IPAddress *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) WithTimeout(timeout time.Duration) *GetIPIPLicenseVirtuozzoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) WithContext(ctx context.Context) *GetIPIPLicenseVirtuozzoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) WithHTTPClient(client *http.Client) *GetIPIPLicenseVirtuozzoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIP adds the ip to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) WithIP(ip string) *GetIPIPLicenseVirtuozzoParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) SetIP(ip string) {
	o.IP = ip
}

// WithIPAddress adds the iPAddress to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) WithIPAddress(iPAddress *string) *GetIPIPLicenseVirtuozzoParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the get IP IP license virtuozzo params
func (o *GetIPIPLicenseVirtuozzoParams) SetIPAddress(iPAddress *string) {
	o.IPAddress = iPAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPIPLicenseVirtuozzoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ip
	if err := r.SetPathParam("ip", o.IP); err != nil {
		return err
	}

	if o.IPAddress != nil {

		// query param ipAddress
		var qrIPAddress string
		if o.IPAddress != nil {
			qrIPAddress = *o.IPAddress
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {
			if err := r.SetQueryParam("ipAddress", qIPAddress); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
