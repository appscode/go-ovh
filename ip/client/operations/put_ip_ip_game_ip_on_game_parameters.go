// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/appscode/go-ovh/ip/models"
)

// NewPutIPIPGameIPOnGameParams creates a new PutIPIPGameIPOnGameParams object
// with the default values initialized.
func NewPutIPIPGameIPOnGameParams() *PutIPIPGameIPOnGameParams {
	var ()
	return &PutIPIPGameIPOnGameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutIPIPGameIPOnGameParamsWithTimeout creates a new PutIPIPGameIPOnGameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutIPIPGameIPOnGameParamsWithTimeout(timeout time.Duration) *PutIPIPGameIPOnGameParams {
	var ()
	return &PutIPIPGameIPOnGameParams{

		timeout: timeout,
	}
}

// NewPutIPIPGameIPOnGameParamsWithContext creates a new PutIPIPGameIPOnGameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutIPIPGameIPOnGameParamsWithContext(ctx context.Context) *PutIPIPGameIPOnGameParams {
	var ()
	return &PutIPIPGameIPOnGameParams{

		Context: ctx,
	}
}

// NewPutIPIPGameIPOnGameParamsWithHTTPClient creates a new PutIPIPGameIPOnGameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutIPIPGameIPOnGameParamsWithHTTPClient(client *http.Client) *PutIPIPGameIPOnGameParams {
	var ()
	return &PutIPIPGameIPOnGameParams{
		HTTPClient: client,
	}
}

/*PutIPIPGameIPOnGameParams contains all the parameters to send to the API endpoint
for the put IP IP game IP on game operation typically these are written to a http.Request
*/
type PutIPIPGameIPOnGameParams struct {

	/*IP*/
	IP string
	/*IPGamePut*/
	IPGamePut *models.IPGameMitigation
	/*IPOnGame*/
	IPOnGame string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithTimeout(timeout time.Duration) *PutIPIPGameIPOnGameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithContext(ctx context.Context) *PutIPIPGameIPOnGameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithHTTPClient(client *http.Client) *PutIPIPGameIPOnGameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIP adds the ip to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithIP(ip string) *PutIPIPGameIPOnGameParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetIP(ip string) {
	o.IP = ip
}

// WithIPGamePut adds the iPGamePut to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithIPGamePut(iPGamePut *models.IPGameMitigation) *PutIPIPGameIPOnGameParams {
	o.SetIPGamePut(iPGamePut)
	return o
}

// SetIPGamePut adds the ipGamePut to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetIPGamePut(iPGamePut *models.IPGameMitigation) {
	o.IPGamePut = iPGamePut
}

// WithIPOnGame adds the iPOnGame to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) WithIPOnGame(iPOnGame string) *PutIPIPGameIPOnGameParams {
	o.SetIPOnGame(iPOnGame)
	return o
}

// SetIPOnGame adds the ipOnGame to the put IP IP game IP on game params
func (o *PutIPIPGameIPOnGameParams) SetIPOnGame(iPOnGame string) {
	o.IPOnGame = iPOnGame
}

// WriteToRequest writes these params to a swagger request
func (o *PutIPIPGameIPOnGameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ip
	if err := r.SetPathParam("ip", o.IP); err != nil {
		return err
	}

	if o.IPGamePut != nil {
		if err := r.SetBodyParam(o.IPGamePut); err != nil {
			return err
		}
	}

	// path param ipOnGame
	if err := r.SetPathParam("ipOnGame", o.IPOnGame); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
