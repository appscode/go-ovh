// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIPParams creates a new GetIPParams object
// with the default values initialized.
func NewGetIPParams() *GetIPParams {
	var ()
	return &GetIPParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIPParamsWithTimeout creates a new GetIPParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIPParamsWithTimeout(timeout time.Duration) *GetIPParams {
	var ()
	return &GetIPParams{

		timeout: timeout,
	}
}

// NewGetIPParamsWithContext creates a new GetIPParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIPParamsWithContext(ctx context.Context) *GetIPParams {
	var ()
	return &GetIPParams{

		Context: ctx,
	}
}

// NewGetIPParamsWithHTTPClient creates a new GetIPParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIPParamsWithHTTPClient(client *http.Client) *GetIPParams {
	var ()
	return &GetIPParams{
		HTTPClient: client,
	}
}

/*GetIPParams contains all the parameters to send to the API endpoint
for the get IP operation typically these are written to a http.Request
*/
type GetIPParams struct {

	/*Description*/
	Description *string
	/*IP*/
	IP *string
	/*RoutedToServiceName*/
	RoutedToServiceName *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get IP params
func (o *GetIPParams) WithTimeout(timeout time.Duration) *GetIPParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get IP params
func (o *GetIPParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get IP params
func (o *GetIPParams) WithContext(ctx context.Context) *GetIPParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get IP params
func (o *GetIPParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get IP params
func (o *GetIPParams) WithHTTPClient(client *http.Client) *GetIPParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get IP params
func (o *GetIPParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the get IP params
func (o *GetIPParams) WithDescription(description *string) *GetIPParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get IP params
func (o *GetIPParams) SetDescription(description *string) {
	o.Description = description
}

// WithIP adds the ip to the get IP params
func (o *GetIPParams) WithIP(ip *string) *GetIPParams {
	o.SetIP(ip)
	return o
}

// SetIP adds the ip to the get IP params
func (o *GetIPParams) SetIP(ip *string) {
	o.IP = ip
}

// WithRoutedToServiceName adds the routedToServiceName to the get IP params
func (o *GetIPParams) WithRoutedToServiceName(routedToServiceName *string) *GetIPParams {
	o.SetRoutedToServiceName(routedToServiceName)
	return o
}

// SetRoutedToServiceName adds the routedToServiceName to the get IP params
func (o *GetIPParams) SetRoutedToServiceName(routedToServiceName *string) {
	o.RoutedToServiceName = routedToServiceName
}

// WithType adds the typeVar to the get IP params
func (o *GetIPParams) WithType(typeVar *string) *GetIPParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get IP params
func (o *GetIPParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetIPParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.IP != nil {

		// query param ip
		var qrIP string
		if o.IP != nil {
			qrIP = *o.IP
		}
		qIP := qrIP
		if qIP != "" {
			if err := r.SetQueryParam("ip", qIP); err != nil {
				return err
			}
		}

	}

	if o.RoutedToServiceName != nil {

		// query param routedTo.serviceName
		var qrRoutedToServiceName string
		if o.RoutedToServiceName != nil {
			qrRoutedToServiceName = *o.RoutedToServiceName
		}
		qRoutedToServiceName := qrRoutedToServiceName
		if qRoutedToServiceName != "" {
			if err := r.SetQueryParam("routedTo.serviceName", qRoutedToServiceName); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
