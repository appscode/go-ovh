// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VipSupportVip Vip Service
// swagger:model vip.SupportVip
type VipSupportVip struct {

	// Name of the VIP offer
	// Required: true
	// Read Only: true
	ServiceName string `json:"serviceName"`

	// VIP universes of this service
	// Required: true
	// Read Only: true
	Universe []string `json:"universe"`
}

// Validate validates this vip support vip
func (m *VipSupportVip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniverse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VipSupportVip) validateServiceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("serviceName", "body", string(m.ServiceName)); err != nil {
		return err
	}

	return nil
}

var vipSupportVipUniverseItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cloud","dedicated","telecom","web"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vipSupportVipUniverseItemsEnum = append(vipSupportVipUniverseItemsEnum, v)
	}
}

func (m *VipSupportVip) validateUniverseItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vipSupportVipUniverseItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *VipSupportVip) validateUniverse(formats strfmt.Registry) error {

	if err := validate.Required("universe", "body", m.Universe); err != nil {
		return err
	}

	for i := 0; i < len(m.Universe); i++ {

		// value enum
		if err := m.validateUniverseItemsEnum("universe"+"."+strconv.Itoa(i), "body", m.Universe[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VipSupportVip) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VipSupportVip) UnmarshalBinary(b []byte) error {
	var res VipSupportVip
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
