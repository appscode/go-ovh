// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017 The go-ovh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetVip lists available services

PRODUCTION - authentication required
*/
func (a *Client) GetVip(params *GetVipParams, authInfo runtime.ClientAuthInfoWriter) (*GetVipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVip",
		Method:             "GET",
		PathPattern:        "/vip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVipOK), nil

}

/*
GetVipServiceName gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVipServiceName(params *GetVipServiceNameParams, authInfo runtime.ClientAuthInfoWriter) (*GetVipServiceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVipServiceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVipServiceName",
		Method:             "GET",
		PathPattern:        "/vip/{serviceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVipServiceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVipServiceNameOK), nil

}

/*
GetVipServiceNameServiceInfos gets this object properties

PRODUCTION - authentication required
*/
func (a *Client) GetVipServiceNameServiceInfos(params *GetVipServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*GetVipServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVipServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVipServiceNameServiceInfos",
		Method:             "GET",
		PathPattern:        "/vip/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVipServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVipServiceNameServiceInfosOK), nil

}

/*
PutVipServiceNameServiceInfos alters this object properties

PRODUCTION - authentication required
*/
func (a *Client) PutVipServiceNameServiceInfos(params *PutVipServiceNameServiceInfosParams, authInfo runtime.ClientAuthInfoWriter) (*PutVipServiceNameServiceInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVipServiceNameServiceInfosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutVipServiceNameServiceInfos",
		Method:             "PUT",
		PathPattern:        "/vip/{serviceName}/serviceInfos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVipServiceNameServiceInfosReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutVipServiceNameServiceInfosOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
